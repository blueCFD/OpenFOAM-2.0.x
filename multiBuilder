#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     multiBuilder
#
# Description
#     Help script for building multiple WM_OPTIONS builds sequentially. 
#   Initially created for building mingw-w32 DP+SP + mingw-w64, including 
#   tutorials that need cross-compiling for their applications.
#
#------------------------------------------------------------------------------

#---------- Functions -------------
usage() {
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/}

This will run as a scripted multi-builder of WM_OPTIONS based on each 
bashrc-* version given. NOTE: you cannot have the OpenFOAM environment
activated prior to executing this script!!

USAGE
    exit 1
}

#argument: bashrc file name
buildIt()
{
  #make sure our logging folder is up and running
  if [ ! -d "../buildLogs" ]; then
    mkdir -p ../buildLogs
  fi

  (
    . etc/$1

    timeStamp=$(date +%Y-%m-%d_%H-%M)
    logFile="../buildLogs/Allwmake_${WM_OPTIONS}_${timeStamp}.log"

    echo "Building $WM_OPTIONS ..."
    time ./Allwmake > $logFile 2>&1 && \
    time wmake all tutorials >> $logFile 2>&1

    if isMinGW; then
      fixPatchExeNames >> $logFile 2>&1
    fi

    if [ -e "$WM_PROJECT_USER_DIR/contribsExtend" ]; then
      time wmake all $WM_PROJECT_USER_DIR/contribsExtend >> $logFile 2>&1
    fi
    
  )
}

#---------- script ----------------

if [ "x$1" = "x--sourceonly" ]
then
    : #do nothing...
elif [ "x$1" = "x--help" -o $# -gt 0 -o "x$WM_PROJECT_DIR" != "x" ]
then
    usage
fi

if [ "x$1" != "x--sourceonly" ]
then

  #build with MPICH2 ----------------

  # buildIt bashrc-mingw32

  buildIt bashrc-mingw-w32
  buildIt bashrc-mingw-w32S
  buildIt bashrc-mingw-w64

  # buildIt bashrc-i586-mingw32msvc
  # buildIt bashrc-i586-mingw32msvcS
  # buildIt bashrc-amd64-mingw32msvc

  # buildIt bashrc-i686-w64-mingw32
  # buildIt bashrc-i686-w64-mingw32S
  # buildIt bashrc-x86_64-w64-mingw32


  #build with MSMPI ----------------
  export WM_MPLIB=MSMPI
  # buildIt bashrc-mingw32

  buildIt bashrc-mingw-w32
  buildIt bashrc-mingw-w32S
  buildIt bashrc-mingw-w64

  # buildIt bashrc-i586-mingw32msvc
  # buildIt bashrc-i586-mingw32msvcS
  # buildIt bashrc-amd64-mingw32msvc

  # buildIt bashrc-i686-w64-mingw32
  # buildIt bashrc-i686-w64-mingw32S
  # buildIt bashrc-x86_64-w64-mingw32

fi

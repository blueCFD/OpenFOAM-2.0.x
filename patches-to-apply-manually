diff --git a/Allwmake b/Allwmake
index 55554dc..daed898 100755
--- a/Allwmake
+++ b/Allwmake
@@ -10,7 +10,29 @@ then
 fi
 
 # wmake is required for subsequent targets
-( cd wmake/src && make )
+if ! isMinGW; then
+
+  ( cd wmake/src && make )
+
+else
+
+  if [ -d "wmake/bin/$WM_ARCH$WM_COMPILER" ]; then
+    filecount=`ls -1A "wmake/bin/$WM_ARCH$WM_COMPILER" | wc -l`
+  fi
+
+  if [ "$filecount" = "0" -o ! -d "wmake/bin/$WM_ARCH$WM_COMPILER" ]; then
+    ( cd wmake/src && make cc="gcc" )
+  fi
+  filecount=`ls -1A "wmake/bin/$WM_ARCH$WM_COMPILER" | wc -l`
+
+  #use the wmake compiled for linux usage, if not built with system's gcc
+  if [ "$filecount" = "0" -o ! -d "wmake/bin/$WM_ARCH$WM_COMPILER" ]; then
+    echo "Aborting Allwmake, because a working wmake wasn't found nor built."
+    exit 1
+  fi
+  unset filecount
+
+fi
 
 # build ThirdParty sources
 if [ -d "$WM_THIRD_PARTY_DIR" ]
diff --git a/applications/Allwmake b/applications/Allwmake
index 82a2ec0..a5bfb19 100755
--- a/applications/Allwmake
+++ b/applications/Allwmake
@@ -14,4 +14,18 @@ set -x
 wmake all solvers
 wmake all utilities
 
+if isMinGW; then
+  #since we advise to build these in the wiki, lets just put them here to get built too
+  wmake all utilities/mesh/conversion/Optional #ccmio26ToFoam
+  wmake all test/parallel #parallelTest
+
+  if [ ! -x "$WM_DIR/wmakeVerifyExeDependencies" ]; then chmod 744 $WM_DIR/wmakeVerifyExeDependencies; fi
+
+  wmakeVerifyExeDependencies solvers || wmake all solvers
+  wmakeVerifyExeDependencies utilities || wmake all utilities
+  
+  wmake all utilities/mesh/conversion/Optional
+  wmakeVerifyExeDependencies test/parallel || wmake all test/parallel #parallelTest
+fi
+
 # ----------------------------------------------------------------- end-of-file
diff --git a/bin/tools/RunFunctions b/bin/tools/RunFunctions
old mode 100644
new mode 100755
index 99bf3a3..9edaca2
--- a/bin/tools/RunFunctions
+++ b/bin/tools/RunFunctions
@@ -1,82 +1,14 @@
-#---------------------------------*- sh -*-------------------------------------
-# =========                 |
-# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
-#  \\    /   O peration     |
-#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
-#    \\/     M anipulation  |
 #------------------------------------------------------------------------------
-# License
-#     This file is part of OpenFOAM.
-#
-#     OpenFOAM is free software: you can redistribute it and/or modify it
-#     under the terms of the GNU General Public License as published by
-#     the Free Software Foundation, either version 3 of the License, or
-#     (at your option) any later version.
-#
-#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
-#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-#     for more details.
-#
-#     You should have received a copy of the GNU General Public License
-#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
-#
+# 
 # Script
 #     RunFunctions
 #
 # Description
-#
+#   This is just fork for sourcing the correct file.
 #------------------------------------------------------------------------------
 
-getApplication ()
-{
-    grep application system/controlDict | sed "s/application *\([a-zA-Z]*\);/\1/"
-}
-
-runApplication ()
-{
-    APP_RUN=$1; shift
-    APP_NAME=${APP_RUN##*/}
-
-    if [ -f log.$APP_NAME ] ; then
-        echo "$APP_NAME already run on $PWD: remove log file to run"
-    else
-        echo "Running $APP_RUN on $PWD"
-        $APP_RUN $* > log.$APP_NAME 2>&1
-    fi
-}
-
-runParallel ()
-{
-    APP_RUN=$1; shift
-
-    if [ -f $log.$APP_RUN ] ; then
-        echo "$APP_RUN already run on $PWD: remove log file to run"
-    else
-        echo "Running $APP_RUN in parallel on $PWD using $1 processes"
-        ( mpirun -np $1 $APP_RUN -parallel < /dev/null > log.$APP_RUN 2>&1 )
-    fi
-}
-
-compileApplication ()
-{
-    echo "Compiling $1 application"
-    wmake $1
-}
-
-cloneCase ()
-{
-    if [ -d $2 ] ; then
-        echo "Case already cloned: remove case directory $2 to clone"
-    else
-        echo "Cloning $2 case from $1"
-        mkdir $2
-        cpfiles="0 system constant"
-        for f in $cpfiles
-        do
-            cp -r $1/$f $2
-        done
-    fi
-}
-
-#------------------------------------------------------------------------------
+if [ "x$DEBUG_MAXRUNTIME" = "x" ]; then
+  . $WM_PROJECT_DIR/bin/tools/RunFunctionsOrig
+else
+  . $WM_PROJECT_DIR/bin/tools/RunFunctionsMod
+fi
diff --git a/bin/tools/RunFunctionsMod b/bin/tools/RunFunctionsMod
new file mode 100755
index 0000000..37bc123
--- /dev/null
+++ b/bin/tools/RunFunctionsMod
@@ -0,0 +1,169 @@
+#---------------------------------*- sh -*-------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     RunFunctions
+#
+# Description
+#
+#------------------------------------------------------------------------------
+
+export DEBUG_MAXMAXRUNTIME=`expr $DEBUG_MAXRUNTIME \* 10`
+
+getApplication ()
+{
+    grep application system/controlDict | sed "s/application *\([a-zA-Z]*\);/\1/"
+}
+
+runApplication ()
+{
+    APP_RUN=$1; shift
+    APP_NAME=${APP_RUN##*/}
+
+    if [ -f log.$APP_NAME ] ; then
+        echo "$APP_NAME already run on $PWD: remove log file to run"
+    else
+        echo "Running $APP_RUN on $PWD"
+        $APP_RUN $* > log.$APP_NAME 2>&1 &
+        pid=$!
+        sleep 10;
+
+        #special run time scenarios
+        case $APP_NAME in
+          md*Foam)
+          DEBUG_MAXRUNTIME=`expr $DEBUG_MAXRUNTIME + 360`
+          ;;
+        esac
+
+        count=0
+        while kill -0 $pid > /dev/null 2>&1; do
+          sleep 1;
+          count=`expr $count + 1`
+          case $APP_NAME in
+            #reconstructPar | decomposePar | blockMesh | snappyHexMesh | mdInitialise | dsmcInitialise | changeDictionary | extrudeMesh | 
+            #autoPatch | createPatch | mapFields | setSet | setsToZones
+            *ToFoam | *tofoam)
+              if [ $count -gt $DEBUG_MAXMAXRUNTIME ]; then
+                break;
+              fi
+            ;;
+            *Foam | *foam)
+              if [ $count -gt $DEBUG_MAXRUNTIME ]; then
+                break;
+              fi
+            ;;
+            *)
+              if [ $count -gt $DEBUG_MAXMAXRUNTIME ]; then
+                break;
+              fi
+            ;;
+          esac
+        done
+        if kill -0 $pid > /dev/null 2>&1; then
+          echo "Runtime: maxmin:$DEBUG_MAXRUNTIME < current:$count < maxmax:$DEBUG_MAXMAXRUNTIME - killing $pid"
+          kill $pid
+        fi
+    fi
+}
+
+runParallel ()
+{
+    APP_RUN=$1; shift
+    APP_NAME=${APP_RUN##*/}
+    mpiopts=""
+
+    if [ -f $log.$APP_RUN ] ; then
+       echo "$APP_RUN already run on $PWD: remove log file to run"
+    else
+       echo "Running $APP_RUN in parallel on $PWD using $1 processes"
+       (
+        mpirun -np $1 $mpiopts $APP_RUN -parallel < /dev/null > log.$APP_RUN 2>&1  &
+        pid=$!
+        sleep 10;
+
+        #special run time scenarios
+        case $APP_NAME in
+          md*Foam)
+          DEBUG_MAXRUNTIME=`expr $DEBUG_MAXRUNTIME + 360`
+          ;;
+        esac
+
+        count=0
+        while kill -0 $pid > /dev/null 2>&1; do
+          sleep 1;
+          count=`expr $count + 1`
+          case $APP_NAME in
+            #snappyHexMesh | mdInitialise | dsmcInitialise | changeDictionary | extrudeMesh | autoPatch | createPatch | mapFields | setSet | setsToZones
+            *ToFoam | *tofoam)
+              if [ $count -gt $DEBUG_MAXMAXRUNTIME ]; then
+                break;
+              fi
+            ;;
+            *Foam | *foam)
+              if [ $count -gt $DEBUG_MAXRUNTIME ]; then
+                break;
+              fi
+            ;;
+            *)
+              if [ $count -gt $DEBUG_MAXMAXRUNTIME ]; then
+                break;
+              fi
+            ;;
+          esac
+        done
+        if kill -0 $pid > /dev/null 2>&1; then
+          echo "Runtime: maxmin:$DEBUG_MAXRUNTIME < current:$count < maxmax:$DEBUG_MAXMAXRUNTIME - killing $pid"
+          kill $pid
+        fi
+       )
+    fi
+}
+
+compileApplication ()
+{
+    echo "Compiling $1 application"
+    wmake $1
+}
+
+cloneCase ()
+{
+    if [ -d $2 ] ; then
+        echo "Case already cloned: remove case directory $2 to clone"
+    else
+        echo "Cloning $2 case from $1"
+        mkdir $2
+        cpfiles="0 system constant"
+        for f in $cpfiles
+        do
+            cp -r $1/$f $2
+        done
+    fi
+}
+
+sedIt()
+{
+  sed -e "$1" $2 > $2.tmp
+  mv $2.tmp $2
+}
+
+#------------------------------------------------------------------------------
diff --git a/bin/tools/RunFunctionsOrig b/bin/tools/RunFunctionsOrig
new file mode 100644
index 0000000..b14c2de
--- /dev/null
+++ b/bin/tools/RunFunctionsOrig
@@ -0,0 +1,88 @@
+#---------------------------------*- sh -*-------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     RunFunctions
+#
+# Description
+#
+#------------------------------------------------------------------------------
+
+getApplication ()
+{
+    grep application system/controlDict | sed "s/application *\([a-zA-Z]*\);/\1/"
+}
+
+runApplication ()
+{
+    APP_RUN=$1; shift
+    APP_NAME=${APP_RUN##*/}
+
+    if [ -f log.$APP_NAME ] ; then
+        echo "$APP_NAME already run on $PWD: remove log file to run"
+    else
+        echo "Running $APP_RUN on $PWD"
+        $APP_RUN $* > log.$APP_NAME 2>&1
+    fi
+}
+
+runParallel ()
+{
+    APP_RUN=$1; shift
+
+    if [ -f $log.$APP_RUN ] ; then
+        echo "$APP_RUN already run on $PWD: remove log file to run"
+    else
+        echo "Running $APP_RUN in parallel on $PWD using $1 processes"
+        ( mpirun -np $1 $APP_RUN -parallel < /dev/null > log.$APP_RUN 2>&1 )
+    fi
+}
+
+compileApplication ()
+{
+    echo "Compiling $1 application"
+    wmake $1
+}
+
+cloneCase ()
+{
+    if [ -d $2 ] ; then
+        echo "Case already cloned: remove case directory $2 to clone"
+    else
+        echo "Cloning $2 case from $1"
+        mkdir $2
+        cpfiles="0 system constant"
+        for f in $cpfiles
+        do
+            cp -r $1/$f $2
+        done
+    fi
+}
+
+sedIt()
+{
+  sed -e "$1" $2 > $2.tmp
+  mv $2.tmp $2
+}
+
+#------------------------------------------------------------------------------
diff --git a/doc/Doxygen/Allwmake b/doc/Doxygen/Allwmake
index dab4457..8e0c5b8 100755
--- a/doc/Doxygen/Allwmake
+++ b/doc/Doxygen/Allwmake
@@ -3,10 +3,15 @@ cd ${0%/*} || exit 1    # run from this directory
 set -x
 
 umask 22
-rm -rf html latex man
+rm -rf html latex man qt_qch
 doxygen
 
 # fix permissions (NB: '+X' and not '+x'!)
 chmod -R a+rX ./
 
+cp openfoam-code.qhcp qt_qch/
+cd qt_qch
+qcollectiongenerator openfoam-code.qhcp -o openfoam-code.qhc
+cd ..
+
 # ----------------------------------------------------------------- end-of-file
diff --git a/doc/Doxygen/Doxyfile b/doc/Doxygen/Doxyfile
index 291a405..25e976a 100644
--- a/doc/Doxygen/Doxyfile
+++ b/doc/Doxygen/Doxyfile
@@ -128,7 +128,7 @@ STRIP_FROM_INC_PATH    =
 # (but less readable) file names. This can be useful is your file systems
 # doesn't support long names like on DOS, Mac, or CD-ROM.
 
-SHORT_NAMES            = NO
+SHORT_NAMES            = YES
 
 # If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen
 # will interpret the first line (until the first dot) of a JavaDoc-style
@@ -689,7 +689,6 @@ HTML_FILE_EXTENSION    = .php
 # each generated HTML page. If it is left blank doxygen will generate a
 # standard header.
 
-
 HTML_HEADER            = FoamHeader.html
 
 # The HTML_FOOTER tag can be used to specify a personal HTML footer for
@@ -698,7 +697,6 @@ HTML_HEADER            = FoamHeader.html
 
 HTML_FOOTER            = FoamFooter.html
 
-
 # The HTML_STYLESHEET tag can be used to specify a user-defined cascading
 # style sheet that is used by each HTML page. It can be used to
 # fine-tune the look of the HTML output. If the tag is left blank doxygen
@@ -712,14 +710,14 @@ HTML_STYLESHEET        =
 # files or namespaces will be aligned in HTML using tables. If set to
 # NO a bullet list will be used.
 
-HTML_ALIGN_MEMBERS     = NO
+HTML_ALIGN_MEMBERS     = YES
 
 # If the GENERATE_HTMLHELP tag is set to YES, additional index files
 # will be generated that can be used as input for tools like the
 # Microsoft HTML help workshop to generate a compressed HTML help file (.chm)
 # of the generated HTML documentation.
 
-GENERATE_HTMLHELP      = NO
+GENERATE_HTMLHELP      = YES
 
 # If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML
 # documentation will contain sections that can be hidden and shown after the
@@ -1295,6 +1293,17 @@ GENERATE_LEGEND        = YES
 
 DOT_CLEANUP            = YES
 
+#Build Qt's qch
+GENERATE_QHP           = YES
+QCH_FILE               = "../qt_qch/openfoam-code.qch"
+QHP_NAMESPACE          = "org.openfoam"
+QHP_VIRTUAL_FOLDER     = "openfoam-code"
+QHP_CUST_FILTER_NAME   =
+QHP_CUST_FILTER_ATTRS  =
+QHP_SECT_FILTER_ATTRS  =
+QHG_LOCATION           = "qhelpgenerator"
+
+
 #---------------------------------------------------------------------------
 # Configuration::additions related to the search engine
 #---------------------------------------------------------------------------
diff --git a/etc/bashrc b/etc/bashrc
index e0d9b73..f2b39c6 100644
--- a/etc/bashrc
+++ b/etc/bashrc
@@ -32,7 +32,7 @@
 #------------------------------------------------------------------------------
 
 export WM_PROJECT=OpenFOAM
-export WM_PROJECT_VERSION=1.7.x
+export WM_PROJECT_VERSION=1.7.2
 
 ################################################################################
 # USER EDITABLE PART. Note changes made here may be lost with the next upgrade
@@ -131,7 +131,7 @@ unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
 # WM_COMPILE_OPTION = Opt | Debug | Prof
 : ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
 
-# WM_MPLIB = SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | MPI | QSMPI
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI
 : ${WM_MPLIB:=OPENMPI}; export WM_MPLIB
 
 
@@ -233,6 +233,21 @@ USAGE
 esac
 
 
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
 # Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
diff --git a/etc/bashrc-amd64-mingw32msvc b/etc/bashrc-amd64-mingw32msvc
new file mode 100644
index 0000000..b2c1cdf
--- /dev/null
+++ b/etc/bashrc-amd64-mingw32msvc
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32msvc.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=amd64-mingw32msvc}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=64}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC=$WM_COMPILER'-gcc'
+        export WM_CXX=$WM_COMPILER'-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-i586-mingw32msvc b/etc/bashrc-i586-mingw32msvc
new file mode 100644
index 0000000..0904ee9
--- /dev/null
+++ b/etc/bashrc-i586-mingw32msvc
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32msvc.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=i586-mingw32msvc}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC=$WM_COMPILER'-gcc'
+        export WM_CXX=$WM_COMPILER'-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-i586-mingw32msvcS b/etc/bashrc-i586-mingw32msvcS
new file mode 100644
index 0000000..d5164f4
--- /dev/null
+++ b/etc/bashrc-i586-mingw32msvcS
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32msvc.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=i586-mingw32msvc}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=SP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC=$WM_COMPILER'-gcc'
+        export WM_CXX=$WM_COMPILER'-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-i686-w64-mingw32 b/etc/bashrc-i686-w64-mingw32
new file mode 100644
index 0000000..4a01a98
--- /dev/null
+++ b/etc/bashrc-i686-w64-mingw32
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw-w64.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=i686-w64-mingw32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC=$WM_COMPILER'-gcc'
+        export WM_CXX=$WM_COMPILER'-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-i686-w64-mingw32S b/etc/bashrc-i686-w64-mingw32S
new file mode 100644
index 0000000..eace2cf
--- /dev/null
+++ b/etc/bashrc-i686-w64-mingw32S
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw-w64.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=i686-w64-mingw32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=SP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC=$WM_COMPILER'-gcc'
+        export WM_CXX=$WM_COMPILER'-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-mingw-w32 b/etc/bashrc-mingw-w32
new file mode 100644
index 0000000..00cdc76
--- /dev/null
+++ b/etc/bashrc-mingw-w32
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=mingw-w32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC='i686-pc-mingw32-gcc'
+        export WM_CXX='i686-pc-mingw32-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-mingw-w32-prof b/etc/bashrc-mingw-w32-prof
new file mode 100644
index 0000000..d92ade0
--- /dev/null
+++ b/etc/bashrc-mingw-w32-prof
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - legacy from blueCAPE's patches from OpenFOAM 1.6 - untested in 1.7
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=mingw-w32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Prof}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC='i686-pc-mingw32-gcc'
+        export WM_CXX='i686-pc-mingw32-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-mingw-w32S b/etc/bashrc-mingw-w32S
new file mode 100644
index 0000000..db9bab0
--- /dev/null
+++ b/etc/bashrc-mingw-w32S
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=mingw-w32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=SP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC='i686-pc-mingw32-gcc'
+        export WM_CXX='i686-pc-mingw32-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-mingw-w64 b/etc/bashrc-mingw-w64
new file mode 100644
index 0000000..9c4c856
--- /dev/null
+++ b/etc/bashrc-mingw-w64
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=mingw-w64}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=64}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC='x86_64-w64-mingw32-gcc'
+        export WM_CXX='x86_64-w64-mingw32-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-mingw-w64-prof b/etc/bashrc-mingw-w64-prof
new file mode 100644
index 0000000..c01f426
--- /dev/null
+++ b/etc/bashrc-mingw-w64-prof
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform
+# ~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | ????
+: ${WM_OSTYPE:=POSIX}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - legacy from blueCAPE's patches from OpenFOAM 1.6 - untested in 1.7
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=mingw-w64}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=64}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Prof}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC='x86_64-w64-mingw32-gcc'
+        export WM_CXX='x86_64-w64-mingw32-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-mingw32 b/etc/bashrc-mingw32
new file mode 100644
index 0000000..e984b53
--- /dev/null
+++ b/etc/bashrc-mingw32
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw32.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform
+# ~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=mingw32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=32}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC='i686-pc-mingw32-gcc'
+        export WM_CXX='i686-pc-mingw32-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/bashrc-x86_64-w64-mingw32 b/etc/bashrc-x86_64-w64-mingw32
new file mode 100644
index 0000000..37d3ac6
--- /dev/null
+++ b/etc/bashrc-x86_64-w64-mingw32
@@ -0,0 +1,248 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/bashrc
+#
+# Description
+#     Startup file for OpenFOAM
+#     Sourced from ~/.profile or ~/.bashrc
+#     Should be usable by any POSIX-compliant shell (eg, ksh)
+#
+#------------------------------------------------------------------------------
+
+export WM_PROJECT=OpenFOAM
+export WM_PROJECT_VERSION=1.7.2
+
+################################################################################
+# USER EDITABLE PART. Note changes made here may be lost with the next upgrade
+#
+# either set $FOAM_INST_DIR before sourcing this file or set
+#    $foamInstall below to where OpenFOAM is installed
+#
+# Location of the OpenFOAM installation
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamInstall=$HOME/$WM_PROJECT
+# foamInstall=~$WM_PROJECT
+# foamInstall=/usr/local/$WM_PROJECT
+# foamInstall=/opt/$WM_PROJECT
+#
+# END OF (NORMAL) USER EDITABLE PART
+################################################################################
+
+# note the location for later use (eg, in job scripts)
+: ${FOAM_INST_DIR:=$foamInstall}; export FOAM_INST_DIR
+
+# The old dirs to be cleaned from the various environment variables
+# - remove anything under top-level directory.
+# NB: the WM_PROJECT_INST_DIR might not be identical between versions
+foamOldDirs="$FOAM_INST_DIR $HOME/$WM_PROJECT/$USER"
+if [ "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR" ]
+then
+    foamOldDirs="$WM_PROJECT_INST_DIR $foamOldDirs"
+fi
+
+
+# Location of site/user files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_PROJECT_INST_DIR=$FOAM_INST_DIR
+export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION
+export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
+
+# Location of third-party software
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION
+
+
+# Source files, possibly with some verbosity
+_foamSource()
+{
+   while [ $# -ge 1 ]
+   do
+      [ "$FOAM_VERBOSE" -a "$PS1" ] && echo "Sourcing: $1"
+      . $1
+      shift
+   done
+}
+
+
+# Add in preset user or site preferences:
+foamPrefs=`$WM_PROJECT_DIR/bin/foamEtcFile prefs-mingw-w64.sh` && _foamSource $foamPrefs
+unset foamPrefs
+
+# Evaluate command-line parameters
+while [ $# -gt 0 ]
+do
+    case "$1" in
+    *=)
+        # name=       -> unset name
+        eval "unset ${1%=}"
+        ;;
+    *=*)
+        # name=value  -> export name=value
+        eval "export $1"
+        ;;
+    esac
+    shift
+done
+
+
+# Operating System/Platform from POSIX or MSwindows
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_OSTYPE = POSIX | MSwindows
+: ${WM_OSTYPE:=MSwindows}; export WM_OSTYPE
+
+
+# Compiler - set to:
+# i686-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# x86_64-w64-mingw32  - using the compiler from mingw-w64 at sourceforge.net
+# mingw32, mingw-w32, mingw-w64  - using the compiled mingw cross-compiler
+# i586-mingw32msvc, amd64-mingw32msvc  - attempt to use Ubuntu's pre-built mingw-w64 binaries, but the 64bit version only worked in Windows XP x64
+# Gcc, Gcc43, Gcc44, or Icc (for Intel's icc)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+: ${WM_COMPILER:=x86_64-w64-mingw32}; export WM_COMPILER
+
+unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
+
+
+# Compilation options (architecture, precision, optimised, debug or profiling)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+# WM_ARCH_OPTION = 32 | 64
+: ${WM_ARCH_OPTION:=64}; export WM_ARCH_OPTION
+
+# WM_PRECISION_OPTION = DP | SP
+: ${WM_PRECISION_OPTION:=DP}; export WM_PRECISION_OPTION
+
+# WM_COMPILE_OPTION = Opt | Debug | Prof
+: ${WM_COMPILE_OPTION:=Opt}; export WM_COMPILE_OPTION
+
+# WM_MPLIB = NONE | SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI | GAMMA | MPI | QSMPI | MSMPI
+: ${WM_MPLIB:=MPICH}; export WM_MPLIB
+
+
+# Run options (floating-point signal handling and memory initialisation)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export FOAM_SIGFPE=
+# export FOAM_SETNAN=
+
+
+# Detect system type and set environment variables appropriately
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+export WM_ARCH=`uname -s`
+
+case $WM_ARCH in
+Linux | CYGWIN* | MINGW*)
+    WM_ARCH=linux
+
+    # compiler specifics
+    processor=`uname -m`
+
+    if [ "i686" = $processor -o "x86_64" = $processor ]; then
+        export WM_CC=$WM_COMPILER'-gcc'
+        export WM_CXX=$WM_COMPILER'-g++'
+    else
+        echo Unknown processor type $processor for MinGW Linux
+    fi
+    ;;
+
+*)    # an unsupported operating system
+    cat <<USAGE
+
+    Your "$WM_ARCH" operating system is not supported by this release
+    of OpenFOAM. For further assistance, please contact www.OpenFOAM.com
+
+USAGE
+    ;;
+esac
+
+
+#
+# Set the number of cores to build on
+#
+WM_NCOMPPROCS=1
+
+if [ -r /proc/cpuinfo ]
+then
+    WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
+    [ $WM_NCOMPPROCS -le 8 ] || WM_NCOMPPROCS=8
+fi
+export WM_NCOMPPROCS
+
+echo "Building on " $WM_NCOMPPROCS " cores"
+
+
+# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
+
+#- Clean PATH
+cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH
+cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+
+# Source project setup files
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/settings.sh
+_foamSource $WM_PROJECT_DIR/etc/aliases.sh
+
+
+# Source user setup files for optional packages
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+_foamSource $WM_PROJECT_DIR/etc/apps/paraview3/bashrc
+_foamSource $WM_PROJECT_DIR/etc/apps/ensight/bashrc
+
+
+# Clean environment paths again. Only remove duplicates
+# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+#- Clean PATH
+cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
+
+#- Clean LD_LIBRARY_PATH
+cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+
+#- Clean MANPATH (trailing ':' to find system pages)
+cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
+
+export PATH LD_LIBRARY_PATH MANPATH
+
+#- Clean LD_PRELOAD
+if [ -n "$LD_PRELOAD" ]
+then
+    cleaned=`$foamClean "$LD_PRELOAD"` && LD_PRELOAD="$cleaned"
+    export LD_PRELOAD
+fi
+
+
+# cleanup environment:
+# ~~~~~~~~~~~~~~~~~~~~
+unset cleaned foamClean foamInstall foamOldDirs
+unset _foamSource
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/prefs-mingw-w64.sh b/etc/prefs-mingw-w64.sh
new file mode 100644
index 0000000..21f0097
--- /dev/null
+++ b/etc/prefs-mingw-w64.sh
@@ -0,0 +1,52 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 2010-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/prefs.sh
+#
+# Description
+#     Preset variables for the OpenFOAM configuration - POSIX shell syntax.
+#
+#     The prefs.sh file will be sourced by the OpenFOAM etc/bashrc when it is
+#     found by foamEtcFile.
+#
+# See Also
+#     'foamEtcFile -help' or 'foamEtcFile -list' for information about the
+#     paths searched
+#
+#------------------------------------------------------------------------------
+
+# Specify system compiler
+# ~~~~~~~~~~~~~~~~~~~~~~~
+compilerInstall=OpenFOAM
+
+# Specify system openmpi
+# ~~~~~~~~~~~~~~~~~~~~~~
+#export WM_MPLIB=SYSTEMOPENMPI
+
+# Specify ParaView version
+# ~~~~~~~~~~~~~~~~~~~~~~~~
+#export ParaView_VERSION=git        # eg, cvs/git version
+#export ParaView_MAJOR=3.8.0
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/prefs-mingw32.sh b/etc/prefs-mingw32.sh
new file mode 100644
index 0000000..8214b08
--- /dev/null
+++ b/etc/prefs-mingw32.sh
@@ -0,0 +1,52 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 2010-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/prefs.sh
+#
+# Description
+#     Preset variables for the OpenFOAM configuration - POSIX shell syntax.
+#
+#     The prefs.sh file will be sourced by the OpenFOAM etc/bashrc when it is
+#     found by foamEtcFile.
+#
+# See Also
+#     'foamEtcFile -help' or 'foamEtcFile -list' for information about the
+#     paths searched
+#
+#------------------------------------------------------------------------------
+
+# Specify system | OpenFOAM compiler
+# ~~~~~~~~~~~~~~~~~~~~~~~
+compilerInstall=OpenFOAM
+
+# Specify system openmpi
+# ~~~~~~~~~~~~~~~~~~~~~~
+#export WM_MPLIB=SYSTEMOPENMPI
+
+# Specify ParaView version
+# ~~~~~~~~~~~~~~~~~~~~~~~~
+#export ParaView_VERSION=git        # eg, cvs/git version
+#export ParaView_MAJOR=3.8.0
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/prefs-mingw32msvc.sh b/etc/prefs-mingw32msvc.sh
new file mode 100644
index 0000000..7633359
--- /dev/null
+++ b/etc/prefs-mingw32msvc.sh
@@ -0,0 +1,52 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 2010-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/prefs.sh
+#
+# Description
+#     Preset variables for the OpenFOAM configuration - POSIX shell syntax.
+#
+#     The prefs.sh file will be sourced by the OpenFOAM etc/bashrc when it is
+#     found by foamEtcFile.
+#
+# See Also
+#     'foamEtcFile -help' or 'foamEtcFile -list' for information about the
+#     paths searched
+#
+#------------------------------------------------------------------------------
+
+# Specify system compiler
+# ~~~~~~~~~~~~~~~~~~~~~~~
+compilerInstall=system
+
+# Specify system openmpi
+# ~~~~~~~~~~~~~~~~~~~~~~
+#export WM_MPLIB=SYSTEMOPENMPI
+
+# Specify ParaView version
+# ~~~~~~~~~~~~~~~~~~~~~~~~
+#export ParaView_VERSION=git        # eg, cvs/git version
+#export ParaView_MAJOR=3.8.0
+
+# ----------------------------------------------------------------- end-of-file
diff --git a/etc/settings.sh b/etc/settings.sh
index 52b3044..1bcd11f 100644
--- a/etc/settings.sh
+++ b/etc/settings.sh
@@ -116,10 +116,10 @@ OpenFOAM)
         mpfr_version=mpfr-2.4.2
         ;;
     Gcc45)
-        gcc_version=gcc-4.5.0
+        gcc_version=gcc-4.5.3
         gmp_version=gmp-5.0.1
-        mpfr_version=mpfr-2.4.2
-        mpc_version=mpc-0.8.1
+        mpfr_version=mpfr-2.4.2
+        mpc_version=mpc-0.8.2
         ;;
     Gcc44)
         gcc_version=gcc-4.4.3
@@ -131,6 +131,14 @@ OpenFOAM)
         gmp_version=gmp-4.2.4
         mpfr_version=mpfr-2.4.1
         ;;
+    mingw32 | mingw-w32 | mingw-w64 | i686-w64-mingw32 | x86_64-w64-mingw32)
+        export WM_COMPILER_DIR=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER$WM_COMPILER_ARCH/mingw
+        _foamAddPath $WM_COMPILER_DIR/bin
+        _foamAddLib $WM_COMPILER_DIR/mingw/lib
+        if [ -d $WM_COMPILER_DIR/mingw/lib64 ]; then
+          _foamAddLib $WM_COMPILER_DIR/mingw/lib64
+        fi
+        ;;
     *)
         echo
         echo "Warning in $WM_PROJECT_DIR/etc/settings.sh:"
@@ -142,10 +150,10 @@ OpenFOAM)
 
     if [ -n "$gcc_version" ]
     then
-        gccDir=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$gcc_version
-        gmpDir=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$gmp_version
-        mpfrDir=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$mpfr_version
-        mpcDir=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$mpc_version
+        : ${gccDir:=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$gcc_version}
+        : ${gmpDir:=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$gmp_version}
+        : ${mpfrDir:=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$mpfr_version}
+        : ${mpcDir:=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER_ARCH/$mpc_version}
 
         # Check that the compiler directory can be found
         [ -d "$gccDir" ] || {
@@ -219,6 +227,11 @@ unset boost_version cgal_version
 unset MPI_ARCH_PATH MPI_HOME
 
 case "$WM_MPLIB" in
+NONE)
+    export MPI_HOME=$FOAM_SRC/Pstream/dummy
+    export FOAM_MPI_LIBBIN=$FOAM_LIBBIN/dummy
+    ;;
+
 OPENMPI)
     mpi_version=openmpi-1.4.1
     export MPI_ARCH_PATH=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER/$mpi_version
@@ -258,7 +271,7 @@ SYSTEMOPENMPI)
     ;;
 
 MPICH)
-    mpi_version=mpich2-1.1.1p1
+    mpi_version=mpich2-1.2.1p1
     export MPI_HOME=$WM_THIRD_PARTY_DIR/$mpi_version
     export MPI_ARCH_PATH=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER/$mpi_version
 
@@ -331,6 +344,15 @@ QSMPI)
 
     ;;
 
+MSMPI)
+    mpi_version=msmpi-2008R2
+    export MPI_HOME=$WM_THIRD_PARTY_DIR/$mpi_version
+    export MPI_ARCH_PATH=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER/$mpi_version
+
+    export FOAM_MPI_LIBBIN=$FOAM_LIBBIN/$mpi_version
+    unset mpi_version
+    ;;
+
 *)
     export FOAM_MPI_LIBBIN=$FOAM_LIBBIN/dummy
     ;;
@@ -350,6 +372,11 @@ fi
 export MPI_BUFFER_SIZE
 
 
+# Set Scotch target install folder
+: ${WM_SCOTCH_PLATFORMS_DIR:=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER/scotch_5.1/$WM_MPLIB}
+export WM_SCOTCH_PLATFORMS_DIR
+
+
 # Enable the hoard memory allocator if available
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 #if [ -f $FOAM_LIBBIN/libhoard.so ]
diff --git a/src/Allwmake b/src/Allwmake
index a0c5cbf..7b22656 100755
--- a/src/Allwmake
+++ b/src/Allwmake
@@ -21,6 +21,29 @@ Pstream/Allwmake
 wmake libo  OSspecific/$WM_OSTYPE
 wmake libso OpenFOAM
 
+#in case direct linking isn't to be used, then setup settings for using Pstream library
+if isMinGW; then
+  export WM_PSTREAMLINK="LINKTOPSTREAM"
+
+  #build all Pstream libraries
+  (cd Pstream && ./Allwmake)
+
+  rm -f $FOAM_LIBBIN/libOpenFOAM.*
+
+  wmake libso OpenFOAM
+
+  unset WM_PSTREAMLINK
+
+  #copy the mpi libraries, if any are available
+  if [ "NONE" != "$WM_MPLIB" ]; then
+    cp $MPI_ARCH_PATH/lib/* $FOAM_MPI_LIBBIN/
+  fi
+
+  # mingw32 excludes default compiler path so 
+  # missing /usr/include/FlexLexer.h for flex
+  cp /usr/include/FlexLexer.h "$FOAM_SRC/OpenFOAM/lnInclude/"
+fi
+
 wmake libso lagrangian/basic
 
 wmake libso triSurface
@@ -29,6 +52,9 @@ wmake libso surfMesh
 
 # Decomposition methods needed by meshTools
 decompositionMethods/AllwmakeLnInclude
+if isMinGW; then
+wmake libso decompositionMethods/decompositionMethods
+fi
 dummyThirdParty/Allwmake
 decompositionMethods/Allwmake
 
@@ -52,6 +78,10 @@ lagrangian/Allwmake
 postProcessing/Allwmake
 conversion/Allwmake
 
+# Depends on turbulenceModels/RAS/compressible
+# hence not in thermophysicalModels
+wmake libso thermophysicalModels/chemistryModel
+
 wmake libso autoMesh
 wmake libso errorEstimation
 
diff --git a/src/OpenFOAM/db/dictionary/functionEntries/includeEntry/includeEntry.C b/src/OpenFOAM/db/dictionary/functionEntries/includeEntry/includeEntry.C
index d7eaffa..9df7710 100644
--- a/src/OpenFOAM/db/dictionary/functionEntries/includeEntry/includeEntry.C
+++ b/src/OpenFOAM/db/dictionary/functionEntries/includeEntry/includeEntry.C
@@ -72,7 +72,11 @@ Foam::fileName Foam::functionEntries::includeEntry::includeFileName
     fName.expand();
 
     // relative name
+#if defined(WIN32) || defined(WIN64)
+    if ((fName.size()>1 && fName[1] != ':') && (fName.size() && fName[0] != '/'))
+#else
     if (fName.size() && fName[0] != '/')
+#endif
     {
         fName = fileName(is.name()).path()/fName;
     }
diff --git a/src/OpenFOAM/global/argList/argList.C b/src/OpenFOAM/global/argList/argList.C
index bb88cb2..466830f 100644
--- a/src/OpenFOAM/global/argList/argList.C
+++ b/src/OpenFOAM/global/argList/argList.C
@@ -129,7 +129,7 @@ void Foam::argList::getRootCase()
 
     if (iter != options_.end())
     {
-        casePath = iter();
+        casePath = toUnixPath(iter());
         casePath.clean();
 
         if (casePath.empty() || casePath == ".")
@@ -157,7 +157,11 @@ void Foam::argList::getRootCase()
 
 
     // Set the case and case-name as an environment variable
+#if defined(WIN32) || defined(WIN64)
+    if ((rootPath_.size()>1 && rootPath_[1] == ':') || (rootPath_.size() && rootPath_[0] == '/'))
+#else
     if (rootPath_[0] == '/')
+#endif
     {
         // absolute path - use as-is
         setEnv("FOAM_CASE", rootPath_/globalCase_, true);
diff --git a/src/OpenFOAM/primitives/random/Random.C b/src/OpenFOAM/primitives/random/Random.C
index e974f5c..5c595eb 100644
--- a/src/OpenFOAM/primitives/random/Random.C
+++ b/src/OpenFOAM/primitives/random/Random.C
@@ -27,6 +27,10 @@ License
 
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
+#if defined( WIN32 ) || defined( WIN64 )
+#include "random.c"
+#endif
+
 namespace Foam
 {
 
@@ -37,6 +41,16 @@ namespace Foam
 #    error "The random number generator may not work!"
 #endif
 
+#if defined( WIN32 ) || defined( WIN64 )
+#    define USE_RANDOM 1
+//#    define srandom srand
+//#    define random rand
+//#ifdef INT_MAX
+//#undef INT_MAX
+//#endif
+//#    define INT_MAX RAND_MAX
+#endif
+
 #ifdef USE_RANDOM
 #   include <climits>
 #else
diff --git a/src/OpenFOAM/primitives/random/random.c b/src/OpenFOAM/primitives/random/random.c
index 5421390..8771886 100644
--- a/src/OpenFOAM/primitives/random/random.c
+++ b/src/OpenFOAM/primitives/random/random.c
@@ -43,6 +43,7 @@ static char *rcsid = "$NetBSD: random.c,v 1.4 1995/12/28 08:52:43 thorpej Exp $"
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <stdint.h>
 
 /*
  * random.c:
@@ -67,7 +68,7 @@ static char *rcsid = "$NetBSD: random.c,v 1.4 1995/12/28 08:52:43 thorpej Exp $"
  * state information, which will allow a degree seven polynomial.  (Note:
  * the zeroeth word of state information also has some other information
  * stored in it -- see setstate() for details).
- * 
+ *
  * The random number generation technique is a linear feedback shift register
  * approach, employing trinomials (since there are fewer terms to sum up that
  * way).  In this approach, the least significant bit of all the numbers in
@@ -125,6 +126,8 @@ static char *rcsid = "$NetBSD: random.c,v 1.4 1995/12/28 08:52:43 thorpej Exp $"
 static int degrees[MAX_TYPES] =  { DEG_0, DEG_1, DEG_2, DEG_3, DEG_4 };
 static int seps [MAX_TYPES] =  { SEP_0, SEP_1, SEP_2, SEP_3, SEP_4 };
 
+long random();
+
 /*
  * Initially, everything is set up as if from:
  *
@@ -194,9 +197,7 @@ static long *end_ptr = &randtbl[DEG_3 + 1];
  * introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]
  * for default usage relies on values produced by this routine.
  */
-void
-srandom(x)
- u_int x;
+void srandom(long x)
 {
  register int i, j;
 
@@ -222,22 +223,23 @@ srandom(x)
  * the break values for the different R.N.G.'s, we choose the best (largest)
  * one we can and set things up for it.  srandom() is then called to
  * initialize the state information.
- * 
+ *
  * Note that on return from srandom(), we set state[-1] to be the type
  * multiplexed with the current value of the rear pointer; this is so
  * successive calls to initstate() won't lose this information and will be
  * able to restart with setstate().
- * 
+ *
  * Note: the first thing we do is save the current state, if any, just like
  * setstate() so that it doesn't matter when initstate is called.
  *
  * Returns a pointer to the old state.
  */
 char *
-initstate(seed, arg_state, n)
- u_int seed;     /* seed for R.N.G. */
- char *arg_state;    /* pointer to state array */
- int n;        /* # bytes of state info */
+initstate(
+ long seed,      /* seed for R.N.G. */
+ char *arg_state,    /* pointer to state array */
+ int n       /* # bytes of state info */
+ )
 {
  register char *ostate = (char *)(&state[-1]);
 
@@ -296,9 +298,7 @@ initstate(seed, arg_state, n)
  *
  * Returns a pointer to the old state information.
  */
-char *
-setstate(arg_state)
- char *arg_state;
+char *setstate(char *arg_state)
 {
  register long *new_state = (long *)arg_state;
  register int type = new_state[0] % MAX_TYPES;
diff --git a/src/Pstream/Allwmake b/src/Pstream/Allwmake
index a01538c..6db87d8 100755
--- a/src/Pstream/Allwmake
+++ b/src/Pstream/Allwmake
@@ -2,15 +2,31 @@
 cd ${0%/*} || exit 1    # run from this directory
 set -x
 
-wmake libso dummy
+buildMode="libso"
+
+if isMinGW; then
+  if [ "$WM_PSTREAMLINK" = "LINKTOPSTREAM" ]; then
+    buildMode="libso"
+  else
+    buildMode="libo"
+  fi
+fi
+
+wmake $buildMode dummy
 
 case "$WM_MPLIB" in
 *MPI*)
     set +x
     echo
     echo "Note: ignore spurious warnings about missing mpicxx.h headers"
-    set -x
-    (WM_OPTIONS=${WM_OPTIONS}$WM_MPLIB; wmake libso mpi)
+
+    if isMinGW; then
+      set -x
+      wmake $buildMode mpi
+    else
+      set -x
+      (WM_OPTIONS_LOCAL=${WM_OPTIONS}$WM_MPLIB; wmake $buildMode mpi)
+    fi
     ;;
 
 #GAMMA)
@@ -18,5 +34,6 @@ case "$WM_MPLIB" in
 #    ;;
 esac
 
+unset buildMode
 
 # ----------------------------------------------------------------- end-of-file
diff --git a/src/Pstream/dummy/Make/options b/src/Pstream/dummy/Make/options
index e69de29..4261914 100644
--- a/src/Pstream/dummy/Make/options
+++ b/src/Pstream/dummy/Make/options
@@ -0,0 +1,5 @@
+#if defined( WIN32 ) || defined( WIN64 )
+PROJECT_LIBS = -l$(WM_PROJECT)
+#else
+PROJECT_LIBS = 
+#endif
diff --git a/src/Pstream/mpi/Make/options b/src/Pstream/mpi/Make/options
index 90632e8..38d718b 100644
--- a/src/Pstream/mpi/Make/options
+++ b/src/Pstream/mpi/Make/options
@@ -2,3 +2,9 @@ include $(RULES)/mplib$(WM_MPLIB)
 
 EXE_INC = $(PFLAGS) $(PINC)
 LIB_LIBS = $(PLIBS)
+
+#if defined( WIN32 ) || defined( WIN64 )
+  PROJECT_LIBS = -l$(WM_PROJECT)
+#else
+  PROJECT_LIBS = 
+#endif
diff --git a/src/decompositionMethods/Allwmake b/src/decompositionMethods/Allwmake
index e2612ef..69e7df3 100755
--- a/src/decompositionMethods/Allwmake
+++ b/src/decompositionMethods/Allwmake
@@ -4,13 +4,23 @@ set -x
 
 wmakeLnInclude decompositionMethods
 
+if [ "NONE" != "$WM_MPLIB" ]; then
+
+#this is to guarantee that scotchDecomp is built with the correct headers
+if [ -e "scotchDecomp/scotchDecomp.dep" ]; then
+  rm scotchDecomp/scotchDecomp.dep
+fi
+
 wmake libso scotchDecomp
 wmake libso metisDecomp
 
 if [ -d "$FOAM_MPI_LIBBIN" ]
 then
-    WM_OPTIONS=${WM_OPTIONS}$WM_MPLIB
+    WM_OPTIONS_LOCAL=${WM_OPTIONS}$WM_MPLIB
     wmake libso parMetisDecomp
+    unset WM_OPTIONS_LOCAL
+fi
+
 fi
 
 wmake libso decompositionMethods
diff --git a/src/decompositionMethods/decompositionMethods/Make/options b/src/decompositionMethods/decompositionMethods/Make/options
index 6dcbd79..a4381b1 100644
--- a/src/decompositionMethods/decompositionMethods/Make/options
+++ b/src/decompositionMethods/decompositionMethods/Make/options
@@ -1,8 +1,14 @@
 EXE_INC =
 
+#if !(defined( WIN32 ) || defined( WIN64 ))
+
 LIB_LIBS = \
     -L$(FOAM_LIBBIN)/dummy \
     -L$(FOAM_MPI_LIBBIN) \
     -lscotchDecomp \
     -lmetisDecomp \
     -lparMetisDecomp
+
+/* for MinGW/Windows, nothing needs to be done! */
+#endif
+
diff --git a/src/decompositionMethods/metisDecomp/Make/options b/src/decompositionMethods/metisDecomp/Make/options
index d7ad5e1..d2d07f2 100644
--- a/src/decompositionMethods/metisDecomp/Make/options
+++ b/src/decompositionMethods/metisDecomp/Make/options
@@ -8,4 +8,9 @@ LIB_LIBS = \
     -L$(FOAM_LIBBIN)/dummy \
     -lmetis \
     -lGKlib
+    
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS += -ldecompositionMethods \
+    -lscotchDecomp
+#endif
 
diff --git a/src/decompositionMethods/parMetisDecomp/Make/options b/src/decompositionMethods/parMetisDecomp/Make/options
index 76a64be..3e0891b 100644
--- a/src/decompositionMethods/parMetisDecomp/Make/options
+++ b/src/decompositionMethods/parMetisDecomp/Make/options
@@ -8,7 +8,16 @@ EXE_INC = \
     -I../metisDecomp/lnInclude \
     -I../scotchDecomp/lnInclude
 
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS = \
+    -ldecompositionMethods \
+    -lmetis-parmetis \
+    -lparmetis \
+    -lscotchDecomp \
+    -lmetisDecomp
+#else
 LIB_LIBS = \
     -L$(FOAM_MPI_LIBBIN) \
     -lmetis-parmetis \
     -lparmetis
+#endif
diff --git a/src/decompositionMethods/scotchDecomp/Make/options b/src/decompositionMethods/scotchDecomp/Make/options
index e889f9e..286a3ba 100644
--- a/src/decompositionMethods/scotchDecomp/Make/options
+++ b/src/decompositionMethods/scotchDecomp/Make/options
@@ -2,9 +2,13 @@ include $(RULES)/mplib$(WM_MPLIB)
 
 EXE_INC = \
     $(PFLAGS) $(PINC) \
-    -I$(WM_THIRD_PARTY_DIR)/scotch_5.1/include \
-    -I/usr/include/scotch \
+    -I$(WM_SCOTCH_PLATFORMS_DIR)/include \
     -I../decompositionMethods/lnInclude
 
 LIB_LIBS = \
+    -L$(FOAM_MPI_LIBBIN) \
     -lscotch -lscotcherrexit
+
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS += -ldecompositionMethods
+#endif
diff --git a/src/decompositionMethods/scotchDecomp/scotchDecomp.C b/src/decompositionMethods/scotchDecomp/scotchDecomp.C
index 9a697ef..652efd3 100644
--- a/src/decompositionMethods/scotchDecomp/scotchDecomp.C
+++ b/src/decompositionMethods/scotchDecomp/scotchDecomp.C
@@ -111,6 +111,7 @@ License
 #include "cyclicPolyPatch.H"
 #include "OFstream.H"
 
+#include "mpi.h"
 extern "C"
 {
 #include "scotch.h"
@@ -123,7 +124,7 @@ extern "C"
 #    define LINUX
 #endif
 
-#if defined(LINUX) && defined(__GNUC__)
+#if defined(LINUX) && defined(__GNUC__) && (!defined(WIN32) && !defined(WIN64))
 #    define LINUX_GNUC
 #endif
 
diff --git a/src/dummyThirdParty/MGridGen/MGridGen/Make/options b/src/dummyThirdParty/MGridGen/MGridGen/Make/options
index 4c3dd78..de4bd05 100644
--- a/src/dummyThirdParty/MGridGen/MGridGen/Make/options
+++ b/src/dummyThirdParty/MGridGen/MGridGen/Make/options
@@ -1,3 +1,7 @@
 EXE_INC =
 
-EXE_LIBS =
+LIB_LIBS = 
+
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS += -ldecompositionMethods
+#endif
diff --git a/src/dummyThirdParty/metisDecomp/Make/options b/src/dummyThirdParty/metisDecomp/Make/options
index c61e828..41eab9e 100644
--- a/src/dummyThirdParty/metisDecomp/Make/options
+++ b/src/dummyThirdParty/metisDecomp/Make/options
@@ -2,4 +2,8 @@ EXE_INC = \
     -I$(FOAM_SRC)/decompositionMethods/decompositionMethods/lnInclude \
     -I$(FOAM_SRC)/decompositionMethods/metisDecomp/lnInclude
 
-LIB_LIBS =
+LIB_LIBS = 
+
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS += -ldecompositionMethods
+#endif
diff --git a/src/dummyThirdParty/parMetisDecomp/Make/options b/src/dummyThirdParty/parMetisDecomp/Make/options
index 3500e6b..2334474 100644
--- a/src/dummyThirdParty/parMetisDecomp/Make/options
+++ b/src/dummyThirdParty/parMetisDecomp/Make/options
@@ -2,4 +2,8 @@ EXE_INC = \
     -I$(FOAM_SRC)/decompositionMethods/decompositionMethods/lnInclude \
     -I$(FOAM_SRC)/decompositionMethods/parMetisDecomp/lnInclude
 
-LIB_LIBS =
+LIB_LIBS = 
+
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS += -ldecompositionMethods
+#endif
diff --git a/src/dummyThirdParty/scotchDecomp/Make/options b/src/dummyThirdParty/scotchDecomp/Make/options
index a9952cf..96cc000 100644
--- a/src/dummyThirdParty/scotchDecomp/Make/options
+++ b/src/dummyThirdParty/scotchDecomp/Make/options
@@ -3,3 +3,7 @@ EXE_INC = \
     -I$(FOAM_SRC)/decompositionMethods/scotchDecomp/lnInclude
 
 LIB_LIBS = 
+
+#if defined( WIN32 ) || defined( WIN64 )
+LIB_LIBS += -ldecompositionMethods
+#endif
diff --git a/src/thermophysicalModels/Allwmake b/src/thermophysicalModels/Allwmake
index 7fbee69..bfca538 100755
--- a/src/thermophysicalModels/Allwmake
+++ b/src/thermophysicalModels/Allwmake
@@ -5,14 +5,16 @@ set -x
 wmake libso specie
 wmake libso thermophysicalFunctions
 wmake libso liquids
-wmake libso liquidMixture
 wmake libso solids
 wmake libso solidMixture
 
 wmake libso basic
 wmake libso reactionThermo
 wmake libso laminarFlameSpeed
-wmake libso chemistryModel
+
+wmake libso liquidMixture #depends on basic and reactionThermo
+#wmake libso chemistryModel #depends on basic and reactionThermo and ../turbulenceModels/RAS/compressible
+
 wmake libso pdfs
 wmake libso radiation
 wmake libso barotropicCompressibilityModel
diff --git a/src/thermophysicalModels/reactionThermo/chemistryReaders/chemkinReader/chemkinReader.C b/src/thermophysicalModels/reactionThermo/chemistryReaders/chemkinReader/chemkinReader.C
index 8d2467c..8b14196 100644
--- a/src/thermophysicalModels/reactionThermo/chemistryReaders/chemkinReader/chemkinReader.C
+++ b/src/thermophysicalModels/reactionThermo/chemistryReaders/chemkinReader/chemkinReader.C
@@ -884,12 +884,20 @@ Foam::chemkinReader::chemkinReader(const dictionary& thermoDict)
     fileName relPath = thermoDict.name().path();
     if (relPath.size())
     {
+#if defined(WIN32) || defined(WIN64)
+        if ((chemkinFile.size()>1 && chemkinFile[1] != ':') && (chemkinFile.size() && chemkinFile[0] != '/'))
+#else
         if (chemkinFile.size() && chemkinFile[0] != '/')
+#endif
         {
             chemkinFile = relPath/chemkinFile;
         }
 
+#if defined(WIN32) || defined(WIN64)
+        if ((thermoFile.size()>1 && thermoFile[1] != ':') && (thermoFile.size() && thermoFile[0] != '/'))
+#else
         if (thermoFile.size() && thermoFile[0] != '/')
+#endif
         {
             thermoFile = relPath/thermoFile;
         }
diff --git a/wmake/Makefile b/wmake/Makefile
index 2f2be98..af08266 100644
--- a/wmake/Makefile
+++ b/wmake/Makefile
@@ -58,7 +58,8 @@ WM_SCRIPTS   = $(WM_DIR)/scripts
 LIB_SRC            = $(WM_PROJECT_DIR)/src
 LIB_DIR            = $(WM_PROJECT_DIR)/lib
 LIB_WM_OPTIONS_DIR = $(LIB_DIR)/$(WM_OPTIONS)
-OBJECTS_DIR        = $(MAKE_DIR)/$(WM_OPTIONS)
+WM_OPTIONS_LOCAL  ?= $(WM_OPTIONS)
+OBJECTS_DIR        = $(MAKE_DIR)/$(WM_OPTIONS_LOCAL)
 CLASSES_DIR        = $(MAKE_DIR)/classes
 
 SYS_INC            =
@@ -94,6 +95,9 @@ LIB             = libNULL
 # Shared library extension
 SO              = so
 
+# Executable extension
+EXE_EXT         =
+
 # Project executable
 EXE             = $(WM_PROJECT).out
 
@@ -146,18 +150,21 @@ LIB_HEADER_DIRS = \
 # define link statements for executables
 #------------------------------------------------------------------------------
 
-$(EXE):  $(OBJECTS)
-      @$(WM_SCRIPTS)/mkObjectDir $(EXE)
+EXECUTABLE  = $(EXE)$(EXE_EXT)
+SEXECUTABLE = $(SEXE)$(EXE_EXT)
+
+$(EXECUTABLE):  $(OBJECTS)
+      @$(WM_SCRIPTS)/mkObjectDir $(EXECUTABLE)
       $(LINKEXE) $(OBJECTS) -L$(LIB_WM_OPTIONS_DIR) \
-      $(EXE_LIBS) $(PROJECT_LIBS) $(SYS_LIBS) $(LINK_LIBS) $(GLIBS) -o $(EXE)
+      $(EXE_LIBS) $(PROJECT_LIBS) $(SYS_LIBS) $(LINK_LIBS) $(GLIBS) -o $(EXECUTABLE)
 
-exe:     $(SEXE)
-      @echo \'$(SEXE)\' is up to date.
+exe:     $(SEXECUTABLE)
+      @echo \`$(SEXECUTABLE)\' is up to date.
 
-$(SEXE): $(OBJECTS)
-      @$(WM_SCRIPTS)/mkObjectDir $(SEXE)
+$(SEXECUTABLE): $(OBJECTS)
+      @$(WM_SCRIPTS)/mkObjectDir $(SEXECUTABLE)
       $(LINKEXE) $(OBJECTS) $(EXE_LIBS) \
-         $(SYS_LIBS) $(LINK_LIBS) $(GLIBS) -o $(SEXE)
+         $(SYS_LIBS) $(LINK_LIBS) $(GLIBS) -o $(SEXECUTABLE)
 
 
 #------------------------------------------------------------------------------
@@ -170,8 +177,9 @@ libso:   $(LIB).$(SO)
 $(LIB).$(SO): $(OBJECTS)
       @$(WM_SCRIPTS)/mkObjectDir $(LIB)
       @rm -f so_locations
+      @echo $(LINKLIBSO) $(LOCAL_OBJECTS) -L$(LIB_WM_OPTIONS_DIR) $(PROJECT_LIBS) $(LIB_LIBS) $(GLIB_LIBS) -o $(LIB).$(SO)
       @cd $(OBJECTS_DIR) ; \
-      $(LINKLIBSO) $(LOCAL_OBJECTS) -L$(LIB_WM_OPTIONS_DIR) $(LIB_LIBS) $(GLIB_LIBS) -o $(LIB).$(SO)
+      $(LINKLIBSO) $(LOCAL_OBJECTS) -L$(LIB_WM_OPTIONS_DIR) $(PROJECT_LIBS) $(LIB_LIBS) $(GLIB_LIBS) -o $(LIB).$(SO)
 
 lib:     $(LIB).a
       @echo \'$(LIB).a\' is up to date.

diff --git a/applications/solvers/basic/laplacianFoam/Make/options b/applications/solvers/basic/laplacianFoam/Make/options
index d9745f6..ba520d4 100644
--- a/applications/solvers/basic/laplacianFoam/Make/options
+++ b/applications/solvers/basic/laplacianFoam/Make/options
@@ -1,3 +1,9 @@
 EXE_INC = -I$(LIB_SRC)/finiteVolume/lnInclude
 
 EXE_LIBS = -lfiniteVolume
+
+#if defined( WIN32 ) || defined( WIN64 )
+  ifeq ("$(WM_COMPILE_OPTION)","Prof")
+    include $(PWD)/Make/optionsStatic
+  endif
+#endif
diff --git a/applications/solvers/basic/laplacianFoam/Make/optionsStatic b/applications/solvers/basic/laplacianFoam/Make/optionsStatic
new file mode 100644
index 0000000..c1ee408
--- /dev/null
+++ b/applications/solvers/basic/laplacianFoam/Make/optionsStatic
@@ -0,0 +1,15 @@
+    include $(RULES)/mplib$(WM_MPLIB)
+    PROJECT_LIBS = $(FOAM_LIBBIN)/lib$(WM_PROJECT).o
+    EXE_LIBS = $(FOAM_LIBBIN)/libfiniteVolume.o \
+              $(FOAM_LIBBIN)/libOSspecific.o \
+              $(FOAM_LIBBIN)/libz.o \
+              $(FOAM_LIBBIN)/libtriSurface.o \
+              $(FOAM_LIBBIN)/liblagrangian.o \
+              $(FOAM_LIBBIN)/libmeshTools.o \
+              $(FOAM_LIBBIN)/libdecompositionMethods.o \
+              $(FOAM_LIBBIN)/libscotch.o \
+              $(FOAM_LIBBIN)/libmetis.o \
+              $(FOAM_LIBBIN)/libGKlib.o \
+              -lregex \
+              $(PLIBS) \
+              $(FOAM_MPI_LIBBIN)/libPstream.o
diff --git a/applications/solvers/combustion/XiFoam/XiFoam.C b/applications/solvers/combustion/XiFoam/XiFoam.C
index 7292a06..62acf47 100644
--- a/applications/solvers/combustion/XiFoam/XiFoam.C
+++ b/applications/solvers/combustion/XiFoam/XiFoam.C
@@ -60,6 +60,7 @@ Description
 
 int main(int argc, char *argv[])
 {
+
     #include "setRootCase.H"
 
     #include "createTime.H"
diff --git a/applications/solvers/combustion/fireFoam/Make/options b/applications/solvers/combustion/fireFoam/Make/options
index cba08b2..0e26c8a 100644
--- a/applications/solvers/combustion/fireFoam/Make/options
+++ b/applications/solvers/combustion/fireFoam/Make/options
@@ -17,4 +17,5 @@ EXE_LIBS = \
     -lcompressibleTurbulenceModel \
     -lcompressibleLESModels \
     -lcompressibleRASModels \
-    -lradiation
+    -lradiation \
+    -lcompressibleTurbulenceModel
diff --git a/applications/solvers/compressible/rhoCentralFoam/BCs/Make/options b/applications/solvers/compressible/rhoCentralFoam/BCs/Make/options
index 87f38a6..6461836 100644
--- a/applications/solvers/compressible/rhoCentralFoam/BCs/Make/options
+++ b/applications/solvers/compressible/rhoCentralFoam/BCs/Make/options
@@ -3,8 +3,7 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/basic/lnInclude \
     -I$(LIB_SRC)/thermophysicalModels/specie/lnInclude
 
-EXE_LIBS = \
+LIB_LIBS = \
     -lfiniteVolume \
     -lbasicThermophysicalModels \
     -lspecie
-
diff --git a/applications/solvers/compressible/rhoCentralFoam/rhoCentralDyMFoam/Make/options b/applications/solvers/compressible/rhoCentralFoam/rhoCentralDyMFoam/Make/options
index 7446d36..af6a175 100644
--- a/applications/solvers/compressible/rhoCentralFoam/rhoCentralDyMFoam/Make/options
+++ b/applications/solvers/compressible/rhoCentralFoam/rhoCentralDyMFoam/Make/options
@@ -18,4 +18,5 @@ EXE_LIBS = \
     -lcompressibleRASModels \
     -lcompressibleLESModels \
     -ldynamicMesh \
-    -lmeshTools
+    -lmeshTools \
+    -lcompressibleTurbulenceModel
diff --git a/applications/solvers/compressible/rhoPorousMRFPimpleFoam/Make/options b/applications/solvers/compressible/rhoPorousMRFPimpleFoam/Make/options
index 809b4a6..40c6994 100644
--- a/applications/solvers/compressible/rhoPorousMRFPimpleFoam/Make/options
+++ b/applications/solvers/compressible/rhoPorousMRFPimpleFoam/Make/options
@@ -13,4 +13,5 @@ EXE_LIBS = \
     -lcompressibleRASModels \
     -lcompressibleLESModels \
     -lfiniteVolume \
-    -lmeshTools
+    -lmeshTools \
+    -lcompressibleTurbulenceModel
diff --git a/applications/solvers/discreteMethods/molecularDynamics/mdFoam/Make/options b/applications/solvers/discreteMethods/molecularDynamics/mdFoam/Make/options
index 14f2ed2..91cab46 100644
--- a/applications/solvers/discreteMethods/molecularDynamics/mdFoam/Make/options
+++ b/applications/solvers/discreteMethods/molecularDynamics/mdFoam/Make/options
@@ -13,4 +13,3 @@ EXE_LIBS = \
     -lmolecule \
     -lpotential \
     -lmolecularMeasurements
-
diff --git a/applications/solvers/heatTransfer/buoyantPimpleFoam/Make/options b/applications/solvers/heatTransfer/buoyantPimpleFoam/Make/options
index 8d01214..b5baa7c 100644
--- a/applications/solvers/heatTransfer/buoyantPimpleFoam/Make/options
+++ b/applications/solvers/heatTransfer/buoyantPimpleFoam/Make/options
@@ -10,4 +10,5 @@ EXE_LIBS = \
     -lcompressibleTurbulenceModel \
     -lcompressibleRASModels \
     -lcompressibleLESModels \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -lcompressibleTurbulenceModel
diff --git a/applications/solvers/heatTransfer/chtMultiRegionFoam/fluid/createFluidFields.H b/applications/solvers/heatTransfer/chtMultiRegionFoam/fluid/createFluidFields.H
index 012426a..8200384 100644
--- a/applications/solvers/heatTransfer/chtMultiRegionFoam/fluid/createFluidFields.H
+++ b/applications/solvers/heatTransfer/chtMultiRegionFoam/fluid/createFluidFields.H
@@ -52,7 +52,11 @@
             (
                 IOobject
                 (
+#if defined( WIN32 ) || defined( WIN64 )
+                    "KK",
+#else
                     "K",
+#endif
                     runTime.timeName(),
                     fluidRegions[i],
                     IOobject::NO_READ,
diff --git a/applications/solvers/heatTransfer/chtMultiRegionFoam/solid/createSolidFields.H b/applications/solvers/heatTransfer/chtMultiRegionFoam/solid/createSolidFields.H
index 3361a89..fea1ea8 100644
--- a/applications/solvers/heatTransfer/chtMultiRegionFoam/solid/createSolidFields.H
+++ b/applications/solvers/heatTransfer/chtMultiRegionFoam/solid/createSolidFields.H
@@ -61,7 +61,11 @@
             (
                 IOobject
                 (
+#if defined( WIN32 ) || defined( WIN64 )
+                    "KK",
+#else
                     "K",
+#endif
                     runTime.timeName(),
                     solidRegions[i],
                     IOobject::MUST_READ,
diff --git a/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/Make/options b/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/Make/options
index 47f9e1c..3359c41 100644
--- a/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/Make/options
+++ b/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/Make/options
@@ -14,4 +14,5 @@ EXE_LIBS = \
     -lspecie \
     -lcompressibleTurbulenceModel \
     -lcompressibleRASModels \
-    -lcompressibleLESModels
+    -lcompressibleLESModels \
+    -lcompressibleTurbulenceModel
diff --git a/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/fluid/createFluidFields.H b/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/fluid/createFluidFields.H
index 87b0a7a..da5587d 100644
--- a/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/fluid/createFluidFields.H
+++ b/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/fluid/createFluidFields.H
@@ -57,7 +57,11 @@
             (
                 IOobject
                 (
+#if defined( WIN32 ) || defined( WIN64 )
+                    "KK",
+#else
                     "K",
+#endif
                     runTime.timeName(),
                     fluidRegions[i],
                     IOobject::NO_READ,
diff --git a/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/solid/createSolidFields.H b/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/solid/createSolidFields.H
index 3361a89..fea1ea8 100644
--- a/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/solid/createSolidFields.H
+++ b/applications/solvers/heatTransfer/chtMultiRegionSimpleFoam/solid/createSolidFields.H
@@ -61,7 +61,11 @@
             (
                 IOobject
                 (
+#if defined( WIN32 ) || defined( WIN64 )
+                    "KK",
+#else
                     "K",
+#endif
                     runTime.timeName(),
                     solidRegions[i],
                     IOobject::MUST_READ,
diff --git a/applications/solvers/incompressible/pimpleDyMFoam/Make/options b/applications/solvers/incompressible/pimpleDyMFoam/Make/options
index 4b864f1..ccb07e7 100644
--- a/applications/solvers/incompressible/pimpleDyMFoam/Make/options
+++ b/applications/solvers/incompressible/pimpleDyMFoam/Make/options
@@ -12,6 +12,7 @@ EXE_LIBS = \
     -ltopoChangerFvMesh \
     -ldynamicMesh \
     -lmeshTools \
+    -lincompressibleTurbulenceModel \
     -lincompressibleTransportModels \
     -lincompressibleTurbulenceModel \
     -lincompressibleRASModels \
diff --git a/applications/solvers/multiphase/compressibleInterFoam/Make/options b/applications/solvers/multiphase/compressibleInterFoam/Make/options
index c8ce69c..75a3c81 100644
--- a/applications/solvers/multiphase/compressibleInterFoam/Make/options
+++ b/applications/solvers/multiphase/compressibleInterFoam/Make/options
@@ -11,4 +11,5 @@ EXE_LIBS = \
     -lincompressibleTurbulenceModel \
     -lincompressibleRASModels \
     -lincompressibleLESModels \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -linterfaceProperties
diff --git a/applications/solvers/multiphase/compressibleInterFoam/compressibleInterDyMFoam/Make/options b/applications/solvers/multiphase/compressibleInterFoam/compressibleInterDyMFoam/Make/options
index 1ddd905..b6f71bf 100644
--- a/applications/solvers/multiphase/compressibleInterFoam/compressibleInterDyMFoam/Make/options
+++ b/applications/solvers/multiphase/compressibleInterFoam/compressibleInterDyMFoam/Make/options
@@ -18,5 +18,7 @@ EXE_LIBS = \
     -lfiniteVolume \
     -ldynamicMesh \
     -lmeshTools \
-    -ldynamicFvMesh
+    -ldynamicFvMesh \
+    -lincompressibleTurbulenceModel \
+    -linterfaceProperties
 
diff --git a/applications/solvers/multiphase/interFoam/MRFInterFoam/Make/options b/applications/solvers/multiphase/interFoam/MRFInterFoam/Make/options
index 24349f6..bc7cfc9 100644
--- a/applications/solvers/multiphase/interFoam/MRFInterFoam/Make/options
+++ b/applications/solvers/multiphase/interFoam/MRFInterFoam/Make/options
@@ -12,4 +12,6 @@ EXE_LIBS = \
     -lincompressibleTurbulenceModel \
     -lincompressibleRASModels \
     -lincompressibleLESModels \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -lincompressibleTurbulenceModel \
+    -linterfaceProperties
diff --git a/applications/solvers/multiphase/interFoam/Make/options b/applications/solvers/multiphase/interFoam/Make/options
index c8ce69c..75a3c81 100644
--- a/applications/solvers/multiphase/interFoam/Make/options
+++ b/applications/solvers/multiphase/interFoam/Make/options
@@ -11,4 +11,5 @@ EXE_LIBS = \
     -lincompressibleTurbulenceModel \
     -lincompressibleRASModels \
     -lincompressibleLESModels \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -linterfaceProperties
diff --git a/applications/solvers/multiphase/interFoam/interDyMFoam/Make/options b/applications/solvers/multiphase/interFoam/interDyMFoam/Make/options
index 102475c..0bad06a 100644
--- a/applications/solvers/multiphase/interFoam/interDyMFoam/Make/options
+++ b/applications/solvers/multiphase/interFoam/interDyMFoam/Make/options
@@ -19,4 +19,6 @@ EXE_LIBS = \
     -ldynamicMesh \
     -lmeshTools \
     -ldynamicFvMesh \
-    -ltopoChangerFvMesh
+    -ltopoChangerFvMesh \
+    -lincompressibleTurbulenceModel \
+    -linterfaceProperties
diff --git a/applications/solvers/multiphase/interFoam/porousInterFoam/Make/options b/applications/solvers/multiphase/interFoam/porousInterFoam/Make/options
index fe7b6f9..2f04e65 100644
--- a/applications/solvers/multiphase/interFoam/porousInterFoam/Make/options
+++ b/applications/solvers/multiphase/interFoam/porousInterFoam/Make/options
@@ -14,5 +14,6 @@ EXE_LIBS = \
     -lincompressibleRASModels \
     -lincompressibleLESModels \
     -lfiniteVolume \
-    -lmeshTools
-
+    -lmeshTools \
+    -lincompressibleTurbulenceModel \
+    -linterfaceProperties
diff --git a/applications/solvers/multiphase/interMixingFoam/Make/options b/applications/solvers/multiphase/interMixingFoam/Make/options
index cb13572..e189add 100644
--- a/applications/solvers/multiphase/interMixingFoam/Make/options
+++ b/applications/solvers/multiphase/interMixingFoam/Make/options
@@ -16,4 +16,5 @@ EXE_LIBS = \
     -lincompressibleTurbulenceModel \
     -lincompressibleRASModels \
     -lincompressibleLESModels \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -lincompressibleTurbulenceModel
diff --git a/applications/solvers/multiphase/interPhaseChangeFoam/Make/options b/applications/solvers/multiphase/interPhaseChangeFoam/Make/options
index 960639f..5796ac0 100644
--- a/applications/solvers/multiphase/interPhaseChangeFoam/Make/options
+++ b/applications/solvers/multiphase/interPhaseChangeFoam/Make/options
@@ -12,4 +12,5 @@ EXE_LIBS = \
     -lincompressibleTurbulenceModel \
     -lincompressibleRASModels \
     -lincompressibleLESModels \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -linterfaceProperties
diff --git a/applications/solvers/multiphase/twoPhaseEulerFoam/interfacialModels/Make/options b/applications/solvers/multiphase/twoPhaseEulerFoam/interfacialModels/Make/options
index 42c2cb5..f64e170 100644
--- a/applications/solvers/multiphase/twoPhaseEulerFoam/interfacialModels/Make/options
+++ b/applications/solvers/multiphase/twoPhaseEulerFoam/interfacialModels/Make/options
@@ -3,4 +3,5 @@ EXE_INC = \
     -I../phaseModel/lnInclude
 
 LIB_LIBS = \
+    -lfiniteVolume \
     -lphaseModel
diff --git a/applications/solvers/multiphase/twoPhaseEulerFoam/kineticTheoryModels/Make/options b/applications/solvers/multiphase/twoPhaseEulerFoam/kineticTheoryModels/Make/options
index 2fcce99..359df22 100644
--- a/applications/solvers/multiphase/twoPhaseEulerFoam/kineticTheoryModels/Make/options
+++ b/applications/solvers/multiphase/twoPhaseEulerFoam/kineticTheoryModels/Make/options
@@ -3,3 +3,8 @@ EXE_INC = \
     -I$(LIB_SRC)/finiteVolume/lnInclude \
     -I../phaseModel/lnInclude \
     -I../interfacialModels/lnInclude
+
+LIB_LIBS = \
+    -lfiniteVolume \
+    -lphaseModel \
+    -lEulerianInterfacialModels
diff --git a/applications/solvers/multiphase/twoPhaseEulerFoam/phaseModel/Make/options b/applications/solvers/multiphase/twoPhaseEulerFoam/phaseModel/Make/options
index 0ec1139..64e4b54 100644
--- a/applications/solvers/multiphase/twoPhaseEulerFoam/phaseModel/Make/options
+++ b/applications/solvers/multiphase/twoPhaseEulerFoam/phaseModel/Make/options
@@ -3,4 +3,5 @@ EXE_INC = \
     -I$(LIB_SRC)/transportModels/incompressible/lnInclude
 
 LIB_LIBS = \
+    -lfiniteVolume \
     -lincompressibleTransportModels
diff --git a/applications/utilities/mesh/conversion/Optional/Allwmake b/applications/utilities/mesh/conversion/Optional/Allwmake
index ae71b40..b39938f 100755
--- a/applications/utilities/mesh/conversion/Optional/Allwmake
+++ b/applications/utilities/mesh/conversion/Optional/Allwmake
@@ -10,7 +10,7 @@ set -x
 ( cd $WM_THIRD_PARTY_DIR && ./AllwmakeLibccmio )
 
 # if the library built properly, the headers should exist too
-if [ -e $FOAM_LIBBIN/libccmio.so ]
+if [ -e $FOAM_LIBBIN/libccmio.so -o -e $FOAM_LIBBIN/libccmio.dll ]
 then
     wmake ccm26ToFoam
 fi
diff --git a/applications/utilities/mesh/conversion/fluent3DMeshToFoam/fluent3DMeshToFoam.L b/applications/utilities/mesh/conversion/fluent3DMeshToFoam/fluent3DMeshToFoam.L
index 53b5df6..1612636 100644
--- a/applications/utilities/mesh/conversion/fluent3DMeshToFoam/fluent3DMeshToFoam.L
+++ b/applications/utilities/mesh/conversion/fluent3DMeshToFoam/fluent3DMeshToFoam.L
@@ -136,6 +136,7 @@ int yyFlexLexer::yywrap()
 one_space                  [ \t\f]
 space                      {one_space}*
 some_space                 {one_space}+
+comma                      ","
 cspace                     ","{space}
 
 alpha                      [_[:alpha:]]
@@ -738,6 +739,10 @@ endOfSection               {space}")"{space}
 <*>{some_space}|\r {
     }
 
+ /* ------              Ignore commas.                               ------  */
+
+<*>{comma} {
+    }
 
  /* ------              Any other characters are errors.              ------ */
 
diff --git a/applications/utilities/mesh/conversion/fluentMeshToFoam/fluentMeshToFoam.L b/applications/utilities/mesh/conversion/fluentMeshToFoam/fluentMeshToFoam.L
index 83e628b..fa654a6 100644
--- a/applications/utilities/mesh/conversion/fluentMeshToFoam/fluentMeshToFoam.L
+++ b/applications/utilities/mesh/conversion/fluentMeshToFoam/fluentMeshToFoam.L
@@ -115,6 +115,7 @@ int yyFlexLexer::yywrap()
 one_space                  [ \t\f]
 space                      {one_space}*
 some_space                 {one_space}+
+comma                      ","
 cspace                     ","{space}
 spaceNl                    ({space}|\n|\r)*
 
@@ -817,6 +818,10 @@ endOfSection               {space}")"{space}
 <unknownBlock,embeddedUnknownBlock>{spaceNl}{text} {
     }
 
+ /* ------              Ignore commas.                               ------  */
+
+<*>{comma} {
+    }
 
  /* ------ Ignore remaining space and \n s.  Any other characters are errors. */
 
diff --git a/applications/utilities/mesh/generation/blockMesh/Make/options b/applications/utilities/mesh/generation/blockMesh/Make/options
index a5b85e4..890615f 100644
--- a/applications/utilities/mesh/generation/blockMesh/Make/options
+++ b/applications/utilities/mesh/generation/blockMesh/Make/options
@@ -6,3 +6,9 @@ EXE_INC = \
 EXE_LIBS = \
     -lmeshTools \
     -ldynamicMesh
+
+#if defined( WIN32 ) || defined( WIN64 )
+  ifeq ("$(WM_COMPILE_OPTION)","Prof")
+    include $(PWD)/Make/optionsStatic
+  endif
+#endif
diff --git a/applications/utilities/mesh/generation/blockMesh/Make/optionsStatic b/applications/utilities/mesh/generation/blockMesh/Make/optionsStatic
new file mode 100644
index 0000000..e79833f
--- /dev/null
+++ b/applications/utilities/mesh/generation/blockMesh/Make/optionsStatic
@@ -0,0 +1,16 @@
+    include $(RULES)/mplib$(WM_MPLIB)
+    PROJECT_LIBS = $(FOAM_LIBBIN)/lib$(WM_PROJECT).o
+    EXE_LIBS = $(FOAM_LIBBIN)/libfiniteVolume.o \
+              $(FOAM_LIBBIN)/libOSspecific.o \
+              $(FOAM_LIBBIN)/libz.o \
+              $(FOAM_LIBBIN)/liblagrangian.o \
+              $(FOAM_LIBBIN)/libtriSurface.o \
+              $(FOAM_LIBBIN)/libmeshTools.o \
+              $(FOAM_LIBBIN)/libdecompositionMethods.o \
+              $(FOAM_LIBBIN)/libscotch.o \
+              $(FOAM_LIBBIN)/libmetis.o \
+              $(FOAM_LIBBIN)/libGKlib.o \
+              $(FOAM_LIBBIN)/libdynamicMesh.o \
+              -lregex \
+              $(PLIBS) \
+              $(FOAM_MPI_LIBBIN)/libPstream.o
diff --git a/applications/utilities/mesh/generation/blockMesh/curvedEdges/lineEdge.C b/applications/utilities/mesh/generation/blockMesh/curvedEdges/lineEdge.C
index 7b325cb..17d4b93 100644
--- a/applications/utilities/mesh/generation/blockMesh/curvedEdges/lineEdge.C
+++ b/applications/utilities/mesh/generation/blockMesh/curvedEdges/lineEdge.C
@@ -63,7 +63,7 @@ Foam::lineEdge::~lineEdge()
 
 Foam::point Foam::lineEdge::position(const scalar lambda) const
 {
-    if (lambda < 0 || lambda > 1)
+    if (lambda < (0 - SMALL)  || lambda > (1 + SMALL))
     {
         FatalErrorIn("lineEdge::position(const scalar)")
             << "Parameter out of range, lambda = " << lambda
diff --git a/applications/utilities/mesh/generation/extrudeMesh/extrudeModel/Make/options b/applications/utilities/mesh/generation/extrudeMesh/extrudeModel/Make/options
index 3c57bef..1618ab5 100644
--- a/applications/utilities/mesh/generation/extrudeMesh/extrudeModel/Make/options
+++ b/applications/utilities/mesh/generation/extrudeMesh/extrudeModel/Make/options
@@ -2,7 +2,6 @@ EXE_INC = \
     -I$(LIB_SRC)/meshTools/lnInclude \
     -I$(LIB_SRC)/dynamicMesh/lnInclude
 
-EXE_LIBS = \
+LIB_LIBS = \
     -lmeshTools \
     -ldynamicMesh
-
diff --git a/applications/utilities/mesh/generation/snappyHexMesh/Make/options b/applications/utilities/mesh/generation/snappyHexMesh/Make/options
index 1c74c3a..1ce2502 100644
--- a/applications/utilities/mesh/generation/snappyHexMesh/Make/options
+++ b/applications/utilities/mesh/generation/snappyHexMesh/Make/options
@@ -14,3 +14,12 @@ EXE_LIBS = \
     -lmeshTools \
     -ldynamicMesh \
     -lautoMesh
+
+#if (defined( WIN32 ) || defined( WIN64 ))
+
+EXE_LIBS += \
+    -lscotchDecomp \
+    -lmetisDecomp \
+    -lparMetisDecomp
+
+#endif
diff --git a/applications/utilities/mesh/manipulation/flattenMesh/Make/options b/applications/utilities/mesh/manipulation/flattenMesh/Make/options
index 03ae115..73f34b0 100644
--- a/applications/utilities/mesh/manipulation/flattenMesh/Make/options
+++ b/applications/utilities/mesh/manipulation/flattenMesh/Make/options
@@ -3,5 +3,5 @@ EXE_INC = \
     -I$(LIB_SRC)/meshTools/lnInclude
 
 EXE_LIBS = \
-	-ldynamicMesh \
+    -ldynamicMesh \
     -lmeshTools
diff --git a/applications/utilities/mesh/manipulation/renumberMesh/Make/options b/applications/utilities/mesh/manipulation/renumberMesh/Make/options
index f43c7b0..2291b0a 100644
--- a/applications/utilities/mesh/manipulation/renumberMesh/Make/options
+++ b/applications/utilities/mesh/manipulation/renumberMesh/Make/options
@@ -10,3 +10,12 @@ EXE_LIBS = \
     -lfiniteVolume \
     -ldecompositionMethods \
     -lgenericPatchFields
+
+#if (defined( WIN32 ) || defined( WIN64 ))
+
+EXE_LIBS += \
+    -lscotchDecomp \
+    -lmetisDecomp \
+    -lparMetisDecomp
+
+#endif
diff --git a/applications/utilities/mesh/manipulation/setSet/Allwmake b/applications/utilities/mesh/manipulation/setSet/Allwmake
index 1e116a3..fee44a8 100755
--- a/applications/utilities/mesh/manipulation/setSet/Allwmake
+++ b/applications/utilities/mesh/manipulation/setSet/Allwmake
@@ -2,7 +2,7 @@
 cd ${0%/*} || exit 1    # run from this directory
 
 READLINE=0
-if [ -f /usr/include/readline/readline.h ]
+if ! isMinGW && [ -f /usr/include/readline/readline.h ]
 then
     echo "Found readline/readline.h  --  enabling readline support."
     READLINE=1
diff --git a/applications/utilities/miscellaneous/foamDebugSwitches/Make/options b/applications/utilities/miscellaneous/foamDebugSwitches/Make/options
index e135438..bbb3754 100644
--- a/applications/utilities/miscellaneous/foamDebugSwitches/Make/options
+++ b/applications/utilities/miscellaneous/foamDebugSwitches/Make/options
@@ -1,4 +1,7 @@
 EXE_LIBS = \
+    -lLESfilters \
+    -lODE \
+    -lcompressibleLESModels \
     -lbasicThermophysicalModels \
     -lchemistryModel \
     -lreactionThermophysicalModels \
@@ -27,8 +30,6 @@ EXE_LIBS = \
     -lliquidMixture \
     -lliquids \
     -lmeshTools \
-    -lODE \
-    -lOpenFOAM \
     -lpdf \
     -lphaseModel \
     -lradiation \
@@ -42,3 +43,12 @@ EXE_LIBS = \
     -ltriSurface \
     -lautoMesh \
     -lgenericPatchFields
+
+#if (defined( WIN32 ) || defined( WIN64 ))
+
+EXE_LIBS += \
+    -lscotchDecomp \
+    -lmetisDecomp \
+    -lparMetisDecomp
+
+#endif
diff --git a/applications/utilities/miscellaneous/foamDebugSwitches/foamDebugSwitches.C b/applications/utilities/miscellaneous/foamDebugSwitches/foamDebugSwitches.C
index d7365ee..52335b1 100644
--- a/applications/utilities/miscellaneous/foamDebugSwitches/foamDebugSwitches.C
+++ b/applications/utilities/miscellaneous/foamDebugSwitches/foamDebugSwitches.C
@@ -45,6 +45,8 @@ int main(int argc, char *argv[])
 
     Foam::argList args(argc, argv);
 
+#   include "forceLoadLibraries.H"
+
     wordList currDebug(debug::debugSwitches().toc());
     wordList currInfo(debug::infoSwitches().toc());
     wordList currOpt(debug::optimisationSwitches().toc());
diff --git a/applications/utilities/parallelProcessing/Allwmake b/applications/utilities/parallelProcessing/Allwmake
new file mode 100755
index 0000000..8b90295
--- /dev/null
+++ b/applications/utilities/parallelProcessing/Allwmake
@@ -0,0 +1,11 @@
+#!/bin/sh
+set -x
+
+if [ "NONE" = "$WM_MPLIB" ]; then
+    exit 0
+fi
+
+wmake decomposePar
+wmake reconstructPar
+wmake reconstructParMesh
+wmake redistributeMeshPar
diff --git a/applications/utilities/parallelProcessing/decomposePar/Make/options b/applications/utilities/parallelProcessing/decomposePar/Make/options
index decd3de..5acc0d8 100644
--- a/applications/utilities/parallelProcessing/decomposePar/Make/options
+++ b/applications/utilities/parallelProcessing/decomposePar/Make/options
@@ -10,3 +10,12 @@ EXE_LIBS = \
     -llagrangian \
     -lmeshTools \
     -lgenericPatchFields
+
+#if (defined( WIN32 ) || defined( WIN64 ))
+
+EXE_LIBS += \
+    -lscotchDecomp \
+    -lmetisDecomp \
+    -lparMetisDecomp
+
+#endif
diff --git a/applications/utilities/parallelProcessing/redistributeMeshPar/Make/options b/applications/utilities/parallelProcessing/redistributeMeshPar/Make/options
index b616c9a..52880fe 100644
--- a/applications/utilities/parallelProcessing/redistributeMeshPar/Make/options
+++ b/applications/utilities/parallelProcessing/redistributeMeshPar/Make/options
@@ -9,3 +9,12 @@ EXE_LIBS = \
     -ldecompositionMethods \
     -lmeshTools \
     -ldynamicMesh
+
+#if (defined( WIN32 ) || defined( WIN64 ))
+
+EXE_LIBS += \
+    -lscotchDecomp \
+    -lmetisDecomp \
+    -lparMetisDecomp
+
+#endif
diff --git a/applications/utilities/postProcessing/dataConversion/foamToVTK/Make/options b/applications/utilities/postProcessing/dataConversion/foamToVTK/Make/options
index e9562aa..c2fb098 100644
--- a/applications/utilities/postProcessing/dataConversion/foamToVTK/Make/options
+++ b/applications/utilities/postProcessing/dataConversion/foamToVTK/Make/options
@@ -1,7 +1,8 @@
 EXE_INC = \
     -I$(LIB_SRC)/lagrangian/basic/lnInclude \
     -I$(LIB_SRC)/finiteVolume/lnInclude \
-    -I$(LIB_SRC)/meshTools/lnInclude
+    -I$(LIB_SRC)/meshTools/lnInclude\
+    -I$(FOAM_UTILITIES)/postProcessing/graphics/PVFoamReader/vtkFoam
 
 EXE_LIBS = \
     -lfiniteVolume \
diff --git a/applications/utilities/postProcessing/dataConversion/foamToVTK/internalWriter.C b/applications/utilities/postProcessing/dataConversion/foamToVTK/internalWriter.C
index 16807f2..37e508e 100644
--- a/applications/utilities/postProcessing/dataConversion/foamToVTK/internalWriter.C
+++ b/applications/utilities/postProcessing/dataConversion/foamToVTK/internalWriter.C
@@ -39,7 +39,8 @@ Foam::internalWriter::internalWriter
     vMesh_(vMesh),
     binary_(binary),
     fName_(fName),
-    os_(fName.c_str())
+    os_(fName.c_str(),
+        std::ios_base::out|std::ios_base::binary) //a must for Windows!
 {
     const fvMesh& mesh = vMesh_.mesh();
     const vtkTopo& topo = vMesh_.topo();
diff --git a/applications/utilities/postProcessing/dataConversion/foamToVTK/lagrangianWriter.C b/applications/utilities/postProcessing/dataConversion/foamToVTK/lagrangianWriter.C
index 7f1354c..216ac6b 100644
--- a/applications/utilities/postProcessing/dataConversion/foamToVTK/lagrangianWriter.C
+++ b/applications/utilities/postProcessing/dataConversion/foamToVTK/lagrangianWriter.C
@@ -44,7 +44,8 @@ Foam::lagrangianWriter::lagrangianWriter
     binary_(binary),
     fName_(fName),
     cloudName_(cloudName),
-    os_(fName.c_str())
+    os_(fName.c_str(),
+        std::ios_base::out|std::ios_base::binary) //a must for Windows!
 {
     const fvMesh& mesh = vMesh_.mesh();
 
diff --git a/applications/utilities/postProcessing/dataConversion/foamToVTK/patchWriter.C b/applications/utilities/postProcessing/dataConversion/foamToVTK/patchWriter.C
index 69bbac9..4da65c9 100644
--- a/applications/utilities/postProcessing/dataConversion/foamToVTK/patchWriter.C
+++ b/applications/utilities/postProcessing/dataConversion/foamToVTK/patchWriter.C
@@ -45,7 +45,8 @@ Foam::patchWriter::patchWriter
     nearCellValue_(nearCellValue),
     fName_(fName),
     patchIDs_(patchIDs),
-    os_(fName.c_str())
+    os_(fName.c_str(),
+        std::ios_base::out|std::ios_base::binary) //a must for Windows!
 {
     const fvMesh& mesh = vMesh_.mesh();
     const polyBoundaryMesh& patches = mesh.boundaryMesh();
diff --git a/applications/utilities/postProcessing/graphics/PVFoamReader/PVFoamReader/PVFoamReaderConfigure.h.in b/applications/utilities/postProcessing/graphics/PVFoamReader/PVFoamReader/PVFoamReaderConfigure.h.in
index aae4a07..3a624ab 100644
--- a/applications/utilities/postProcessing/graphics/PVFoamReader/PVFoamReader/PVFoamReaderConfigure.h.in
+++ b/applications/utilities/postProcessing/graphics/PVFoamReader/PVFoamReader/PVFoamReaderConfigure.h.in
@@ -5,7 +5,7 @@ wishing to create their own ParaView plugin classes locally.
 #ifndef __vtk@PROJECT_NAME@_h
 #define __vtk@PROJECT_NAME@_h
 
-#if defined(_WIN32)
+#if defined(_WIN32) || defined(_WIN64)
 # if defined(@PROJECT_NAME@_EXPORTS)
 #  define VTK_@PROJECT_NAME@_EXPORT __declspec(dllexport)
 # else
diff --git a/applications/utilities/postProcessing/graphics/ensightFoamReader/global_extern_proto.h b/applications/utilities/postProcessing/graphics/ensightFoamReader/global_extern_proto.h
index 6a08f5a..bfe8348 100644
--- a/applications/utilities/postProcessing/graphics/ensightFoamReader/global_extern_proto.h
+++ b/applications/utilities/postProcessing/graphics/ensightFoamReader/global_extern_proto.h
@@ -21,7 +21,7 @@
 #ifndef GLOBAL_EXTERN_PROTO_H
 #define GLOBAL_EXTERN_PROTO_H
 
-#ifdef WIN32
+#if defined( WIN32 ) || defined( WIN64 )
 #define W32IMPORT __declspec( dllimport )
 #define W32EXPORT __declspec( dllexport )
 #else
diff --git a/applications/utilities/postProcessing/turbulence/createTurbulenceFields/Make/options b/applications/utilities/postProcessing/turbulence/createTurbulenceFields/Make/options
index 27136c1..8862565 100644
--- a/applications/utilities/postProcessing/turbulence/createTurbulenceFields/Make/options
+++ b/applications/utilities/postProcessing/turbulence/createTurbulenceFields/Make/options
@@ -8,4 +8,4 @@ EXE_LIBS = \
     -lincompressibleRASModels \
     -lincompressibleTransportModels \
     -lfiniteVolume \
-    -lgenericPatchFields
\ No newline at end of file
+    -lgenericPatchFields
diff --git a/bin/backupFullFolder b/bin/backupFullFolder
new file mode 100755
index 0000000..da98b8e
--- /dev/null
+++ b/bin/backupFullFolder
@@ -0,0 +1,25 @@
+#!/bin/sh
+
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/} Folder_to_backup
+
+* Packs the whole folder in a .tar.bz2
+
+USAGE
+    exit 1
+}
+
+if [ $# -lt 1 -o "$1" = "--help" ]
+then
+    usage
+fi
+
+echo "Backup of $1 has started..."
+timeStamp=$(date +%Y-%m-%d)
+packDir=$1
+packFile=${packDir}.Full.mingw.${timeStamp}.tar.bz2
+tar -cjf $packFile $packDir --exclude="*/build/*"
+echo "Backup of $packDir to $packFile complete."
diff --git a/bin/backupSourceFolder b/bin/backupSourceFolder
new file mode 100755
index 0000000..1e44f47
--- /dev/null
+++ b/bin/backupSourceFolder
@@ -0,0 +1,28 @@
+#!/bin/sh
+
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/} Folder_to_backup
+
+* Packs the whole folder in a .tar.lzma, excluding the binaries, objects and downloaded packages.
+
+USAGE
+    exit 1
+}
+
+if [ $# -lt 1 -o "$1" = "--help" ]
+then
+    usage
+fi
+
+echo "Backup of $1 has started..."
+timeStamp=$(date +%Y-%m-%d)
+packDir=$1
+packFile=${packDir}.Source.mingw.${timeStamp}.tar.lzma
+tar -lzma -cf $packFile $packDir --exclude="*bin/linux*" --exclude="*lib/linux*" --exclude="*.dep" \
+--exclude="*lnInclude*" --exclude="*Make/linux*" --exclude="*mingwcc*" --exclude="*platforms*" \
+--exclude="*/build/*" --exclude="*libccmio-2.6.1/*" --exclude="*download*" --exclude="*doc/Doxygen/html/*" \
+--exclude="*doc/Doxygen/qt_qch*" --exclude="*mingw-libgnurx-2.5.1*" --exclude="*zlib-1.2.5*"
+echo "Backup of $packDir to $packFile complete."
diff --git a/bin/chtMultiRegionFixK b/bin/chtMultiRegionFixK
new file mode 100755
index 0000000..8680ff2
--- /dev/null
+++ b/bin/chtMultiRegionFixK
@@ -0,0 +1,95 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     chtMultiRegionFixK
+#
+# Description
+#     Help script for creating Windows ready chtMultiRegion tutorials. This has
+#   to be executed while in a case sensitive file system. Basically it replaces
+#   all relevant K field entries with KK.
+#
+#------------------------------------------------------------------------------
+
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/} tutorial_folder
+
+  This is a help script for creating Windows ready chtMultiRegion tutorials. This has
+  to be executed while in a case sensitive file system. Basically it replaces
+  all relevant K field entries with KK.
+
+* This will change the pertinent tutorial irreversebly! Use it in a copy of the original!
+
+USAGE
+    exit 1
+}
+
+if [ $# -lt 1 -o "$1" = "--help" ]
+then
+    usage
+fi
+
+tutorialFolder=$1
+
+if [ ! -d "$tutorialFolder/0" -o ! -d "$tutorialFolder/system" -o ! -e "$tutorialFolder/0/K" ]; then
+  echo "Invalid tutorial folder! This script should only be used with tutorial cases that work with chtMultiRegion*."
+  exit 1
+fi
+
+#first copy with sed the 0/K file to 0/KK
+echo "Fixing 0/K..."
+sed -e 's=\(object\ *\)K=\1KK=g' "$tutorialFolder/0/K" > $tutorialFolder/0/KK
+rm $tutorialFolder/0/K
+
+#now sed every changeDict
+echo "Fixing system/*/changeDictionaryDict..."
+find $tutorialFolder/. -name changeDictionaryDict | \
+while read dict; do
+  sed -e 's=\(K\ \ *\)K;=\1KK;=g' -e 's=\(^\ *\)K$=\1KK=g' $dict > $dict.new
+  rm $dict
+  mv $dict.new $dict
+done
+
+#now sed every fvSchemes
+echo "Fixing system/*/fvSchemes..."
+find $tutorialFolder/. -name fvSchemes | \
+while read file; do
+  sed -e 's=\(laplacian(\)K=\1KK=g' $file > $file.new
+  rm $file
+  mv $file.new $file
+done
+
+#now sed every Allrun
+echo "Fixing Allrun..."
+find $tutorialFolder/. -name Allrun | \
+while read file; do
+  sed -e 's=,K,=,KK,=g' $file > $file.new
+  rm $file
+  mv $file.new $file
+done
+
+echo "Changes complete. You may now use this tutorial \"$tutorialFolder\" in Windows."
diff --git a/bin/fixPatchExeNames b/bin/fixPatchExeNames
new file mode 100755
index 0000000..ff947a5
--- /dev/null
+++ b/bin/fixPatchExeNames
@@ -0,0 +1,84 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     fixPatchExeNames
+#
+# Description
+#     Help script for renaming executables that have Patch in their names and 
+#   create scripts to call the renamed executables. This is necessary due to 
+#   Windows Vista/7 security measurements that restricts files named "patch".
+#
+#------------------------------------------------------------------------------
+
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/}
+
+This will automatically search files that have patch in their name and end in 
+".exe", then rename the executable and create an sh script and a batch file, 
+that will call the renamed executable. This is necessary due to Windows Vista/7 
+security measurements that restricts files named "patch".
+
+USAGE
+    exit 1
+}
+
+if [ $# -gt 0 -o "$1" = "--help" ]
+then
+    usage
+fi
+
+switchTheExecutable()
+{
+  echo "Processing files in folder $1"
+  cd $1
+
+  find * -iname "*patch*.exe" | \
+  while read file
+  do
+    echo "Processing file: " $file
+
+    #rename it
+    newName=`echo $file | sed -e 's=\([Pp]\)atch=\1tch=g'`
+    mv $file $newName
+
+    #strip the extension
+    justName=`echo $file | sed -e 's=\.exe$==g'`
+
+    #create sh script
+    echo '#!/bin/sh' > $justName
+    echo "$newName \$*" >> $justName
+
+    #create batch file
+    echo "@$newName %*" > ${justName}.bat
+
+  done
+}
+
+switchTheExecutable $FOAM_APPBIN
+switchTheExecutable $FOAM_USER_APPBIN
+
diff --git a/bin/foamDiff b/bin/foamDiff
new file mode 100755
index 0000000..a8a2172
--- /dev/null
+++ b/bin/foamDiff
@@ -0,0 +1,86 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     foamDiff
+#
+# Description
+#     Help script for running diff between OpenFOAM folders, without having 
+#   to clean up the binaries and objects. This was created because we at 
+#   blueCAPE haven't been using git for the development of these patches 
+#   for mingw.
+#
+#------------------------------------------------------------------------------
+
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/} FolderNew FolderOrig patch_name
+
+* Compare folders "FolderNew" "FolderOrig" and output the diferences into the file "patch_name"
+* Folders ignored are the build folders
+
+USAGE
+    exit 1
+}
+
+if [ $# -lt 1 -o "$1" = "--help" ]
+then
+    usage
+fi
+
+FolderNew=$1
+FolderOrig=$2
+patch_name=$3
+
+if [ -e $patch_name ]; then
+  echo "The file $patch_name already exists."
+  echo "Running diff into an already existing file is no longer allowed."
+  echo "Please remove it or change the name!"
+  exit 1
+fi
+
+echo "Gathering file list to process..."
+
+find $FolderNew/* | grep -v "Make/linux" | grep -v "lnInclude" | \
+grep -v "gcc-4" | grep -v "/platform" | grep -v "/build/" | grep -v "/mingwcc" | \
+grep -v "/download" |grep -v "lib/linux" | grep -v "bin/linux" | grep -v ".dep" | \
+grep -v "/paraview-3\.8\.0/" | grep -v "/libccmio" | grep -v "\.directory" | \
+grep -v "/doc/Doxygen/html/" | grep -v "/doc/Doxygen/man/" | grep -v "/doc/Doxygen/qt_qch/" | \
+grep -v "/doc/Doxygen/latex/" | grep -v "/scotch_5.1/bin" | grep -v "/scotch_5.1/include" | \
+grep -v "/scotch_5.1/lib" | grep -v -e "/scotch_5.1/src/.*def$" | \
+grep -v "\.o$" | grep -v "\.a$" | grep -v "\.so$" | grep -v "\.dll$" | \
+grep -v "/scotch_5.1/src/Makefile.inc" | grep -v "/pexports-" | grep -v "parser" | \
+grep -v "/openmpi-" | grep -v "/zlib-" | grep -v "/mingw-libgnurx-" | \
+grep -v "/mingw-w64-crt" | grep -v "/mpfr-" | grep -v "/gmp-" | \
+grep -v "/gcc-" | grep -v "/binutils-" | \
+sed s=$FolderNew/== | \
+while read file
+do
+  if [ ! -d "$FolderNew/$file" ]; then
+    echo "Processing: " $FolderOrig/$file " -- vs -- " $FolderNew/$file 
+    diff -Nu $FolderOrig/$file $FolderNew/$file >> $patch_name
+  fi
+done
diff --git a/bin/foamJob b/bin/foamJob
index a14c320..4d3a738 100755
--- a/bin/foamJob
+++ b/bin/foamJob
@@ -38,6 +38,7 @@ options:
   -case dir     specify case directory
   -s            also sends output to screen
   -p            parallel run of processors
+  -w            wait for execution to complete (without -s it will run in the background)
   -v ver        specify OpenFOAM version
   -help         this usage
 
@@ -95,6 +96,7 @@ EOF
 #~~~~~~~~~~~~
 SCREEN=no
 PARALLEL=no
+WAIT=no
 
 
 # parse options
@@ -118,6 +120,10 @@ do
       PARALLEL=yes
       shift
       ;;
+   -w)
+      WAIT=yes
+      shift
+      ;;
    -v)
       shift
       version=$1
@@ -165,6 +171,8 @@ if [ "$PARALLEL" = no ]; then
     if [ "$SCREEN" = no ]; then
        echo "Executing: $APPLICATION $@ > log 2>&1 &"
        $APPLICATION $@ > log 2>&1 &
+       pid=$!
+       if [ "$WAIT" = "yes" ]; then wait $pid; fi
     else
        echo "Executing: $APPLICATION $@ | tee log &"
        $APPLICATION $@ | tee log &
@@ -226,6 +234,8 @@ else
    if [ "$SCREEN" = no ] ; then
       echo "Executing: mpirun $mpiopts $APPLICATION $@ -parallel > log 2>&1"
       $mpirun $mpiopts $APPLICATION $@ -parallel > log 2>&1 &
+      pid=$!
+      if [ "$WAIT" = "yes" ]; then wait $pid; fi
    else
       echo "Executing: mpirun $mpiopts $APPLICATION $@ -parallel | tee log"
       $mpirun $mpiopts $APPLICATION $@ -parallel  | tee log
diff --git a/bin/foamLog b/bin/foamLog
index 4de1587..75df2aa 100755
--- a/bin/foamLog
+++ b/bin/foamLog
@@ -46,7 +46,7 @@ printUsage() {
 cat <<LABUSAGE
 $PROGNAME - extracts xy files from Foam logs.
 
-Usage: $PROGNAME [-n][-s] <log>
+Usage: $PROGNAME [-n][-s][-m] <log>
            extracts xy files from log
        $PROGNAME -l <log>
            lists but does not extract
@@ -90,6 +90,8 @@ found  $PROGDIR/${PROGNAME}.db.
 Option -s suppresses the default information and only prints the extracted
 variables.
 
+Option -m merges outputs for when solvers don't use Time iterations.
+
 LABHELP
 }
 
@@ -161,14 +163,20 @@ getAllQueries() {
 
     for var in $dbQueries
     do
-        getQueries $1 "$var"
-        line=`egrep "$LINEQ" $2`
-        if [ "$line" ]; then
-            column=`echo "$line" | fgrep "$NUMQ"`
-            if [ "$column" ]; then
-                queries="$queries $var"
-            fi
-        fi
+        case $var in
+        Separator*) :
+          ;;
+        *)
+          getQueries $1 "$var"
+          line=`egrep "$LINEQ" $2`
+          if [ "$line" ]; then
+              column=`echo "$line" | fgrep "$NUMQ"`
+              if [ "$column" ]; then
+                  queries="$queries $var"
+              fi
+          fi
+          ;;
+        esac
     done
 
     for q in $queries
@@ -177,6 +185,13 @@ getAllQueries() {
     done | sort -u
 }
 
+# doesSeparatorExist queryRegEx logFile 
+# Checks if the queryRegEx exists in the logFile
+doesSeparatorExist()
+{
+    egrep "$1" $2
+}
+
 #-----------------------------
 # Main
 #-----------------------------
@@ -184,9 +199,10 @@ getAllQueries() {
 # sort arguments
 TIMENAME='Time'
 VERBOSE='yes'
+MERGEITERS=''
 LISTONLY=''
 
-while getopts nslh flags
+while getopts nmslh flags
 do
     case $flags in
         n)  TIMENAME=""
@@ -196,6 +212,8 @@ do
             ;;
         s)  VERBOSE=""
             ;;
+        m)  MERGEITERS="yes"
+            ;;
         l)  LISTONLY='yes'
             ;;
 	    \?) printUsage
@@ -321,6 +339,19 @@ LABEL
 
 #-- Generate code for iteration separator (increments 'Iteration')
 getQueries $DBFILE 'Separator'
+LINEQ1=$LINEQ
+getQueries $DBFILE 'Separator2'
+LINEQ2=$LINEQ
+getQueries $DBFILE 'Separator3'
+LINEQ3=$LINEQ
+LINEQ=$LINEQ1
+if [ -z "$MERGEITERS" -o -n "`doesSeparatorExist \"$LINEQ1\" $LOG`" ]; then
+  LINEQ=$LINEQ1
+elif [ -n "`doesSeparatorExist \"$LINEQ2\" $LOG`" ]; then
+  LINEQ=$LINEQ2
+elif [ -n "`doesSeparatorExist \"$LINEQ3\" $LOG`" ]; then
+  LINEQ=$LINEQ3
+fi
 cat <<LABSEP >> $AWKFILE
 #-- Iteration separator (increments 'Iteration')
 /$LINEQ/ {
@@ -330,6 +361,7 @@ cat <<LABSEP >> $AWKFILE
 
 LABSEP
 
+unset LINEQ1 LINEQ2 LINEQ3
 
 #-- Generate code for extracting Time
 getQueries $DBFILE 'Time'
@@ -359,9 +391,10 @@ cat <<LABSOLVE >> $AWKFILE
     extract(\$0, "Solving for ", varNameVal)
 
     varName=varNameVal[1]
+    extract(\$0, "Initial residual = ", val)
+    if(val[1]==varNameVal[1]) next;
     file=varName "_" subIter[varName]++
     file="$CASEDIR/logs/" file 
-    extract(\$0, "Initial residual = ", val)
     print $TIMENAME "\t" val[1] > file
 
     varName=varNameVal[1] "FinalRes"
diff --git a/bin/foamLog.db b/bin/foamLog.db
index 49d551f..33b708e 100644
--- a/bin/foamLog.db
+++ b/bin/foamLog.db
@@ -17,6 +17,8 @@
 
 #- String to recognize new iteration by (usually same as 'Time')
 Separator/^[ \t]*Time = /Time = 
+Separator2/^[ \t]*Iteration: /Iteration: 
+Separator3/^ExecutionTime = /ExecutionTime = 
 
 #- Time value:
 Time/^[ \t]*Time = /Time = 
@@ -51,3 +53,23 @@ epsAvg/bounding epsilon,/average:
 gammaMin/Min\(gamma\) =/Min(gamma) = 
 gammaMax/Max\(gamma\) =/Max(gamma) = 
 
+#- inter*Foam related solvers that only use one phase
+AlphaLiquidFrac/Liquid phase volume fraction = /Liquid phase volume fraction = 
+AlphaAirFrac/Air phase volume fraction = /Air phase volume fraction = 
+
+#- mdEquilibriumFoam and mdFoam relevant outputs
+OveNumDen/Overall number density = /Overall number density = 
+OveMassDen/Overall mass density = /Overall mass density = 
+MaxVel/Maximum \|velocity\| = /Maximum |velocity| = 
+AveLinKEpMolec/Average linear KE per molecule = /Average linear KE per molecule = 
+AveAngKEpMolec/Average angular KE per molecule = /Average angular KE per molecule = 
+AvePEpMolec/Average PE per molecule = /Average PE per molecule = 
+AveTEpMolec/Average TE per molecule = /Average TE per molecule = 
+
+#- dsmcFoam relevant outputs
+NumMolec/Number of molecules             = /Number of molecules             = 
+MassSys/Mass in system                  = /Mass in system                  = 
+AveLinMomentum/\|Average linear momentum\|        = /|Average linear momentum|        = 
+AveLinKinEn/Average linear kinetic energy   = /Average linear kinetic energy   = 
+AveIntEn/Average internal energy         = /Average internal energy         = 
+AveTotEn/Average total energy            = /Average total energy            = 
diff --git a/bin/isMinGW b/bin/isMinGW
new file mode 100755
index 0000000..e871a28
--- /dev/null
+++ b/bin/isMinGW
@@ -0,0 +1,34 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     isMinGW
+#
+# Description
+#     Help script for determining if the current environment is a MinGW variant
+#
+#------------------------------------------------------------------------------
+
+[ -n "`echo $WM_COMPILER | grep mingw`" ] && exit 0
+exit 1
diff --git a/bin/prepareTutorials4Win b/bin/prepareTutorials4Win
new file mode 100755
index 0000000..2df57cd
--- /dev/null
+++ b/bin/prepareTutorials4Win
@@ -0,0 +1,117 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     prepareTutorials4Win
+#
+# Description
+#     Help script for preparing tutorials for the Windows environment.
+#
+#------------------------------------------------------------------------------
+
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/} tutorial_folder
+
+  Help script for preparing tutorials for the Windows environment.
+  It will prepare and pack the tutorials into $WM_PROJECT_DIR/tutorials_win.tar.bz2
+
+USAGE
+    exit 1
+}
+
+if [ $# -lt 1 -o "$1" = "--help" ]
+then
+    usage
+fi
+
+tutorialFolder=$1
+
+#prepare the folder for processing and copy the original tutorials
+#remove the build files, since their useless in Windows.
+mkdir -p "$tutorialFolder"
+cd "$tutorialFolder"
+cp -r $FOAM_TUTORIALS/. .
+find . -name "*.dep" | xargs rm
+find . -type d -name "linux*" | grep "/Make/" | xargs rm -rf
+
+if [ -d "$WM_PROJECT_USER_DIR/contribsExtend/viscoelasticSource" ]; then
+  #also copy the tutorials from viscoelasticSource
+  cp -r $WM_PROJECT_USER_DIR/contribsExtend/viscoelasticSource/tutorials/. .
+fi
+
+echo "Fixing chtMultiRegion* tutorials"
+for chtMultis in `find heatTransfer -name "chtMultiRegion*"`; do
+  for chtTuto in `find $chtMultis -maxdepth 1 -mindepth 1`; do
+    chtMultiRegionFixK $chtTuto
+  done
+done
+
+echo "Fixing motorBike STL"
+cd incompressible/simpleFoam/motorBike
+chmod +x fixForWindows
+./fixForWindows
+sed -i -e 's=sed \-i=sedIt=' Allrun
+cd -
+
+echo "Fixing multiphase/interFoam/les/nozzleFlow2D/Allrun (exponencial issue)"
+cd multiphase/interFoam/les/nozzleFlow2D
+echo '--- Allrun.orig 2010-12-13 20:30:39.164415186 +0000
++++ Allrun  2010-12-13 20:31:19.192043509 +0000
+@@ -13,6 +13,7 @@
+ 
+ runApplication blockMesh
+ 
++firstiter=1e-008
+ i=1
+ if [ -f log.cellSet ] ; then
+    i=3
+@@ -24,8 +30,8 @@
+     cp system/cellSetDict.${i} system/cellSetDict
+     runApplication cellSet
+     runRefineMesh
+-    cp -r 1e-08/polyMesh/* constant/polyMesh
+-    rm -rf 1e-08
++    cp -r ${firstiter}/polyMesh/* constant/polyMesh
++    rm -rf ${firstiter}
+     i=`expr $i + 1`
+ done
+ cp constant/polyMesh/boundary.org constant/polyMesh/boundary
+' | patch -p0
+cd -
+
+echo "Fixing combustion/XiFoam/ras/Allrun (rounding issue in SP mode)"
+cd combustion/XiFoam/ras
+sed -i -e 's=\.\./moriyoshiHomogeneous/0.005=\`find ../moriyoshiHomogeneous -name "0.*" | sort -u | tail -n 1\`=' Allrun
+cd -
+
+echo "Packing Tutorials to here: '$WM_PROJECT_DIR/tutorials_win.tar.bz2'"
+if [ -e "$WM_PROJECT_DIR/tutorials_win.tar.bz2" ]; then rm "$WM_PROJECT_DIR/tutorials_win.tar.bz2"; fi
+tar -cjhf $WM_PROJECT_DIR/tutorials_win.tar.bz2 .
+
+echo "Removing temporary folder."
+cd ..
+rm -rf "$tutorialFolder"
diff --git a/bin/tutowin b/bin/tutowin
new file mode 100755
index 0000000..13332a7
--- /dev/null
+++ b/bin/tutowin
@@ -0,0 +1,46 @@
+#!/bin/sh
+
+#echo $0
+EXEFILE=$0
+VVVALUE=`echo $EXEFILE | sed s/\[\\.\]*\[\\/\]*\[\\.\]*\[\\/\]*[a-z]*//`
+#echo $VVVALUE
+if [ "$VVVALUE" = "" ]; then
+EXEFILE=$PWD/$0
+#echo $EXEFILE
+fi
+
+processThis()
+{
+
+FOLDER=$1
+OLDFOLDER=$PWD
+if [ -d "./$FOLDER" ]; then
+  cd ./$FOLDER
+else
+  cd $FOLDER
+fi
+
+for fol in *
+do
+if [ -L $fol ]; then
+  echo "$PWD/$fol"
+elif [ -d $fol ]; then
+  #echo "$fol go in"
+  $EXEFILE $fol
+fi
+
+done
+
+cd $OLDFOLDER
+}
+
+if [ $# -ge 1 ]; then
+  FOLDER=$1
+elif [ $# -eq 0 ]; then
+  echo "These are the tutorial folders that have links:"
+  FOLDER="$WM_PROJECT_DIR/tutorials"
+fi
+
+#echo "$FOLDER start"
+processThis $FOLDER
+
diff --git a/doc/Doxygen/openfoam-code.qhcp b/doc/Doxygen/openfoam-code.qhcp
new file mode 100644
index 0000000..9d65373
--- /dev/null
+++ b/doc/Doxygen/openfoam-code.qhcp
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<QHelpCollectionProject version="1.0">
+    <assistant>
+        <title>OpenFOAM programmer's C++ documentation</title>
+        <startPage>qthelp://org.openfoam/openfoam-code/index.html</startPage>
+        <applicationIcon>../OpenFOAMlogo.jpg</applicationIcon>
+        <enableFilterFunctionality>false</enableFilterFunctionality>
+        <enableDocumentationManager>false</enableDocumentationManager>
+        <enableAddressBar visible="true">true</enableAddressBar>
+        <cacheDirectory>OpenCFD/OpenFOAM</cacheDirectory>
+    </assistant>
+    <docFiles>
+        <register>
+            <file>openfoam-code.qch</file>
+        </register>
+    </docFiles>
+</QHelpCollectionProject>
\ No newline at end of file
diff --git a/etc/controlDict b/etc/controlDict
index 190b140..13e68eb 100644
--- a/etc/controlDict
+++ b/etc/controlDict
@@ -154,6 +154,7 @@ DebugSwitches
     MB                  0;
     MC                  0;
     MCV                 0;
+    MSwindows           0;
     MUSCL               0;
     MUSCL01             0;
     MUSCLV              0;
diff --git a/multiBuilder b/multiBuilder
new file mode 100755
index 0000000..1dc255b
--- /dev/null
+++ b/multiBuilder
@@ -0,0 +1,125 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     multiBuilder
+#
+# Description
+#     Help script for building multiple WM_OPTIONS builds sequentially. 
+#   Initially created for building mingw-w32 DP+SP + mingw-w64, including 
+#   tutorials that need cross-compiling for their applications.
+#
+#------------------------------------------------------------------------------
+
+#---------- Functions -------------
+usage() {
+    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
+    cat<<USAGE
+
+usage: ${0##*/}
+
+This will run as a scripted multi-builder of WM_OPTIONS based on each 
+bashrc-* version given. NOTE: you cannot have the OpenFOAM environment
+activated prior to executing this script!!
+
+USAGE
+    exit 1
+}
+
+#argument: bashrc file name
+buildIt()
+{
+  #make sure our logging folder is up and running
+  if [ ! -d "../buildLogs" ]; then
+    mkdir -p ../buildLogs
+  fi
+
+  (
+    . etc/$1
+
+    timeStamp=$(date +%Y-%m-%d_%H-%M)
+    logFile="../buildLogs/Allwmake_${WM_OPTIONS}_${timeStamp}.log"
+
+    echo "Building $WM_OPTIONS ..."
+    time ./Allwmake > $logFile 2>&1 && \
+    time wmake all tutorials >> $logFile 2>&1
+
+    if isMinGW; then
+      fixPatchExeNames >> $logFile 2>&1
+    fi
+
+    if [ -e "$WM_PROJECT_USER_DIR/contribsExtend" ]; then
+      time wmake all $WM_PROJECT_USER_DIR/contribsExtend >> $logFile 2>&1
+    fi
+    
+  )
+}
+
+#---------- script ----------------
+
+if [ "x$1" = "x--sourceonly" ]
+then
+    : #do nothing...
+elif [ "x$1" = "x--help" -o $# -gt 0 -o "x$WM_PROJECT_DIR" != "x" ]
+then
+    usage
+fi
+
+if [ "x$1" != "x--sourceonly" ]
+then
+
+  #build with MPICH2 ----------------
+
+  # buildIt bashrc-mingw32
+
+  buildIt bashrc-mingw-w32
+  buildIt bashrc-mingw-w32S
+  buildIt bashrc-mingw-w64
+
+  # buildIt bashrc-i586-mingw32msvc
+  # buildIt bashrc-i586-mingw32msvcS
+  # buildIt bashrc-amd64-mingw32msvc
+
+  # buildIt bashrc-i686-w64-mingw32
+  # buildIt bashrc-i686-w64-mingw32S
+  # buildIt bashrc-x86_64-w64-mingw32
+
+
+  #build with MSMPI ----------------
+  export WM_MPLIB=MSMPI
+  # buildIt bashrc-mingw32
+
+  buildIt bashrc-mingw-w32
+  buildIt bashrc-mingw-w32S
+  buildIt bashrc-mingw-w64
+
+  # buildIt bashrc-i586-mingw32msvc
+  # buildIt bashrc-i586-mingw32msvcS
+  # buildIt bashrc-amd64-mingw32msvc
+
+  # buildIt bashrc-i686-w64-mingw32
+  # buildIt bashrc-i686-w64-mingw32S
+  # buildIt bashrc-x86_64-w64-mingw32
+
+fi
diff --git a/src/Allclean b/src/Allclean
new file mode 100755
index 0000000..5bef103
--- /dev/null
+++ b/src/Allclean
@@ -0,0 +1,50 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     Allclean
+#
+# Description
+#     Try to do a proper clean up of the build folders and lnInclude folders.
+#
+#------------------------------------------------------------------------------
+
+cd ${0%/*} || exit 1    # run from this directory
+
+echo "Removing lnInclude folders..."
+find * | grep lnInclude$ | \
+while read file
+do
+  rm -rf $file
+done
+
+echo "Removing $WM_OPTIONS folders..."
+find * | grep $WM_OPTIONS$ | \
+while read file
+do
+  rm -rf $file
+done
+
+echo "Removing dependency files"
+find . -name "*.dep" | xargs rm
diff --git a/src/OSspecific/MSwindows/MSwindows.C b/src/OSspecific/MSwindows/MSwindows.C
new file mode 100644
index 0000000..8d541c2
--- /dev/null
+++ b/src/OSspecific/MSwindows/MSwindows.C
@@ -0,0 +1,1186 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Description
+    MS Windows specific functions
+
+\*---------------------------------------------------------------------------*/
+
+#include "OSspecific.H"
+#include "MSwindows.H"
+#include "foamVersion.H"
+#include "fileName.H"
+#include "fileStat.H"
+
+#include <cassert>
+#include <cstdlib>
+#include <fstream>
+
+// Windows system header files
+#include <io.h> // _close
+#include <windows.h>
+#include <signal.h>
+
+
+// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
+
+defineTypeNameAndDebug(Foam::MSwindows, 0);
+
+
+// Don't abort under windows, causes abort dialog to
+// popup. Instead just exit with exitCode.
+static
+void sigAbortHandler(int exitCode)
+{
+  ::exit(exitCode);
+}
+
+
+static
+bool installAbortHandler()
+{
+  // If it didn't succeed there's not much we can do,
+  // so don't check result.
+  ::signal(SIGABRT, &sigAbortHandler);
+  return true;
+}
+
+
+static bool const abortHandlerInstalled = installAbortHandler();
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+
+//- Get last windows api error from GetLastError
+Foam::string Foam::MSwindows::getLastError()
+{
+    // Based on an example at:
+    // http://msdn2.microsoft.com/en-us/library/ms680582(VS.85).aspx
+
+    LPVOID lpMsgBuf;
+    LPVOID lpDisplayBuf;
+    DWORD dw = GetLastError(); 
+
+    FormatMessage(
+        FORMAT_MESSAGE_ALLOCATE_BUFFER | 
+        FORMAT_MESSAGE_FROM_SYSTEM |
+        FORMAT_MESSAGE_IGNORE_INSERTS,
+        NULL,
+        dw,
+        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
+        (LPTSTR) &lpMsgBuf,
+        0, NULL );
+
+    lpDisplayBuf = LocalAlloc(LMEM_ZEROINIT, 
+        (lstrlen(static_cast<LPCTSTR>(lpMsgBuf))+40)*sizeof(TCHAR)); 
+    sprintf(static_cast<LPTSTR>(lpDisplayBuf),
+            "Error %d: %s", int(dw), static_cast<LPCTSTR>(lpMsgBuf));
+
+    const Foam::string errorMessage = static_cast<LPTSTR>(lpDisplayBuf);
+
+    LocalFree(lpMsgBuf);
+    LocalFree(lpDisplayBuf);
+
+    return errorMessage;
+}
+
+
+//-Declared here to avoid polluting MSwindows.H with windows.h
+namespace Foam
+{
+namespace MSwindows
+{
+    //- Get windows user name
+    Foam::string getUserName();
+
+    //- Remove quotes, if any, from string
+    void removeQuotes(Foam::string & arg);
+
+    //- Convert windows directory slash (back-slash) to unix (forward-slash). 
+    //- Windows is fine with unix like directory slashes.
+    //- Foam's file io (see src/OpenFOAM/db/IOstreams/Sstreams/OSwrite.C) 
+    //- uses back-slash as escape character and continuation, 
+    //- so not an option to have windows file paths with back-slashes
+    void toUnixSlash(Foam::string & arg);
+
+    //- Auto create and then delete array when this goes out of scope
+    template<class T>
+    class AutoArray
+    {
+      T* const array_;
+
+    public:
+      AutoArray(const unsigned long arrayLength);
+      ~AutoArray();
+
+      //- Access array
+      T* get();
+    }; // class AutoArray
+
+
+    //- Directory contents iterator
+    class DirectoryIterator
+    {
+      WIN32_FIND_DATA findData_;
+      HANDLE findHandle_;
+      fileName nextName_;
+      bool hasMore_;
+      
+    public:
+      DirectoryIterator(const fileName & directory);
+      ~DirectoryIterator();
+      
+      //- Initialization succeeded
+      bool isValid() const;
+
+      //- Has more?
+      bool hasNext() const;
+      
+      //- Next item
+      const fileName & next();
+    }; // class DirectoryIterator
+} // namespace MSwindows
+} // namespace Foam
+
+
+inline
+void Foam::MSwindows::removeQuotes(Foam::string & arg)
+{
+    std::size_t pos;
+
+    while (std::string::npos != (pos = arg.find('"')))
+    {
+        arg.erase(pos, 1);
+    }
+}
+
+
+inline
+void Foam::MSwindows::toUnixSlash(Foam::string & arg)
+{
+    arg.replaceAll("\\", "/");
+
+    const string UNC("//");
+
+    // Preserve UNC i.e., \\machine-name\...
+    if (0 == arg.find(UNC)) 
+    {
+        arg.replace(UNC, "\\\\");
+    }
+}
+
+
+Foam::string Foam::MSwindows::getUserName()
+{
+    const DWORD bufferSize = 256;
+    TCHAR buffer[bufferSize];
+    DWORD actualBufferSize = bufferSize;
+    Foam::string nameAsString;
+
+    bool success = ::GetUserName(buffer, &actualBufferSize);
+
+    if (success)
+    {
+        nameAsString = buffer;
+    }
+    else 
+    {
+        if (ERROR_INSUFFICIENT_BUFFER == ::GetLastError() &&
+            32768 > actualBufferSize) 
+        {
+            AutoArray<TCHAR> actualBuffer(actualBufferSize);
+            ::GetUserName(actualBuffer.get(), &actualBufferSize);
+            nameAsString = actualBuffer.get();
+        }
+    }
+
+    return nameAsString;
+}
+
+
+template<class T>
+inline
+Foam::MSwindows::AutoArray<T>::AutoArray(const unsigned long arrayLength)
+    : array_(new T[arrayLength])
+{}
+
+
+template<class T>
+inline
+Foam::MSwindows::AutoArray<T>::~AutoArray()
+{
+    delete [] array_;
+}
+
+
+template<class T>
+inline
+T* Foam::MSwindows::AutoArray<T>::get()
+{
+    return array_;
+}
+
+
+inline
+bool Foam::MSwindows::DirectoryIterator::isValid() const
+{
+    const bool valid = (INVALID_HANDLE_VALUE != findHandle_);
+    return valid;
+}
+
+    
+Foam::MSwindows::DirectoryIterator::DirectoryIterator(const fileName & directory)
+{
+    const fileName directoryContents = directory/"*";
+    findHandle_ = ::FindFirstFile(directoryContents.c_str(), &findData_);
+    hasMore_    = isValid();
+}
+        
+
+Foam::MSwindows::DirectoryIterator::~DirectoryIterator()
+{
+    if (isValid()) 
+    {
+        ::FindClose(findHandle_);
+    }
+}
+
+
+inline
+bool Foam::MSwindows::DirectoryIterator::hasNext() const
+{
+    assert(isValid());
+
+    return hasMore_;
+}
+
+
+inline
+const Foam::fileName & Foam::MSwindows::DirectoryIterator::next()
+{
+    assert(hasNext());
+
+    nextName_ = findData_.cFileName;
+    hasMore_  = ::FindNextFile(findHandle_, &findData_);
+
+    return nextName_;
+}
+
+
+pid_t Foam::pid()
+{
+#ifdef WIN32
+    const DWORD processId = ::GetCurrentProcessId();
+#elif WIN64
+    const pid_t processId = (pid_t) ::GetCurrentProcessId();
+#endif
+    return processId;
+}
+
+
+pid_t Foam::ppid()
+{
+    // No equivalent under windows.
+
+    if (MSwindows::debug)
+    {
+        Info<< "ppid not supported under MSwindows" << endl;
+    }
+
+    return 0;
+}
+
+
+pid_t Foam::pgid()
+{
+    // No equivalent under windows.
+
+    if (MSwindows::debug)
+    {
+        Info<< "pgid not supported under MSwindows" << endl;
+    }
+
+    return 0;
+}
+
+
+bool Foam::env(const word& envName)
+{
+    const DWORD actualBufferSize = 
+      ::GetEnvironmentVariable(envName.c_str(), NULL, 0);
+
+    const bool envExists = (0 < actualBufferSize);
+    return envExists;
+}
+
+
+Foam::string Foam::getEnv(const word& envName)
+{
+    Foam::string envAsString;
+
+    const DWORD actualBufferSize = 
+      ::GetEnvironmentVariable(envName.c_str(), NULL, 0);
+
+    if (0 < actualBufferSize) 
+    {
+        MSwindows::AutoArray<TCHAR> actualBuffer(actualBufferSize);
+        ::GetEnvironmentVariable(envName.c_str(),
+                                 actualBuffer.get(),
+                                 actualBufferSize);
+        envAsString = actualBuffer.get();
+        toUnixPath(envAsString);
+    }
+
+    return envAsString;
+}
+
+
+bool Foam::setEnv
+(
+    const word& envName,
+    const string& value,
+    const bool /*overwrite*/
+)
+{
+    const bool success = 
+      ::SetEnvironmentVariable(envName.c_str(), value.c_str());
+    return success;
+}
+
+
+Foam::word Foam::hostName()
+{
+    const DWORD bufferSize = MAX_COMPUTERNAME_LENGTH + 1;
+    TCHAR buffer[bufferSize];
+    DWORD actualBufferSize = bufferSize;
+
+    const bool success = 
+      ::GetComputerName(buffer, &actualBufferSize);
+    const word computerName = success ? buffer : word::null;
+    return computerName;
+}
+
+
+Foam::word Foam::userName()
+{
+    word nameAsWord = getEnv("USERNAME");
+
+    if (nameAsWord.empty()) 
+    {
+        nameAsWord = MSwindows::getUserName();
+    }
+
+    return nameAsWord;
+}
+
+
+Foam::fileName Foam::home()
+{
+    Foam::string homeDir = getEnv("HOME");
+
+    if (homeDir.empty()) 
+    {
+        homeDir = getEnv("USERPROFILE");
+    }
+
+    return homeDir;
+}
+
+
+Foam::fileName Foam::home(const word& userName)
+{
+    return home();
+}
+
+
+Foam::fileName Foam::cwd()
+{
+    Foam::string currentDirectory;
+
+    const DWORD actualBufferSize = 
+      ::GetCurrentDirectory(0, NULL);
+
+    if (0 < actualBufferSize) 
+    {
+        MSwindows::AutoArray<TCHAR> actualBuffer(actualBufferSize);
+        ::GetCurrentDirectory(actualBufferSize,
+                              actualBuffer.get());   
+        currentDirectory = actualBuffer.get();
+        MSwindows::toUnixSlash(currentDirectory);
+    }
+    else 
+    {
+        FatalErrorIn("cwd()")
+            << "Couldn't get the current working directory"
+            << exit(FatalError);
+    }
+
+    return currentDirectory;
+}
+
+
+bool Foam::chDir(const fileName& dir)
+{
+    const bool success = ::SetCurrentDirectory(dir.c_str());
+    return success; 
+}
+
+
+Foam::fileName Foam::findEtcFile(const fileName& name, bool mandatory)
+{
+    // Search user files:
+    // ~~~~~~~~~~~~~~~~~~
+    fileName searchDir = home()/".OpenFOAM";
+    if (isDir(searchDir))
+    {
+        // Check for user file in ~/.OpenFOAM/VERSION
+        fileName fullName = searchDir/FOAMversion/name;
+        if (isFile(fullName))
+        {
+            return fullName;
+        }
+
+        // Check for version-independent user file in ~/.OpenFOAM
+        fullName = searchDir/name;
+        if (isFile(fullName))
+        {
+            return fullName;
+        }
+    }
+
+
+    // Search site files:
+    // ~~~~~~~~~~~~~~~~~~
+    searchDir = getEnv("WM_PROJECT_INST_DIR");
+    if (isDir(searchDir))
+    {
+        // Check for site file in $WM_PROJECT_INST_DIR/site/VERSION
+        fileName fullName = searchDir/"site"/FOAMversion/name;
+        if (isFile(fullName))
+        {
+            return fullName;
+        }
+
+        // Check for version-independent site file in $WM_PROJECT_INST_DIR/site
+        fullName = searchDir/"site"/name;
+        if (isFile(fullName))
+        {
+            return fullName;
+        }
+    }
+
+    // Search installation files:
+    // ~~~~~~~~~~~~~~~~~~~~~~~~~~
+    searchDir = getEnv("WM_PROJECT_DIR");
+    if (isDir(searchDir))
+    {
+        // Check for shipped OpenFOAM file in $WM_PROJECT_DIR/etc
+        fileName fullName = searchDir/"etc"/name;
+        if (isFile(fullName))
+        {
+            return fullName;
+        }
+    }
+
+    // Not found
+    // abort if the file is mandatory, otherwise return null
+    if (mandatory)
+    {
+        cerr<< "--> FOAM FATAL ERROR in Foam::findEtcFile() :"
+               " could not find mandatory file\n    '"
+            << name.c_str() << "'\n\n" << std::endl;
+        ::exit(1);
+    }
+
+    // Return null-constructed fileName rather than fileName::null
+    // to avoid cyclic dependencies in the construction of globals
+    return fileName();
+}
+
+
+bool Foam::mkDir(const fileName& pathName, const mode_t mode)
+{
+    if (pathName.empty())
+    {
+        return false;
+    }
+
+
+    bool success = ::CreateDirectory(pathName.c_str(), NULL);
+
+    if (success)
+    {
+        Foam::chMod(pathName, mode);
+    }
+    else 
+    {
+        const DWORD error = ::GetLastError();
+
+        switch (error)
+        {
+            case ERROR_ALREADY_EXISTS:
+            {
+                success = true;
+                break;
+            }
+            case ERROR_PATH_NOT_FOUND:
+            {
+                // Part of the path does not exist so try to create it
+                const fileName& parentName = pathName.path();
+
+                if (parentName.size() && mkDir(parentName, mode))
+                {
+                    success = mkDir(pathName, mode);
+                }
+                
+                break;
+            }  
+        }
+
+        if (!success) 
+        {
+            FatalErrorIn("mkDir(const fileName&, mode_t)")
+              << "Couldn't create directory: " << pathName
+              << " " << MSwindows::getLastError()
+              << exit(FatalError);
+        }
+    }
+
+    return success;
+}
+
+
+// Set the file mode
+bool Foam::chMod(const fileName& name, const mode_t m)
+{
+    const int success = _chmod(name.c_str(), m);
+    return success;
+}
+
+
+// Return the file mode
+mode_t Foam::mode(const fileName& name)
+{
+    fileStat fileStatus(name);
+
+    const mode_t m = fileStatus.isValid() ?
+      fileStatus.status().st_mode : 0;
+    return m;
+}
+
+
+// Return the file type: FILE or DIRECTORY
+Foam::fileName::Type Foam::type(const fileName& name)
+{
+    fileName::Type fileType = fileName::UNDEFINED;
+    const DWORD attrs = ::GetFileAttributes(name.c_str());
+
+    if (attrs != INVALID_FILE_ATTRIBUTES) 
+    {
+        fileType = (attrs & FILE_ATTRIBUTE_DIRECTORY) ?
+	  fileName::DIRECTORY :
+	  fileName::FILE;
+    }
+
+    return fileType;
+}
+
+
+static
+bool 
+isGzFile(const Foam::fileName& name)
+{
+    Foam::string gzName(name);
+    gzName += ".gz";
+    const DWORD attrs = ::GetFileAttributes(gzName.c_str());
+    const bool success = (attrs != INVALID_FILE_ATTRIBUTES);
+
+    return success;
+}
+
+
+// Does the name exist in the filing system?
+bool Foam::exists(const fileName& name, const bool checkGzip)
+{
+    const DWORD attrs = ::GetFileAttributes(name.c_str());
+    const bool success = (attrs != INVALID_FILE_ATTRIBUTES) || 
+                         (checkGzip && isGzFile(name));
+
+    return success;
+}
+
+
+// Does the directory exist
+bool Foam::isDir(const fileName& name)
+{
+    const DWORD attrs = ::GetFileAttributes(name.c_str());
+    bool success = (attrs != INVALID_FILE_ATTRIBUTES) &&
+                   (attrs & FILE_ATTRIBUTE_DIRECTORY);
+
+    return success;
+}
+
+
+// Does the file exist
+bool Foam::isFile(const fileName& name, const bool checkGzip)
+{
+    const DWORD attrs = ::GetFileAttributes(name.c_str());
+    const bool success = ((attrs != INVALID_FILE_ATTRIBUTES) && 
+			  !(attrs & FILE_ATTRIBUTE_DIRECTORY)) || 
+                         (checkGzip && isGzFile(name));
+
+    return success;
+}
+
+
+// Return size of file
+off_t Foam::fileSize(const fileName& name)
+{
+    fileStat fileStatus(name);
+
+    const off_t fileSize = fileStatus.isValid() ?
+      fileStatus.status().st_size : -1;
+    return fileSize;
+}
+
+
+// Return time of last file modification
+time_t Foam::lastModified(const fileName& name)
+{
+    fileStat fileStatus(name);
+
+    const time_t modifiedTime = fileStatus.isValid() ?
+      fileStatus.status().st_mtime : 0;
+    return modifiedTime;
+}
+
+
+// Read a directory and return the entries as a string list
+Foam::fileNameList Foam::readDir
+(
+    const fileName& directory,
+    const fileName::Type type,
+    const bool filtergz
+)
+{
+    // Initial filename list size
+    // also used as increment if initial size found to be insufficient
+    const int maxNnames = 100;
+
+    if (MSwindows::debug)
+    {
+        Info<< "readDir(const fileName&, const fileType, const bool filtergz)"
+            << " : reading directory " << directory << endl;
+    }
+
+    // Setup empty string list MAXTVALUES long
+    fileNameList dirEntries(maxNnames);
+
+    // Temporary variables and counters
+    label nEntries = 0;
+
+    MSwindows::DirectoryIterator dirIt(directory);
+
+    if (dirIt.isValid())
+    {
+        while (dirIt.hasNext())
+        {
+            const fileName & fName = dirIt.next();
+
+            // ignore files begining with ., i.e. '.', '..' and '.*'
+            if (fName.size() > 0 && fName[size_t(0)] != '.')
+            {
+                word fileNameExt = fName.ext();
+
+                if
+                (
+                    (type == fileName::DIRECTORY)
+                 ||
+                    (
+                        type == fileName::FILE
+                        && fName[fName.size()-1] != '~'
+                        && fileNameExt != "bak"
+                        && fileNameExt != "BAK"
+                        && fileNameExt != "old"
+                        && fileNameExt != "save"
+                    )
+                )
+                {
+                    if ((directory/fName).type() == type)
+                    {
+                        if (nEntries >= dirEntries.size())
+                        {
+                            dirEntries.setSize(dirEntries.size() + maxNnames);
+                        }
+
+                        if (filtergz && fileNameExt == "gz")
+                        {
+                            dirEntries[nEntries++] = fName.lessExt();
+                        }
+                        else
+                        {
+                            dirEntries[nEntries++] = fName;
+                        }
+                    }
+                }
+            }
+        }
+    }
+    else if (MSwindows::debug)
+    {
+        Info<< "readDir(const fileName&, const fileType, "
+               "const bool filtergz) : cannot open directory "
+            << directory << endl;
+    }
+
+    // Reset the length of the entries list
+    dirEntries.setSize(nEntries);
+    
+    return dirEntries;
+}
+
+
+// Copy, recursively if necessary, the source top the destination
+bool Foam::cp(const fileName& src, const fileName& dest)
+{
+    // Make sure source exists.
+    if (!exists(src))
+    {
+        return false;
+    }
+
+    fileName destFile(dest);
+
+    // Check type of source file.
+    if (src.type() == fileName::FILE)
+    {
+        // If dest is a directory, create the destination file name.
+        if (destFile.type() == fileName::DIRECTORY)
+        {
+            destFile = destFile/src.name();
+        }
+
+        // Make sure the destination directory exists.
+        if (!isDir(destFile.path()) && !mkDir(destFile.path()))
+        {
+            return false;
+        }
+
+        // Open and check streams.
+        // Use binary mode in case we read binary.
+        // Causes windows reading to fail if we don't.
+        std::ifstream srcStream(src.c_str(), 
+                                ios_base::in|ios_base::binary);      
+        if (!srcStream) 
+        {
+            return false;
+        }
+
+        // Use binary mode in case we write binary.
+        // Causes windows reading to fail if we don't.
+        std::ofstream destStream(destFile.c_str(), 
+                                 ios_base::out|ios_base::binary);
+        if (!destStream)
+        {
+            return false;
+        }
+
+        // Copy character data.
+        char ch;
+        while (srcStream.get(ch))
+        {
+            destStream.put(ch);
+        }
+
+        // Final check.
+        if (!srcStream.eof() || !destStream)
+        {
+            return false;
+        }
+    }
+    else if (src.type() == fileName::DIRECTORY)
+    {
+        // If dest is a directory, create the destination file name.
+        if (destFile.type() == fileName::DIRECTORY)
+        {
+            destFile = destFile/src.component(src.components().size() -1);
+        }
+
+        // Make sure the destination directory extists.
+        if (!isDir(destFile) && !mkDir(destFile))
+        {
+            return false;
+        }
+
+        // Copy files
+        fileNameList contents = readDir(src, fileName::FILE, false);
+        forAll(contents, i)
+        {
+            if (MSwindows::debug)
+            {
+                Info<< "Copying : " << src/contents[i] 
+                    << " to " << destFile/contents[i] << endl;
+            }
+
+            // File to file.
+            cp(src/contents[i], destFile/contents[i]);
+        }
+
+        // Copy sub directories.
+        fileNameList subdirs = readDir(src, fileName::DIRECTORY);
+        forAll(subdirs, i)
+        {
+            if (MSwindows::debug)
+            {
+                Info<< "Copying : " << src/subdirs[i]
+                    << " to " << destFile << endl;
+            }
+
+            // Dir to Dir.
+            cp(src/subdirs[i], destFile);
+        }
+    }
+
+    return true;
+}
+
+
+// Create a softlink. destFile should not exist. Returns true if successful.
+bool Foam::ln(const fileName& src, const fileName& dest)
+{
+    // Seems that prior to Vista softlinking was poorly supported.
+    // Vista does a better job, but requires adminstrator privileges.
+    // Skip for now.
+
+    if (MSwindows::debug)
+    {
+        Info<< "MSwindows does not support ln - softlinking" << endl;
+    }
+
+    return false;
+}
+
+
+// Rename srcFile destFile
+bool Foam::mv(const fileName& srcFile, const fileName& destFile)
+{
+    if (MSwindows::debug)
+    {
+        Info<< "Move : " << srcFile << " to " << destFile << endl;
+    }
+
+    const fileName destName = 
+      ((destFile.type() == fileName::DIRECTORY)
+       && (srcFile.type() != fileName::DIRECTORY)) ?
+      destFile/srcFile.name() :
+      destFile;
+
+    const bool success = 
+      (0 == std::rename(srcFile.c_str(), destName.c_str()));
+
+    return success;
+}
+
+
+//- Rename to a corresponding backup file
+//  If the backup file already exists, attempt with "01" .. "99" index
+bool Foam::mvBak(const fileName& src, const std::string& ext)
+{
+    if (MSwindows::debug)
+    {
+        Info<< "mvBak : " << src << " to extension " << ext << endl;
+    }
+
+    if (exists(src, false))
+    {
+        const int maxIndex = 99;
+        char index[3];
+
+        for (int n = 0; n <= maxIndex; n++)
+        {
+            fileName dstName(src + "." + ext);
+            if (n)
+            {
+                sprintf(index, "%02d", n);
+                dstName += index;
+            }
+
+            // avoid overwriting existing files, except for the last
+            // possible index where we have no choice
+            if (!exists(dstName, false) || n == maxIndex)
+            {
+                return (0 == std::rename(src.c_str(), dstName.c_str()));
+            }
+
+        }
+    }
+
+    // fall-through: nothing to do
+    return false;
+}
+
+
+// Remove a file returning true if successful otherwise false
+bool Foam::rm(const fileName& file)
+{
+    if (MSwindows::debug)
+    {
+        Info<< "Removing : " << file << endl;
+    }
+
+    bool success = (0 == std::remove(file.c_str()));
+
+    // If deleting plain file name failed try with .gz
+    if (!success) 
+    {
+        const Foam::string fileGz = file + ".gz";
+        success = (0 == std::remove(fileGz.c_str()));
+    }
+
+    return success;
+}
+
+
+// Remove a dirctory and it's contents
+bool Foam::rmDir(const fileName& directory)
+{
+    if (MSwindows::debug)
+    {
+        Info<< "rmdir(const fileName&) : "
+            << "removing directory " << directory << endl;
+    }
+
+    bool success = true;
+
+    // Need to destroy DirectorIterator prior to
+    // removing directory otherwise fails on Windows XP
+    {
+      MSwindows::DirectoryIterator dirIt(directory);
+
+      while (success && dirIt.hasNext())
+      {
+          const fileName & fName = dirIt.next(); 
+
+          if (fName != "." && fName != "..")
+          {
+              fileName path = directory/fName;
+
+              if (path.type() == fileName::DIRECTORY)
+              {
+                  success = rmDir(path);
+
+                  if (!success)
+                  {
+                      WarningIn("rmdir(const fileName&)")
+                        << "failed to remove directory " << fName
+                        << " while removing directory " << directory
+                        << endl;
+                  }
+              }
+              else
+              {
+                  success = rm(path);
+
+                  if (!success)
+                  {
+                      WarningIn("rmdir(const fileName&)")
+                        << "failed to remove file " << fName
+                        << " while removing directory " << directory
+                        << endl;
+                  }
+              }
+          }
+      }
+    }
+        
+    if (success) 
+    {
+        success = ::RemoveDirectory(directory.c_str());
+
+        if (!success) 
+        {
+            WarningIn("rmdir(const fileName&)")
+                << "failed to remove directory " << directory << endl;
+        }
+    }
+
+    return success;
+}
+
+
+//- Sleep for the specified number of seconds
+unsigned int Foam::sleep(const unsigned int s)
+{
+    const DWORD milliseconds = s * 1000;
+
+    ::Sleep(milliseconds);
+
+    return 0;
+}
+
+
+void Foam::fdClose(const int fd)
+{
+    const int result = ::_close(fd);
+
+    if (0 != result)
+    {
+        FatalErrorIn
+        (
+            "Foam::fdClose(const int fd)"
+        )   << "close error on " << fd << endl
+            << abort(FatalError);    
+    }
+}
+
+
+//- Check if machine is up by pinging given port
+bool Foam::ping
+(
+    const word& destName,
+    const label destPort,
+    const label timeOut
+)
+{
+    // Appears that socket calls require adminstrator privileges.
+    // Skip for now.
+
+    if (MSwindows::debug)
+    {
+        Info<< "MSwindows does not support ping" << endl;
+    }
+
+    return false;
+}
+
+
+//- Check if machine is up by ping port 22 = ssh and 222 = rsh
+bool Foam::ping(const word& hostname, const label timeOut)
+{
+    return ping(hostname, 222, timeOut) || ping(hostname, 22, timeOut);
+}
+
+
+int Foam::system(const string& command)
+{
+    return std::system(command.c_str());
+}
+
+
+//- Open shared library
+void* Foam::openLibrary(const fileName& libName)
+{
+    //Lets check if this is a list of libraries to be loaded
+    //NOTE: should only be used for "force loading libraries"
+    if (libName.find_first_of(' ')!=Foam::string::npos)
+    {
+      void *moduleh=NULL;
+      Foam::string libsToLoad=libName;
+      libsToLoad.removeRepeated(' ');
+      libsToLoad.removeTrailing(' '); //removes spaces from both ends
+      libsToLoad += ' ';
+
+      if (MSwindows::debug)
+      {
+          Info<< "Libraries to be loaded: " <<  libsToLoad << endl;
+      }
+
+      //generate the word list
+      size_t stposstr=0, found=libsToLoad.find_first_of(' ');
+      while (found!=Foam::string::npos)
+      {
+          Foam::string libToLoad = libsToLoad.substr(stposstr,found-stposstr);
+          moduleh = openLibrary(libToLoad); //FIX: module handle is ignored and maybe it shouldn't
+          stposstr=found+1; found=libsToLoad.find_first_of(' ',stposstr);
+      }
+
+      return moduleh;
+    }
+    else
+    {
+      const char* dllExt = ".dll";
+
+      // Assume libName is of the form, lib<name>.so
+      Foam::string winLibName(libName);
+      winLibName.replace(".so", dllExt);
+      void* libHandle = ::LoadLibrary(winLibName.c_str());
+
+      if (NULL == libHandle)
+      {
+          // Assumes libName = name
+          winLibName = "lib";
+          winLibName += libName;
+          winLibName += dllExt;
+        
+          libHandle = ::LoadLibrary(winLibName.c_str());
+      }
+      
+      if (NULL == libHandle) 
+      {
+          WarningIn("openLibrary(const fileName& libName)")
+            << "LoadLibrary failed. "
+            << MSwindows::getLastError()
+            << endl;
+      }
+      
+      if (MSwindows::debug)
+      {
+          Info<< "Library " <<  libName << " loaded "
+              << (libHandle != NULL ? "with success!" : "without success.")
+              << endl;
+      }
+
+      return libHandle;
+    }
+}
+
+
+//- Close shared library
+void Foam::closeLibrary(void* const libHandle)
+{
+    const bool success = 
+      ::FreeLibrary(static_cast<HMODULE>(libHandle));
+  
+    if (!success) 
+    {
+        WarningIn("closeLibrary(void* const libHandle)")
+            << "FreeLibrary failed. " 
+            << MSwindows::getLastError()
+            << endl;
+    }
+}
+
+
+Foam::string Foam::toUnixPath(const string & path)
+{
+    string unixPath(path);
+    MSwindows::toUnixSlash(unixPath);
+    MSwindows::removeQuotes(unixPath);
+
+    return unixPath;
+}
+
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/MSwindows.H b/src/OSspecific/MSwindows/MSwindows.H
new file mode 100644
index 0000000..4fbbc47
--- /dev/null
+++ b/src/OSspecific/MSwindows/MSwindows.H
@@ -0,0 +1,66 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    MSwindows
+
+Description
+
+SourceFiles
+    MSwindows.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef MSwindows_H
+#define MSwindows_H
+
+#include "className.H"
+#include "string.H"
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace MSwindows
+{
+    //- Declare name of the class and it's debug switch
+    NamespaceName("MSwindows");
+
+    //- Get last windows api error from GetLastError
+    Foam::string getLastError();
+}
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/Make/files b/src/OSspecific/MSwindows/Make/files
new file mode 100644
index 0000000..f5c2978
--- /dev/null
+++ b/src/OSspecific/MSwindows/Make/files
@@ -0,0 +1,13 @@
+MSwindows.C
+printStack.C
+regExp.C
+signals/sigFpe.C
+signals/sigSegv.C
+signals/sigInt.C
+signals/sigQuit.C
+timer.C
+fileStat.C
+cpuTime/cpuTime.C
+clockTime/clockTime.C
+
+LIB = $(FOAM_LIBBIN)/libOSspecific
diff --git a/src/OSspecific/MSwindows/Make/options b/src/OSspecific/MSwindows/Make/options
new file mode 100644
index 0000000..731493a
--- /dev/null
+++ b/src/OSspecific/MSwindows/Make/options
@@ -0,0 +1,3 @@
+EXE_INC = -I$(WM_THIRD_PARTY_DIR)/stack_trace
+
+LIB_LIBS = -lregex -lstack_trace
diff --git a/src/OSspecific/MSwindows/clockTime/clockTime.C b/src/OSspecific/MSwindows/clockTime/clockTime.C
new file mode 100644
index 0000000..52254d2
--- /dev/null
+++ b/src/OSspecific/MSwindows/clockTime/clockTime.C
@@ -0,0 +1,88 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+\*---------------------------------------------------------------------------*/
+
+#include "clockTime.H"
+
+#include <sys/time.h>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+// * * * * * * * * * * * * * * * Static Members  * * * * * * * * * * * * * * //
+
+
+// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //
+
+void clockTime::getTime(struct timeval& t)
+{
+    gettimeofday(&t, NULL);
+}
+
+
+double clockTime::timeDifference
+(
+    const struct timeval& start,
+    const struct timeval& end
+)
+{
+    return end.tv_sec - start.tv_sec + 1E-6*(end.tv_usec - start.tv_usec);
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+clockTime::clockTime()
+{
+    getTime(startTime_);
+    lastTime_ = startTime_;
+    newTime_ = startTime_;
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+double clockTime::elapsedTime() const
+{
+    getTime(newTime_);
+    return timeDifference(startTime_, newTime_);
+}
+
+
+double clockTime::timeIncrement() const
+{
+    lastTime_ = newTime_;
+    getTime(newTime_);
+    return timeDifference(lastTime_, newTime_);
+}
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/clockTime/clockTime.H b/src/OSspecific/MSwindows/clockTime/clockTime.H
new file mode 100644
index 0000000..4e3c32d
--- /dev/null
+++ b/src/OSspecific/MSwindows/clockTime/clockTime.H
@@ -0,0 +1,96 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    clockTime
+
+Description
+    Starts timing (using rtc) and returns elapsed time from start. Better
+    resolution (2uSec instead of ~20mSec) than cpuTime.
+
+SourceFiles
+    clockTime.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef clockTime_H
+#define clockTime_H
+
+#include <winsock2.h> // timeval definition
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class clockTime Declaration
+\*---------------------------------------------------------------------------*/
+
+class clockTime
+{
+    // Private data
+
+        struct timeval startTime_;
+        mutable struct timeval lastTime_;
+        mutable struct timeval newTime_;
+
+        static void getTime(struct timeval& t);
+
+        static double timeDifference
+        (
+            const struct timeval& start,
+            const struct timeval& end
+        );
+
+
+public:
+
+    // Constructors
+
+        //- Construct from components
+        clockTime();
+
+
+    // Member Functions
+
+        // Access
+
+            //- Returns CPU time from start of run
+            double elapsedTime() const;
+
+            //- Returns CPU time from last call of clockTimeIncrement()
+            double timeIncrement() const;
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/cpuTime/cpuTime.C b/src/OSspecific/MSwindows/cpuTime/cpuTime.C
new file mode 100644
index 0000000..bafec38
--- /dev/null
+++ b/src/OSspecific/MSwindows/cpuTime/cpuTime.C
@@ -0,0 +1,93 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Description
+    Starts timing CPU usage and return elapsed time from start.
+
+\*---------------------------------------------------------------------------*/
+
+#include "cpuTime.H"
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+
+// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //
+
+inline
+void cpuTime::getTime(std::clock_t& t)
+{
+    t = std::clock();
+}
+
+
+inline
+double cpuTime::timeDifference
+(
+    const std::clock_t& start,
+    const std::clock_t& end
+)
+{
+    const double difference = std::difftime(end, start)/CLOCKS_PER_SEC;
+    return difference;
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+cpuTime::cpuTime()
+{
+    getTime(startTime_);
+    lastTime_ = startTime_;
+    newTime_ = startTime_;
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+double cpuTime::elapsedCpuTime() const
+{
+    getTime(newTime_);
+    const double elapsed = timeDifference(startTime_, newTime_);
+    return elapsed;
+}
+
+
+double cpuTime::cpuTimeIncrement() const
+{
+    lastTime_ = newTime_;
+    getTime(newTime_);
+    const double increment = timeDifference(lastTime_, newTime_);
+    return increment;
+}
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/cpuTime/cpuTime.H b/src/OSspecific/MSwindows/cpuTime/cpuTime.H
new file mode 100644
index 0000000..950f9ce
--- /dev/null
+++ b/src/OSspecific/MSwindows/cpuTime/cpuTime.H
@@ -0,0 +1,95 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    cpuTime
+
+Description
+    Starts timing CPU usage and return elapsed time from start.
+
+SourceFiles
+    cpuTime.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef cpuTime_H
+#define cpuTime_H
+
+#include <ctime>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class cpuTime Declaration
+\*---------------------------------------------------------------------------*/
+
+class cpuTime
+{
+    // Private data
+
+        std::clock_t startTime_;
+        mutable std::clock_t lastTime_;
+        mutable std::clock_t newTime_;
+
+        static void getTime(std::clock_t& t);
+
+        static double timeDifference
+        (
+            const std::clock_t& start,
+            const std::clock_t& end
+        );
+
+
+public:
+
+    // Constructors
+
+        //- Construct from components
+        cpuTime();
+
+
+    // Member Functions
+
+        // Access
+
+            //- Returns CPU time from start of run
+            double elapsedCpuTime() const;
+
+            //- Returns CPU time from last call of cpuTimeIncrement()
+            double cpuTimeIncrement() const;
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/fileStat.C b/src/OSspecific/MSwindows/fileStat.C
new file mode 100644
index 0000000..4b21ff1
--- /dev/null
+++ b/src/OSspecific/MSwindows/fileStat.C
@@ -0,0 +1,206 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Description
+    Wrapper for stat() system call.
+
+\*---------------------------------------------------------------------------*/
+
+#include "fileStat.H"
+#include "IOstreams.H"
+#include "timer.H"
+
+#include <unistd.h>
+
+
+
+#undef major
+#undef minor
+#undef makedev
+
+# define major(dev) ((int)(((dev) >> 8) & 0xff))
+# define minor(dev) ((int)((dev) & 0xff))
+# define makedev(major, minor) ((((unsigned int) (major)) << 8) \
+				| ((unsigned int) (minor)))
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+// Construct null
+fileStat::fileStat()
+:
+    isValid_(false)
+{}
+
+
+// Construct from components
+fileStat::fileStat(const fileName& fName, const unsigned int maxTime)
+{
+    // Work on volatile
+    volatile bool locIsValid = false;
+
+    timer myTimer(maxTime);
+
+    if (!timedOut(myTimer))
+    {
+        if (::stat(fName.c_str(), &status_) != 0)
+        {
+            locIsValid = false;
+        }
+        else
+        {
+            locIsValid = true;
+        }
+    }
+
+    // Copy into (non-volatile, possible register based) member var
+    isValid_ = locIsValid;
+}
+
+
+// Construct from Istream.
+fileStat::fileStat(Istream& is)
+{
+    is >> *this;
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+// compare two fileStates for same device
+bool fileStat::sameDevice(const fileStat& stat2) const
+{
+    return 
+        isValid_
+     && (
+            major(status_.st_dev) == major(stat2.status().st_dev)
+         && minor(status_.st_dev) == minor(stat2.status().st_dev)
+        );
+}
+
+// compare two fileStates for same Inode
+bool fileStat::sameINode(const fileStat& stat2) const
+{
+    return isValid_ && (status_.st_ino == stat2.status().st_ino);
+}
+
+// compare state against inode
+bool fileStat::sameINode(const label iNode) const
+{
+    return isValid_ && (status_.st_ino == ino_t(iNode));
+}
+
+
+// * * * * * * * * * * * * * * * Friend Operators  * * * * * * * * * * * * * //
+
+// Input in list syntax
+Istream& operator>>(Istream& is, fileStat& fStat)
+{
+    // Read beginning of machine info list
+    is.readBegin("fileStat");
+
+    label 
+        devMaj, devMin,
+        ino, mode, uid, gid,
+        rdevMaj, rdevMin,
+        size, atime, mtime, ctime;
+
+    is  >> fStat.isValid_
+        >> devMaj
+        >> devMin
+        >> ino
+        >> mode
+        >> uid
+        >> gid
+        >> rdevMaj
+        >> rdevMin
+        >> size
+        >> atime
+        >> mtime
+        >> ctime;
+
+    dev_t st_dev = makedev(devMaj, devMin);
+    fStat.status_.st_dev = st_dev;
+
+    fStat.status_.st_ino = ino;
+    fStat.status_.st_mode = mode;
+    fStat.status_.st_uid = uid;
+    fStat.status_.st_gid = gid;
+
+    dev_t st_rdev = makedev(rdevMaj, rdevMin);
+    fStat.status_.st_rdev = st_rdev;
+
+    fStat.status_.st_size = size;
+    fStat.status_.st_atime = atime;
+    fStat.status_.st_mtime = mtime;
+    fStat.status_.st_ctime = ctime;
+
+    // Read end of machine info list
+    is.readEnd("fileStat");
+
+    // Check state of Istream
+    is.check("Istream& operator>>(Istream&, fileStat&)");
+
+    return is;
+}
+
+
+// Output in list syntax
+Ostream& operator<<(Ostream& os, const fileStat& fStat)
+{
+    //Set precision so 32bit unsigned int can be printed
+//    int oldPrecision = os.precision();
+    int oldPrecision = 0;
+    os.precision(10);
+
+    os  << token::BEGIN_LIST << fStat.isValid_
+        << token::SPACE << label(major(fStat.status_.st_dev))
+        << token::SPACE << label(minor(fStat.status_.st_dev))
+        << token::SPACE << label(fStat.status_.st_ino)
+        << token::SPACE << label(fStat.status_.st_mode)
+        << token::SPACE << label(fStat.status_.st_uid)
+        << token::SPACE << label(fStat.status_.st_gid)
+        << token::SPACE << label(major(fStat.status_.st_rdev))
+        << token::SPACE << label(minor(fStat.status_.st_rdev))
+        << token::SPACE << label(fStat.status_.st_size)
+        << token::SPACE << label(fStat.status_.st_atime)
+        << token::SPACE << label(fStat.status_.st_mtime)
+        << token::SPACE << label(fStat.status_.st_ctime)
+        << token::END_LIST;
+
+    os.precision(oldPrecision);
+    return os;
+}
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/fileStat.H b/src/OSspecific/MSwindows/fileStat.H
new file mode 100644
index 0000000..d543503
--- /dev/null
+++ b/src/OSspecific/MSwindows/fileStat.H
@@ -0,0 +1,125 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    fileStat
+
+Description
+    Wrapper for stat() system call.
+
+    WARNING: on Linux (an maybe on others) a stat() of an nfs mounted (remote)
+    file does never timeout and cannot be interrupted! So e.g. Foam::ping first
+    and hope nfs is running.
+
+SourceFiles
+    fileStat.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef fileStat_H
+#define fileStat_H
+
+#include <sys/stat.h>
+#include <sys/types.h>
+
+#include "label.H"
+#include "fileName.H"
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class fileStat Declaration
+\*---------------------------------------------------------------------------*/
+
+class fileStat
+{
+    // Private data
+
+        struct stat status_;
+
+        bool isValid_;
+
+
+public:
+
+    // Constructors
+
+        //- Empty constructor
+        fileStat();
+
+        //- Construct from components
+        fileStat(const fileName& fName, const unsigned int maxTime=0);
+
+        //- Construct from Istream
+        fileStat(Istream&);
+
+
+    // Member Functions
+
+        // Access
+
+            //- Raw status
+            const struct stat& status() const
+            {
+                return status_;
+            }
+
+            //- Did constructor fail
+            bool isValid() const
+            {
+                return isValid_;
+            }
+
+
+        // Check
+
+            //- compare two fileStats for same device
+            bool sameDevice(const fileStat& stat2) const;
+
+            //- compare two fileStats for same Inode
+            bool sameINode(const fileStat& stat2) const;
+
+            //- compare state against inode
+            bool sameINode(const label iNode) const;
+
+
+    // IOstream Operators
+
+        friend Istream& operator>>(Istream&, fileStat&);
+        friend Ostream& operator<<(Ostream&, const fileStat&);
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/printStack.C b/src/OSspecific/MSwindows/printStack.C
new file mode 100644
index 0000000..0fbe6c1
--- /dev/null
+++ b/src/OSspecific/MSwindows/printStack.C
@@ -0,0 +1,55 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+\*---------------------------------------------------------------------------*/
+
+#include "error.H"
+#include "stack_trace.h"
+#include <sstream>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+void Foam::error::printStack(Ostream& os)
+{
+  std::stringstream callstacktext(std::stringstream::in | std::stringstream::out);
+  StackTrace *traceUs = new StackTrace();
+
+  if(traceUs!=NULL)
+  {
+    traceUs->OutputToStream(&callstacktext);
+
+    delete traceUs;
+    traceUs=NULL;
+    
+    os << callstacktext.str().data();
+  }
+  else
+  {
+    os << "We're sorry, but the application crashed and stack tracing isn't working."
+       << endl;
+  }
+}
+
+// ************************************************************************* //
+
diff --git a/src/OSspecific/MSwindows/regExp.C b/src/OSspecific/MSwindows/regExp.C
new file mode 100644
index 0000000..44b68eb
--- /dev/null
+++ b/src/OSspecific/MSwindows/regExp.C
@@ -0,0 +1,216 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+\*---------------------------------------------------------------------------*/
+
+#include <sys/types.h>
+
+#include "regExp.H"
+#include "label.H"
+#include "string.H"
+#include "List.H"
+#include "IOstreams.H"
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+Foam::regExp::regExp()
+:
+    preg_(0)
+{}
+
+
+Foam::regExp::regExp(const char* pattern, const bool ignoreCase)
+:
+    preg_(0)
+{
+    set(pattern, ignoreCase);
+}
+
+
+Foam::regExp::regExp(const std::string& pattern, const bool ignoreCase)
+:
+    preg_(0)
+{
+    set(pattern.c_str(), ignoreCase);
+}
+
+
+// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //
+
+Foam::regExp::~regExp()
+{
+    clear();
+}
+
+
+// * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * * //
+
+void Foam::regExp::set(const char* pattern, const bool ignoreCase) const
+{
+    clear();
+
+    // avoid NULL pointer and zero-length patterns
+    if (pattern && *pattern)
+    {
+        preg_ = new regex_t;
+
+        int cflags = REG_EXTENDED;
+        if (ignoreCase)
+        {
+            cflags |= REG_ICASE;
+        }
+
+        if (regcomp(preg_, pattern, cflags) != 0)
+        {
+            FatalErrorIn
+            (
+                "regExp::set(const char*)"
+            )   << "Failed to compile regular expression '" << pattern << "'"
+                << exit(FatalError);
+        }
+    }
+}
+
+
+void Foam::regExp::set(const std::string& pattern, const bool ignoreCase) const
+{
+    return set(pattern.c_str(), ignoreCase);
+}
+
+
+bool Foam::regExp::clear() const
+{
+    if (preg_)
+    {
+        regfree(preg_);
+        delete preg_;
+        preg_ = 0;
+
+        return true;
+    }
+
+    return false;
+}
+
+
+std::string::size_type Foam::regExp::find(const std::string& str) const
+{
+    if (preg_ && str.size())
+    {
+        size_t nmatch = 1;
+        regmatch_t pmatch[1];
+
+        if (regexec(preg_, str.c_str(), nmatch, pmatch, 0) == 0)
+        {
+            return pmatch[0].rm_so;
+        }
+    }
+
+    return string::npos;
+}
+
+
+bool Foam::regExp::match(const std::string& str) const
+{
+    if (preg_ && str.size())
+    {
+        size_t nmatch = 1;
+        regmatch_t pmatch[1];
+
+        // also verify that the entire string was matched
+        // pmatch[0] is the entire match
+        if
+        (
+            regexec(preg_, str.c_str(), nmatch, pmatch, 0) == 0
+         && (pmatch[0].rm_so == 0 && pmatch[0].rm_eo == label(str.size()))
+        )
+        {
+            return true;
+        }
+    }
+
+    return false;
+}
+
+
+bool Foam::regExp::match(const string& str, List<string>& groups) const
+{
+    if (preg_ && str.size())
+    {
+        size_t nmatch = ngroups() + 1;
+        regmatch_t pmatch[nmatch];
+
+        // also verify that the entire string was matched
+        // pmatch[0] is the entire match
+        // pmatch[1..] are the (...) sub-groups
+        if
+        (
+            regexec(preg_, str.c_str(), nmatch, pmatch, 0) == 0
+         && (pmatch[0].rm_so == 0 && pmatch[0].rm_eo == label(str.size()))
+        )
+        {
+            groups.setSize(ngroups());
+            label groupI = 0;
+
+            for (size_t matchI = 1; matchI < nmatch; matchI++)
+            {
+                if (pmatch[matchI].rm_so != -1 && pmatch[matchI].rm_eo != -1)
+                {
+                    groups[groupI] = str.substr
+                    (
+                        pmatch[matchI].rm_so,
+                        pmatch[matchI].rm_eo - pmatch[matchI].rm_so
+                    );
+                }
+                else
+                {
+                    groups[groupI].clear();
+                }
+                groupI++;
+            }
+
+            return true;
+        }
+    }
+
+    groups.clear();
+    return false;
+}
+
+
+// * * * * * * * * * * * * * * Member Operators  * * * * * * * * * * * * * * //
+
+void Foam::regExp::operator=(const char* pat)
+{
+    set(pat);
+}
+
+
+void Foam::regExp::operator=(const std::string& pat)
+{
+    set(pat);
+}
+
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/regExp.H b/src/OSspecific/MSwindows/regExp.H
new file mode 100644
index 0000000..5980408
--- /dev/null
+++ b/src/OSspecific/MSwindows/regExp.H
@@ -0,0 +1,190 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2009 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    Foam::regExp
+
+Description
+    Wrapper around POSIX extended regular expressions.
+
+SeeAlso
+    The manpage regex(7) for more information about POSIX regular expressions.
+    These differ somewhat from @c Perl and @c sed regular expressions.
+
+SourceFiles
+    regExp.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef regExp_H
+#define regExp_H
+
+#include <regex.h>
+#include <string>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+// Forward declaration of classes
+class string;
+template<class T> class List;
+
+/*---------------------------------------------------------------------------*\
+                           Class regExp Declaration
+\*---------------------------------------------------------------------------*/
+
+class regExp
+{
+    // Private data
+
+        //- Precompiled regular expression
+        mutable regex_t* preg_;
+
+    // Private member functions
+
+        //- Disallow default bitwise copy construct
+        regExp(const regExp&);
+
+        //- Disallow default bitwise assignment
+        void operator=(const regExp&);
+
+public:
+
+        //- Is character a regular expression meta-character?
+        //  any character: '.' \n
+        //  quantifiers: '*', '+', '?' \n
+        //  grouping: '(', '|', ')' \n
+        //  range: '[', ']' \n
+        //
+        //  Don't bother checking for '{digit}' bounds
+        inline static bool meta(char c)
+        {
+            return
+            (
+                (c == '.')                           // any character
+             || (c == '*' || c == '+' || c == '?')   // quantifiers
+             || (c == '(' || c == ')' || c == '|')   // grouping/branching
+             || (c == '[' || c == ']')               // range
+            );
+        }
+
+
+    // Constructors
+
+        //- Construct null
+        regExp();
+
+        //- Construct from character array, optionally ignoring case
+        regExp(const char*, const bool ignoreCase=false);
+
+        //- Construct from std::string (or string), optionally ignoring case
+        regExp(const std::string&, const bool ignoreCase=false);
+
+    // Destructor
+
+        ~regExp();
+
+
+    // Member functions
+
+    //- Access
+
+        //- Return true if a precompiled expression does not exist
+        inline bool empty() const
+        {
+            return !preg_;
+        }
+
+        //- Does a precompiled expression exist?
+        inline bool exists() const
+        {
+            return preg_ ? true : false;
+        }
+
+        //- Return the number of (groups)
+        inline int ngroups() const
+        {
+            return preg_ ? preg_->re_nsub : 0;
+        }
+
+
+    //- Editing
+
+        //- Compile pattern into a regular expression, optionally ignoring case
+        void set(const char*, const bool ignoreCase=false) const;
+
+        //- Compile pattern into a regular expression, optionally ignoring case
+        void set(const std::string&, const bool ignoreCase=false) const;
+
+
+        //- Release precompiled expression.
+        //  Returns true if precompiled expression existed before clear
+        bool clear() const;
+
+
+    //- Searching
+
+        //- Find position within string.
+        //  Returns the index where it begins or string::npos if not found
+        std::string::size_type find(const std::string& str) const;
+
+        //- Return true if it matches the entire string
+        //  The begin-of-line (^) and end-of-line ($) anchors are implicit
+        bool match(const std::string&) const;
+
+        //- Return true if it matches and sets the sub-groups matched
+        //  The begin-of-line (^) and end-of-line ($) anchors are implicit
+        bool match(const string&, List<string>& groups) const;
+
+        //- Return true if the regex was found in within string
+        bool search(const std::string& str) const
+        {
+            return std::string::npos != find(str);
+        }
+
+
+    // Member Operators
+
+        //- Assign and compile pattern from a character array
+        //  Always case sensitive
+        void operator=(const char*);
+
+        //- Assign and compile pattern from string
+        //  Always case sensitive
+        void operator=(const std::string&);
+
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/res/OFversion_template.rc b/src/OSspecific/MSwindows/res/OFversion_template.rc
new file mode 100644
index 0000000..b3a8835
--- /dev/null
+++ b/src/OSspecific/MSwindows/res/OFversion_template.rc
@@ -0,0 +1,31 @@
+#define IDR_VERSION1 1
+
+IDR_VERSION1 VERSIONINFO
+FILEVERSION 1,7,0,0
+PRODUCTVERSION 1,7,0,0
+FILEOS 0x00000000
+FILETYPE 0x00000000
+BEGIN
+  BLOCK "StringFileInfo"
+  BEGIN
+    BLOCK "FFFF0000"
+    BEGIN
+      VALUE "FileVersion", "2.0.0.0\0"
+      VALUE "ProductVersion", "2.0.0.0\0"
+      VALUE "FileDescription", "Unofficial build of OpenFOAM: The Open Source CFD Toolbox\n\
+OpenFOAM TM 1991-2011 OpenCFD Ltd.\n\
+Unofficial Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt\n\
+Based on Windows porting (1.6.x v11) by Symscape: http://www.symscape.com\0"
+      VALUE "LegalCopyright", "OpenFOAM is Copyright (C) 1991-2011 OpenCFD Ltd.\0"
+      VALUE "LegalTrademarks", "OpenFOAM is Copyright (C) 1991-2011 OpenCFD Ltd.\0"
+      VALUE "ProductName", "OpenFOAM (unofficial build)\0"
+      VALUE "InternalName", "tmpintname\0"
+      VALUE "OriginalFilename", "tmporigname\0"
+    END
+  END
+  BLOCK "VarFileInfo"
+  BEGIN
+    VALUE "Translation", 0xFFFF, 0x0000
+  END
+END
+
diff --git a/src/OSspecific/MSwindows/signals/sigFpe.C b/src/OSspecific/MSwindows/signals/sigFpe.C
new file mode 100644
index 0000000..f4b046b
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigFpe.C
@@ -0,0 +1,172 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigFpe
+
+\*---------------------------------------------------------------------------*/
+
+#include "error.H"
+#include "sigFpe.H"
+
+#include "JobInfo.H"
+#include "OSspecific.H"
+#include "IOstreams.H"
+
+#include <float.h> // *fp functions
+
+
+// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
+
+__p_sig_fn_t Foam::sigFpe::oldAction_ = SIG_DFL;
+
+static unsigned int fpOld_ = 0;
+
+
+static void clearFpe()
+{
+    _clearfp ();
+    _controlfp (fpOld_, 0xFFFFFFFF);
+}
+
+
+void Foam::sigFpe::sigFpeHandler(int)
+{
+    const __p_sig_fn_t success = ::signal(SIGFPE, oldAction_);
+
+    // Reset old handling
+    if (SIG_ERR == success)
+    {
+        FatalErrorIn
+        (
+            "Foam::sigSegv::sigFpeHandler()"
+        )   << "Cannot reset SIGFPE trapping"
+            << abort(FatalError);    
+    }
+
+    // Update jobInfo file
+    jobInfo.signalEnd();
+
+    error::printStack(Perr);
+
+    clearFpe();
+
+    // Throw signal (to old handler)
+    ::raise(SIGFPE);
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+Foam::sigFpe::sigFpe()
+{
+    oldAction_ = SIG_DFL;
+}
+
+
+// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //
+
+Foam::sigFpe::~sigFpe()
+{
+    if (env("FOAM_SIGFPE"))
+    {
+        clearFpe();
+
+        // Reset signal
+        const __p_sig_fn_t success = ::signal(SIGFPE, oldAction_);
+        oldAction_ = SIG_DFL;
+
+        if (SIG_ERR == success)
+        {
+            FatalErrorIn
+            (
+                "Foam::sigFpe::~sigFpe()"
+            )   << "Cannot reset SIGFPE trapping"
+                << abort(FatalError);    
+        }
+    }
+
+    if (env("FOAM_SETNAN"))
+    {
+        WarningIn("Foam::sigFpe::~sigFpe()")
+            << "FOAM_SETNAN not supported under MSwindows "
+            << endl;
+    }
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+void Foam::sigFpe::set(const bool verbose)
+{
+    if (SIG_DFL != oldAction_)
+    {
+        FatalErrorIn
+        (
+            "Foam::sigFpe::set()"
+        )   << "Cannot call sigFpe::set() more than once"
+            << abort(FatalError);
+    }
+
+    if (env("FOAM_SIGFPE"))
+    {
+        if (verbose)
+        {
+            Info<< "SigFpe : Enabling floating point exception trapping"
+                << " (FOAM_SIGFPE)." << endl;
+        }
+
+        fpOld_ = _controlfp(0, 0);
+        const unsigned int fpNew = 
+          fpOld_ & ~(_EM_ZERODIVIDE | _EM_INVALID | _EM_OVERFLOW);
+        _controlfp(fpNew, _MCW_EM);
+
+        oldAction_ = ::signal(SIGFPE, &Foam::sigFpe::sigFpeHandler);        
+
+        if (SIG_ERR == oldAction_)
+        {
+            oldAction_ = SIG_DFL;
+
+            FatalErrorIn
+            (
+                "Foam::sigFpe::set()"
+            )   << "Cannot set SIGFPE trapping"
+                << abort(FatalError);    
+        }
+    }
+
+
+    if (env("FOAM_SETNAN"))
+    {
+        if (verbose)
+        {
+            WarningIn("Foam::sigFpe::set()")
+              << "FOAM_SETNAN not supported under MSwindows "
+              << endl;
+        }
+    }
+}
+
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigFpe.H b/src/OSspecific/MSwindows/signals/sigFpe.H
new file mode 100644
index 0000000..e012315
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigFpe.H
@@ -0,0 +1,98 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigFpe
+
+Description
+    Sets up trapping for floating point exceptions (sigfpe).
+
+    Controlled by two env vars:
+    FOAM_SIGFPE : exception trapping
+    FOAM_SETNAN : initialization of all malloced memory to NaN. If also
+                  FOAM_SIGFPE set this will cause usage of uninitialized scalars
+                  to trigger an abort.
+
+SourceFiles
+    sigFpe.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef sigFpe_H
+#define sigFpe_H
+
+#include "OSspecific.H"
+
+#include <signal.h>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class sigFpe Declaration
+\*---------------------------------------------------------------------------*/
+
+class sigFpe
+{
+    // Private data
+
+        //- Saved old signal trapping setting
+        static __p_sig_fn_t oldAction_;
+
+
+    // Static data members
+
+        //- Handler for caught signals
+        static void sigFpeHandler(int);
+
+public:
+
+
+    // Constructors
+
+        sigFpe();
+
+
+    // Destructor
+
+        ~sigFpe();
+
+
+    // Member functions
+
+        void set(const bool verbose);
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigInt.C b/src/OSspecific/MSwindows/signals/sigInt.C
new file mode 100644
index 0000000..801d451
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigInt.C
@@ -0,0 +1,118 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigInt
+
+\*---------------------------------------------------------------------------*/
+
+#include "error.H"
+#include "sigInt.H"
+#include "JobInfo.H"
+#include "IOstreams.H"
+
+// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
+
+__p_sig_fn_t Foam::sigInt::oldAction_ = SIG_DFL;
+
+// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //
+
+void Foam::sigInt::sigIntHandler(int)
+{
+    // Reset old handling
+    const __p_sig_fn_t success = ::signal(SIGINT, oldAction_);
+
+    if (SIG_ERR == success)
+    {
+        FatalErrorIn
+        (
+            "Foam::sigInt::sigIntHandler()"
+        )   << "Cannot reset SIGINT trapping"
+            << abort(FatalError);
+    }
+
+    // Update jobInfo file
+    jobInfo.signalEnd();
+
+    // Throw signal (to old handler)
+    ::raise(SIGINT);
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+Foam::sigInt::sigInt()
+{
+    oldAction_ = SIG_DFL;
+}
+
+
+// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //
+
+Foam::sigInt::~sigInt()
+{
+    // Reset old handling
+    const __p_sig_fn_t success = ::signal(SIGINT, oldAction_);
+    oldAction_ = SIG_DFL;
+
+    if (SIG_ERR == success)
+    {
+         FatalErrorIn
+        (
+            "Foam::sigInt::~sigInt()"
+        )   << "Cannot reset SIGINT trapping"
+            << abort(FatalError);    
+    }
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+void Foam::sigInt::set(const bool verbose)
+{
+    if (SIG_DFL != oldAction_)
+    {
+        FatalErrorIn
+        (
+            "Foam::sigInt::set()"
+        )   << "Cannot call sigInt::set() more than once"
+            << abort(FatalError);
+    }
+
+    oldAction_ = ::signal(SIGINT, &Foam::sigInt::sigIntHandler);        
+
+    if (SIG_ERR == oldAction_)
+    {
+        oldAction_ = SIG_DFL;
+ 
+        FatalErrorIn
+        (
+            "Foam::sigInt::set()"
+        )   << "Cannot set SIGINT trapping"
+            << abort(FatalError);    
+    }
+}
+
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigInt.H b/src/OSspecific/MSwindows/signals/sigInt.H
new file mode 100644
index 0000000..c959e45
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigInt.H
@@ -0,0 +1,85 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigInt
+
+Description
+    Signal handler for INT interupt.  The standard interupt handler is
+    overridden to ensure that the runningJob file is removed.
+
+SourceFiles
+    sigInt.C
+
+\*---------------------------------------------------------------------------*/
+
+#include "OSspecific.H"
+
+#include <signal.h>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class sigInt Declaration
+\*---------------------------------------------------------------------------*/
+
+class sigInt
+{
+    // Private data
+
+        //- Saved old signal trapping setting
+        static __p_sig_fn_t oldAction_;
+
+
+    // Private Member Functions
+
+        static void sigIntHandler(int);
+
+
+public:
+
+    // Constructors
+
+        sigInt();
+
+
+    // Destructor
+
+        ~sigInt();
+
+
+    // Member functions
+
+        void set(const bool verbose);
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigQuit.C b/src/OSspecific/MSwindows/signals/sigQuit.C
new file mode 100644
index 0000000..b88fed8
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigQuit.C
@@ -0,0 +1,117 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigQuit
+
+\*---------------------------------------------------------------------------*/
+
+#include "error.H"
+#include "sigQuit.H"
+#include "JobInfo.H"
+#include "IOstreams.H"
+
+// SIGBREAK is best alternative to SIGQUIT on windows
+
+// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
+
+__p_sig_fn_t Foam::sigQuit::oldAction_ = SIG_DFL;
+
+// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //
+
+void Foam::sigQuit::sigQuitHandler(int)
+{
+    // Reset old handling
+    const __p_sig_fn_t success = ::signal(SIGBREAK, oldAction_);
+
+    if (SIG_ERR == success)
+    {
+        FatalErrorIn("Foam::sigQuit::sigQuitHandler()")   
+            << "Cannot reset SIGBREAK trapping"
+            << abort(FatalError);    
+    }
+
+    // Update jobInfo file
+    jobInfo.signalEnd();
+
+    error::printStack(Perr);
+
+    // Throw signal (to old handler)
+    ::raise(SIGBREAK);
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+Foam::sigQuit::sigQuit()
+{
+    oldAction_ = SIG_DFL;
+}
+
+
+// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //
+
+Foam::sigQuit::~sigQuit()
+{
+    // Reset old handling
+    if (SIG_DFL != oldAction_)
+    {
+        const __p_sig_fn_t success = ::signal(SIGBREAK, oldAction_);
+        oldAction_ = SIG_DFL;
+
+        if (SIG_ERR == success)
+        {
+            FatalErrorIn("Foam::sigQuit::~sigQuit()")
+                << "Cannot reset SIGBREAK trapping"
+                << abort(FatalError);    
+        }
+    }
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+void Foam::sigQuit::set(const bool verbose)
+{
+    if (SIG_DFL != oldAction_)
+    {
+        FatalErrorIn("Foam::sigQuit::set()")   
+            << "Cannot call sigQuit::set() more than once"
+            << abort(FatalError);
+    }
+
+    oldAction_ = ::signal(SIGBREAK, &Foam::sigQuit::sigQuitHandler);        
+
+    if (SIG_ERR == oldAction_)
+    {
+        oldAction_ = SIG_DFL;
+
+        // Not a FatalErrorIn or abort because fails under wine
+        WarningIn("Foam::sigQuit::set()")
+            << "Cannot set SIGBREAK trapping" << endl;
+    }
+}
+
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigQuit.H b/src/OSspecific/MSwindows/signals/sigQuit.H
new file mode 100644
index 0000000..add3fad
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigQuit.H
@@ -0,0 +1,85 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigQuit
+
+Description
+    Signal handler for QUIT interupt.  The standard interupt handler is
+    overridden to ensure that the runningJob file is removed.
+
+SourceFiles
+    sigQuit.C
+
+\*---------------------------------------------------------------------------*/
+
+#include "OSspecific.H"
+
+#include <signal.h>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class sigQuit Declaration
+\*---------------------------------------------------------------------------*/
+
+class sigQuit
+{
+    // Private data
+
+        //- Saved old signal trapping setting
+        static __p_sig_fn_t oldAction_;
+
+
+    // Private Member Functions
+
+        static void sigQuitHandler(int);
+
+
+public:
+
+    // Constructors
+
+        sigQuit();
+
+
+    // Destructor
+
+        ~sigQuit();
+
+
+    // Member functions
+
+        void set(const bool verbose);
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigSegv.C b/src/OSspecific/MSwindows/signals/sigSegv.C
new file mode 100644
index 0000000..1a5e34e
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigSegv.C
@@ -0,0 +1,120 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigSegv
+
+\*---------------------------------------------------------------------------*/
+
+#include "error.H"
+#include "sigSegv.H"
+#include "JobInfo.H"
+#include "IOstreams.H"
+
+// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
+
+__p_sig_fn_t Foam::sigSegv::oldAction_ = SIG_DFL;
+
+// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //
+
+void Foam::sigSegv::sigSegvHandler(int)
+{
+    // Reset old handling
+    const __p_sig_fn_t success = ::signal(SIGSEGV, oldAction_);
+
+    if (SIG_ERR == success)
+    {
+         FatalErrorIn
+        (
+            "Foam::sigSegv::sigSegvHandler()"
+        )   << "Cannot reset SIGSEGV trapping"
+            << abort(FatalError);    
+    }
+
+    // Update jobInfo file
+    jobInfo.signalEnd();
+
+    error::printStack(Perr);
+
+    // Throw signal (to old handler)
+    ::raise(SIGSEGV);
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+Foam::sigSegv::sigSegv()
+{
+    oldAction_ = SIG_DFL;
+}
+
+
+// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //
+
+Foam::sigSegv::~sigSegv()
+{
+    // Reset old handling
+    const __p_sig_fn_t success = ::signal(SIGSEGV, oldAction_);
+    oldAction_ = SIG_DFL;
+
+    if (SIG_ERR == success)
+    {
+        FatalErrorIn
+        (
+            "Foam::sigSegv::~sigSegv()"
+        )   << "Cannot reset SIGSEGV trapping"
+            << abort(FatalError);    
+    }
+}
+
+
+// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
+
+void Foam::sigSegv::set(const bool verbose)
+{
+    if (SIG_DFL != oldAction_)
+    {
+        FatalErrorIn
+        (
+            "Foam::sigSegv::set()"
+        )   << "Cannot call sigSegv::set() more than once"
+            << abort(FatalError);
+    }
+
+    oldAction_ = ::signal(SIGSEGV, &Foam::sigSegv::sigSegvHandler);        
+
+    if (SIG_ERR == oldAction_)
+    {
+        oldAction_ = SIG_DFL;
+
+        FatalErrorIn
+        (
+            "Foam::sigSegv::set()"
+        )   << "Cannot set SIGSEGV trapping"
+            << abort(FatalError);    
+    }
+}
+
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/signals/sigSegv.H b/src/OSspecific/MSwindows/signals/sigSegv.H
new file mode 100644
index 0000000..d1a61fa
--- /dev/null
+++ b/src/OSspecific/MSwindows/signals/sigSegv.H
@@ -0,0 +1,85 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    sigSegv
+
+Description
+    Signal handler for SEGV interupt.  The standard interupt handler is
+    overridden to ensure that the runningJob file is removed.
+
+SourceFiles
+    sigSegv.C
+
+\*---------------------------------------------------------------------------*/
+
+#include "OSspecific.H"
+
+#include <signal.h>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class sigSegv Declaration
+\*---------------------------------------------------------------------------*/
+
+class sigSegv
+{
+    // Private data
+
+        //- Saved old signal trapping setting
+        static __p_sig_fn_t oldAction_;
+
+
+    // Private Member Functions
+
+        static void sigSegvHandler(int);
+
+
+public:
+
+    // Constructors
+
+        sigSegv();
+
+
+    // Destructor
+
+        ~sigSegv();
+
+
+    // Member functions
+
+        void set(const bool verbose);
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/timer.C b/src/OSspecific/MSwindows/timer.C
new file mode 100644
index 0000000..ae7233b
--- /dev/null
+++ b/src/OSspecific/MSwindows/timer.C
@@ -0,0 +1,183 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Description
+
+\*---------------------------------------------------------------------------*/
+
+#include "error.H"
+#include "MSwindows.H"
+#include "timer.H"
+
+#ifndef WINVER
+#define WINVER 0x0500 // To access CreateTimerQueueTimer
+#else
+#if (WINVER < 0x0500)
+#undef WINVER
+#define WINVER 0x0500 // To access CreateTimerQueueTimer
+#endif
+#endif
+
+#include <windows.h>
+
+#define SIGALRM 14
+
+
+// * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
+
+defineTypeNameAndDebug(Foam::timer, 0);
+
+jmp_buf Foam::timer::envAlarm;
+
+__p_sig_fn_t Foam::timer::oldAction_ = SIG_DFL;
+
+static HANDLE hTimer_ = NULL;
+
+// * * * * * * * * * * * * * Static Member Functions * * * * * * * * * * * * //
+
+void Foam::timer::signalHandler(int)
+{     
+    if (debug)
+    {
+        Info<< "Foam::timer::signalHandler(int sig) : "
+            << " timed out. Jumping."
+            << endl;
+    }
+    ::longjmp(envAlarm, 1);
+}
+
+
+static VOID CALLBACK timerExpired(PVOID lpParam, BOOLEAN TimerOrWaitFired)
+{
+    ::raise(SIGALRM);
+}
+
+
+// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //
+
+
+// Construct from components
+Foam::timer::timer(const unsigned int newTimeOut)
+:
+    newTimeOut_(newTimeOut)
+{
+
+    if (newTimeOut > 0)
+    {
+        // Is singleton since handler is static function
+        if (NULL != hTimer_)
+        {
+            FatalErrorIn
+            (
+                "Foam::timer::timer(const unsigned int)"
+            )   << "timer already used."
+                << abort(FatalError);    
+        }
+
+        // Install alarm signal handler:
+        oldAction_ = ::signal(SIGALRM, &Foam::timer::signalHandler);
+
+        if (SIG_ERR == oldAction_)
+        {
+            oldAction_ = SIG_DFL;
+
+            FatalErrorIn
+            (
+                "Foam::timer::timer(const unsigned int)"
+            )   << "sigaction(SIGALRM) error"
+                << abort(FatalError);    
+        }
+
+        if (debug)
+        {
+            Info<< "Foam::timer::timer(const unsigned int) : "
+                << " installing timeout " << int(newTimeOut_)
+                << " seconds." << endl;
+        }
+
+        const bool success = 
+          ::CreateTimerQueueTimer(&hTimer_, 
+                                  NULL, 
+                                  (WAITORTIMERCALLBACK)timerExpired,
+                                  NULL , 
+                                  newTimeOut * 1000, 
+                                  0, 0);
+
+        if (!success) 
+        {
+            hTimer_ = NULL;
+            FatalErrorIn
+            (
+                "Foam::timer::timer(const unsigned int)"
+            )   << "CreateTimerQueueTimer, "
+                << MSwindows::getLastError()
+                << abort(FatalError);    
+        }
+    }
+}
+
+
+// * * * * * * * * * * * * * * * * Destructor  * * * * * * * * * * * * * * * //
+
+Foam::timer::~timer()
+{
+    if (newTimeOut_ > 0)
+    {
+        // Reset timer
+        const bool timerSuccess = 
+          ::DeleteTimerQueueTimer(NULL, hTimer_, NULL);
+        hTimer_ = NULL;
+
+        if (!timerSuccess) 
+        {
+            FatalErrorIn
+            (
+                "Foam::timer::~timer() "
+            )   << "DeleteTimerQueueTimer, "
+                << MSwindows::getLastError()
+                << abort(FatalError);    
+        }
+
+        if (debug)
+        {
+            Info<< "Foam::timer::~timer() timeOut="
+                << int(newTimeOut_) << endl;
+        }
+
+        const __p_sig_fn_t signalSuccess = signal(SIGALRM, oldAction_);
+        oldAction_ = SIG_DFL;
+
+        // Restore signal handler
+        if (SIG_ERR == signalSuccess)
+        {
+            FatalErrorIn
+            (
+                "Foam::timer::~timer()"
+            )   << "sigaction(SIGALRM) error"
+                << abort(FatalError);    
+        }
+    }
+}
+
+// ************************************************************************* //
diff --git a/src/OSspecific/MSwindows/timer.H b/src/OSspecific/MSwindows/timer.H
new file mode 100644
index 0000000..ab39b95
--- /dev/null
+++ b/src/OSspecific/MSwindows/timer.H
@@ -0,0 +1,130 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 1991-2008 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software; you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by the
+    Free Software Foundation; either version 2 of the License, or (at your
+    option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Class
+    timer
+
+Description
+    Implements a timeout mechanism. Usage is as following:
+
+    timer myTimer(5);     // 5 sec
+    ..
+    if (timedOut(myTimer))
+    {
+        // timed out
+    }
+    else
+    {
+        // do something possible blocking
+    }
+
+    Constructor set signal handler on sigalarm and alarm(). Destructor
+    clears these.
+
+    timedOut is macro because setjmp can't be in member function of timer.
+    ?something to do with stack frames.
+
+    WARNING: setjmp restores complete register state so including local vars
+    held in regs. So if in blocking part something gets calced in a stack
+    based variable make sure it is declared 'volatile'.
+
+SourceFiles
+    timer.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef timer_H
+#define timer_H
+
+#include "className.H"
+
+#include <signal.h>
+#include <setjmp.h>
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+// keep setjmp in same stack frame so no function calls
+#define timedOut(x) \
+    (((x).newTimeOut_ > 0) ? setjmp(Foam::timer::envAlarm) : false)
+
+namespace Foam
+{
+
+/*---------------------------------------------------------------------------*\
+                           Class timer Declaration
+\*---------------------------------------------------------------------------*/
+
+class timer
+{
+    // Private data
+
+        //- old signal
+        static __p_sig_fn_t oldAction_;
+
+        //- old alarm() value
+        static unsigned int oldTimeOut_;
+
+
+    // Private Member Functions
+
+        //- alarm handler
+        static void signalHandler(int);
+
+
+public:
+
+    // Public data
+
+        //- Declare name of the class and it's debug switch
+        ClassName("timer");
+
+        //- current time out value. Needed by macro timedOut
+        unsigned int newTimeOut_;
+
+        //- state for setjmp. Needed by macro timedOut
+        static jmp_buf envAlarm;
+
+
+    // Constructors
+
+        //- Construct from components.
+        //  newTimeOut=0 makes it do nothing.
+        timer(const unsigned int newTimeOut);
+
+
+    // Destructor
+
+        ~timer();
+};
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OSspecific/POSIX/POSIX.C b/src/OSspecific/POSIX/POSIX.C
index 8f068f4..e5ee7fe 100644
--- a/src/OSspecific/POSIX/POSIX.C
+++ b/src/OSspecific/POSIX/POSIX.C
@@ -52,6 +52,7 @@ Description
 #include <netdb.h>
 
 #include <netinet/in.h>
+#include <dlfcn.h>
 
 // * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
 
@@ -1036,5 +1037,53 @@ int Foam::system(const string& command)
     return ::system(command.c_str());
 }
 
+//- Open shared library
+void* Foam::openLibrary(const fileName& libName)
+{
+    // Assume libName is of the form, lib<name>.so
+    void* libHandle = 
+      ::dlopen(libName.c_str(), RTLD_LAZY|RTLD_GLOBAL);
+
+    if (NULL == libHandle)
+    {
+        // Try assuming libName = name
+        Foam::string unixLibName("lib");
+        unixLibName += libName;
+        unixLibName += ".so";
+      
+        libHandle = 
+          ::dlopen(unixLibName.c_str(), RTLD_LAZY|RTLD_GLOBAL);
+    }
+
+    if (NULL == libHandle) 
+    {
+        WarningIn("openLibrary(const fileName& libName)")
+            << "dlopen failed. Error: " 
+            << ::dlerror()
+            << endl;
+    }
+
+    return libHandle;
+}
+
+//- Close shared library
+void Foam::closeLibrary(void* const libHandle)
+{
+    const int success = ::dlclose(libHandle);
+
+    if (0 !=success) 
+    {
+        WarningIn("closeLibrary(void* const libHandle)")
+            << "dlclose failed. Error: " 
+            << ::dlerror()
+            << endl;
+    }
+}
+
+
+Foam::string Foam::toUnixPath(const string & path)
+{
+  return path;
+}
 
 // ************************************************************************* //
diff --git a/src/OpenFOAM/Make/options b/src/OpenFOAM/Make/options
index c5c5809..0cc0ca1 100644
--- a/src/OpenFOAM/Make/options
+++ b/src/OpenFOAM/Make/options
@@ -1,7 +1,34 @@
+include $(RULES)/mplib$(WM_MPLIB)
+
+/*neutralize unwanted lib includes...*/
+PROJECT_LIBS =
+
+#if defined( WIN32 ) || defined( WIN64 )
+
+EXE_INC = \
+    $(PFLAGS) $(PINC)
+
+ifeq ("$(WM_PSTREAMLINK)","LINKTOPSTREAM")
+  LIB_LIBS = -L$(FOAM_MPI_LIBBIN) -lPstream
+else
+  LIB_LIBS = $(FOAM_MPI_LIBBIN)/libPstream.o
+endif
+
+LIB_LIBS += $(FOAM_LIBBIN)/libOSspecific.o \
+           -lz \
+           -lregex \
+           -lstack_trace \
+           $(PLIBS)
+           
+#else
+
 EXE_INC = \
     -I$(WM_THIRD_PARTY_DIR)/zlib-1.2.3
 
 LIB_LIBS = \
     $(FOAM_LIBBIN)/libOSspecific.o \
-    -L$(FOAM_LIBBIN)/dummy -lPstream \
-    -lz
+    -L$(FOAM_MPI_LIBBIN) -lPstream \
+    -lz -ldl
+
+#endif
+
diff --git a/src/OpenFOAM/containers/Lists/PtrList/PtrList.C b/src/OpenFOAM/containers/Lists/PtrList/PtrList.C
index e4e4b10..262d21d 100644
--- a/src/OpenFOAM/containers/Lists/PtrList/PtrList.C
+++ b/src/OpenFOAM/containers/Lists/PtrList/PtrList.C
@@ -51,7 +51,8 @@ Foam::PtrList<T>::PtrList(const PtrList<T>& a)
 {
     forAll(*this, i)
     {
-        ptrs_[i] = (a[i]).clone().ptr();
+        // static_cast work around for autoRefineDriver.C compiler error
+        ptrs_[i] = static_cast<T*>((a[i]).clone().ptr());
     }
 }
 
diff --git a/src/OpenFOAM/db/IOobject/IOobject.C b/src/OpenFOAM/db/IOobject/IOobject.C
index 2e7637c..6386034 100644
--- a/src/OpenFOAM/db/IOobject/IOobject.C
+++ b/src/OpenFOAM/db/IOobject/IOobject.C
@@ -64,9 +64,21 @@ bool Foam::IOobject::IOobject::fileNameComponents
         return false;
     }
 
+#if defined(WIN32) || defined(WIN64)
+    string::size_type first = path.find('/'), first2 = path.find(':');
+    
+    //have to save the second search, just in case!
+    if (first == string::npos && first2 != string::npos)
+    {
+      first = first2;
+    }
+
+    if (first == 0 || first2 == 1)
+#else
     string::size_type first = path.find('/');
 
     if (first == 0)
+#endif
     {
         // called with absolute path
         WarningIn("IOobject::fileNameComponents(const fileName&, ...)")
diff --git a/src/OpenFOAM/db/IOobject/IOobject.H b/src/OpenFOAM/db/IOobject/IOobject.H
index e33fbc2..4100891 100644
--- a/src/OpenFOAM/db/IOobject/IOobject.H
+++ b/src/OpenFOAM/db/IOobject/IOobject.H
@@ -157,7 +157,6 @@ protected:
         //- Set the object state to bad
         void setBad(const string&);
 
-
 public:
 
     //- Runtime type information
@@ -390,6 +389,7 @@ public:
     // Member operators
 
         void operator=(const IOobject&);
+
 };
 
 
diff --git a/src/OpenFOAM/db/IOobject/IOobjectI.H b/src/OpenFOAM/db/IOobject/IOobjectI.H
index 2f9dade..c419b15 100644
--- a/src/OpenFOAM/db/IOobject/IOobjectI.H
+++ b/src/OpenFOAM/db/IOobject/IOobjectI.H
@@ -67,6 +67,12 @@ inline Stream& Foam::IOobject::writeBanner(Stream& os, bool noHint)
         "|   \\\\  /    A nd           | Web:      www.OpenFOAM.com                      |\n"
         "|    \\\\/     M anipulation  |                                                 |\n"
         "\\*---------------------------------------------------------------------------*/\n";
+#if defined( WIN32 ) || defined( WIN64 )
+    os <<
+        "/*   Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt   *\\\n"
+        "|  Based on Windows porting (1.6.x v11) by Symscape: http://www.symscape.com  |\n"
+        "\\*---------------------------------------------------------------------------*/\n";
+#endif
 
     return os;
 }
diff --git a/src/OpenFOAM/db/IOstreams/Fstreams/IFstream.C b/src/OpenFOAM/db/IOstreams/Fstreams/IFstream.C
index 2b931ed..ac86d5f 100644
--- a/src/OpenFOAM/db/IOstreams/Fstreams/IFstream.C
+++ b/src/OpenFOAM/db/IOstreams/Fstreams/IFstream.C
@@ -48,7 +48,10 @@ Foam::IFstreamAllocator::IFstreamAllocator(const fileName& pathname)
         }
     }
 
-    ifPtr_ = new ifstream(pathname.c_str());
+    // Use binary mode in case we read binary.
+    // Causes windows reading to fail if we don't.
+    ifPtr_ = new ifstream(pathname.c_str(), 
+                          ios_base::in|ios_base::binary);
 
     // If the file is compressed, decompress it before reading.
     if (!ifPtr_->good() && isFile(pathname + ".gz", false))
diff --git a/src/OpenFOAM/db/IOstreams/Fstreams/OFstream.C b/src/OpenFOAM/db/IOstreams/Fstreams/OFstream.C
index ccd9157..9d8b273 100644
--- a/src/OpenFOAM/db/IOstreams/Fstreams/OFstream.C
+++ b/src/OpenFOAM/db/IOstreams/Fstreams/OFstream.C
@@ -69,7 +69,10 @@ Foam::OFstreamAllocator::OFstreamAllocator
             rm(pathname + ".gz");
         }
 
-        ofPtr_ = new ofstream(pathname.c_str());
+        // Use binary mode in case we write binary.
+        // Causes windows reading to fail if we don't
+        ofPtr_ = new ofstream(pathname.c_str(), 
+                              ios_base::out|ios_base::binary);
     }
 }
 
diff --git a/src/OpenFOAM/db/dlLibraryTable/dlLibraryTable.C b/src/OpenFOAM/db/dlLibraryTable/dlLibraryTable.C
index 488d8c4..aaae1b2 100644
--- a/src/OpenFOAM/db/dlLibraryTable/dlLibraryTable.C
+++ b/src/OpenFOAM/db/dlLibraryTable/dlLibraryTable.C
@@ -24,8 +24,7 @@ License
 \*---------------------------------------------------------------------------*/
 
 #include "dlLibraryTable.H"
-
-#include <dlfcn.h>
+#include "OSspecific.H"
 
 // * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
 
@@ -56,7 +55,7 @@ Foam::dlLibraryTable::~dlLibraryTable()
 {
     forAllIter(dlLibraryTable, *this, iter)
     {
-        dlclose(iter.key());
+        Foam::closeLibrary(iter.key());
     }
 }
 
@@ -68,14 +67,15 @@ bool Foam::dlLibraryTable::open(const fileName& functionLibName)
     if (functionLibName.size())
     {
         void* functionLibPtr = 
-            dlopen(functionLibName.c_str(), RTLD_LAZY|RTLD_GLOBAL);
+          Foam::openLibrary(functionLibName.c_str());
 
         if (!functionLibPtr)
         {
             WarningIn
             (
                 "dlLibraryTable::open(const fileName& functionLibName)"
-            )   << "could not load " << dlerror()
+            )   << "could not load: " 
+                << functionLibName
                 << endl;
 
             return false;
diff --git a/src/OpenFOAM/global/clock/clock.C b/src/OpenFOAM/global/clock/clock.C
index 809b76b..86bac39 100644
--- a/src/OpenFOAM/global/clock/clock.C
+++ b/src/OpenFOAM/global/clock/clock.C
@@ -127,6 +127,15 @@ time_t Foam::clock::elapsedClockTime() const
     return newTime_ - startTime_;
 }
 
+#ifdef WIN64
+//add a compatible definition, since "long long == long int" in GCC+WIN64
+long int Foam::clock::elapsedClockTime()
+{
+    newTime_ = getTime();
+    return (long int) (newTime_ - startTime_);
+}
+#endif
+
 
 time_t Foam::clock::clockTimeIncrement() const
 {
diff --git a/src/OpenFOAM/global/clock/clock.H b/src/OpenFOAM/global/clock/clock.H
index ce202cc..566444b 100644
--- a/src/OpenFOAM/global/clock/clock.H
+++ b/src/OpenFOAM/global/clock/clock.H
@@ -94,6 +94,11 @@ public:
         //- Returns wall-clock time from clock instantiation
         time_t elapsedClockTime() const;
 
+#ifdef WIN64
+        //add a compatible definition, since "long long == long int" in GCC+WIN64
+        long int elapsedClockTime();
+#endif
+
         //- Returns wall-clock time from last call of clockTimeIncrement()
         time_t clockTimeIncrement() const;
 };
diff --git a/src/OpenFOAM/include/OSspecific.H b/src/OpenFOAM/include/OSspecific.H
index 7b4c3a5..e45770b 100644
--- a/src/OpenFOAM/include/OSspecific.H
+++ b/src/OpenFOAM/include/OSspecific.H
@@ -41,6 +41,11 @@ SourceFiles
 
 #include <sys/types.h>
 
+#ifdef WIN64
+//redefine by force, to override casting issues :(
+#define pid_t long int
+#endif
+
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
 namespace Foam
@@ -176,6 +181,15 @@ bool ping(const word&, const label timeOut=10);
 //- Execute the specified command
 int system(const string& command);
 
+//- Open shared library
+void* openLibrary(const fileName& libName);
+
+//- Close shared library
+void closeLibrary(void* const libHandle);
+
+//- Convert to unix path separators
+string toUnixPath(const string& path);
+
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
 } // End namespace Foam
diff --git a/src/OpenFOAM/include/forceLoadLibraries.H b/src/OpenFOAM/include/forceLoadLibraries.H
new file mode 100644
index 0000000..110c6b3
--- /dev/null
+++ b/src/OpenFOAM/include/forceLoadLibraries.H
@@ -0,0 +1,10 @@
+
+#if defined(WIN32) || defined(WIN64)
+//LIBS_TO_LOAD - introduced by bruno.santos at bluecape dot com dot pt February 2010
+//This allows to forcefully load libraries crucial to the application to run on Windows
+#ifdef LIBS_TO_LOAD
+  //example of LIBS_TO_LOAD: "OpenFOAM incompressibleRASModels Pstream"
+  Foam::string libs_to_load(LIBS_TO_LOAD);
+  Foam::openLibrary(libs_to_load);
+#endif
+#endif
diff --git a/src/OpenFOAM/include/setRootCase.H b/src/OpenFOAM/include/setRootCase.H
index 587374d..2469a1e 100644
--- a/src/OpenFOAM/include/setRootCase.H
+++ b/src/OpenFOAM/include/setRootCase.H
@@ -7,3 +7,5 @@
     {
         Foam::FatalError.exit();
     }
+
+#include "forceLoadLibraries.H"
diff --git a/src/OpenFOAM/primitives/Scalar/doubleFloat.H b/src/OpenFOAM/primitives/Scalar/doubleFloat.H
index b7cac50..568f611 100644
--- a/src/OpenFOAM/primitives/Scalar/doubleFloat.H
+++ b/src/OpenFOAM/primitives/Scalar/doubleFloat.H
@@ -31,6 +31,15 @@ License
 
 #include <cmath>
 
+#if defined( WIN32 ) || defined( WIN64 )
+#define j0f _j0
+#define j1f _j1
+#define jnf _jn
+#define y0f _y0
+#define y1f _y1
+#define ynf _yn
+#endif
+
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
 namespace Foam
diff --git a/src/OpenFOAM/primitives/hashes/Hash/Hash.H b/src/OpenFOAM/primitives/hashes/Hash/Hash.H
index ccf6c28..31949d6 100644
--- a/src/OpenFOAM/primitives/hashes/Hash/Hash.H
+++ b/src/OpenFOAM/primitives/hashes/Hash/Hash.H
@@ -78,17 +78,23 @@ class Hash<void*>
 {
 public:
 
+#ifdef WIN64
+    typedef intptr_t HashType;
+#else
+    typedef long HashType;
+#endif
+
     Hash()
     {}
 
     unsigned operator()(const void* const& p, unsigned seed) const
     {
-        return Hash<long>()(long(p), seed);
+        return Hash<HashType>()(HashType(p), seed);
     }
 
     unsigned operator()(const void* const& p) const
     {
-        return Hash<long>()(long(p));
+        return Hash<HashType>()(HashType(p));
     }
 
 };
diff --git a/src/OpenFOAM/primitives/strings/fileName/fileNameI.H b/src/OpenFOAM/primitives/strings/fileName/fileNameI.H
index eff64ed..e2645d9 100644
--- a/src/OpenFOAM/primitives/strings/fileName/fileNameI.H
+++ b/src/OpenFOAM/primitives/strings/fileName/fileNameI.H
@@ -95,8 +95,11 @@ inline bool Foam::fileName::valid(char c)
 {
     return
     (
-        !isspace(c)
-     && c != '"'   // string quote
+    // Under windows spaces are common in file paths,
+    // so can't disallow them. Prefer also
+    // to allow them under *nix too.
+    //    !isspace(c) &&
+     c != '"'   // string quote
      && c != '\''  // string quote
     );
 }
diff --git a/src/conversion/ensight/part/ensightPart.C b/src/conversion/ensight/part/ensightPart.C
index 2321946..fdde383 100644
--- a/src/conversion/ensight/part/ensightPart.C
+++ b/src/conversion/ensight/part/ensightPart.C
@@ -50,7 +50,7 @@ bool Foam::ensightPart::isFieldDefined(const List<scalar>& field) const
         {
             label id = idList[i];
 
-            if (id >= field.size() || isnan(field[id]))
+            if (id >= field.size() || std::isnan(field[id]))
             {
                 return false;
             }
diff --git a/src/conversion/ensight/part/ensightPartIO.C b/src/conversion/ensight/part/ensightPartIO.C
index 3a0020a..e3214c5 100644
--- a/src/conversion/ensight/part/ensightPartIO.C
+++ b/src/conversion/ensight/part/ensightPartIO.C
@@ -61,7 +61,7 @@ void Foam::ensightPart::writeFieldList
 {
     forAll(idList, i)
     {
-        if (idList[i] >= field.size() || isnan(field[idList[i]]))
+        if (idList[i] >= field.size() || std::isnan(field[idList[i]]))
         {
             os.writeUndef();
         }
diff --git a/src/dynamicMesh/Make/options b/src/dynamicMesh/Make/options
index f168589..f59b560 100644
--- a/src/dynamicMesh/Make/options
+++ b/src/dynamicMesh/Make/options
@@ -5,4 +5,5 @@ EXE_INC = \
 
 LIB_LIBS = \
     -lfiniteVolume \
-    -ltriSurface
+    -ltriSurface \
+    -lmeshTools
diff --git a/src/finiteVolume/Make/options b/src/finiteVolume/Make/options
index b8402e2..8f485ca 100644
--- a/src/finiteVolume/Make/options
+++ b/src/finiteVolume/Make/options
@@ -4,4 +4,5 @@ EXE_INC = \
 
 LIB_LIBS = \
     -ltriSurface \
+    -llagrangian \
     -lmeshTools
diff --git a/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options b/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options
index d95199f..d1c85be 100644
--- a/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options
+++ b/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options
@@ -13,4 +13,5 @@ EXE_INC = \
     $(TYPE_REAL)
 
 LIB_LIBS = \
-    -lMGridGen
+    -lMGridGen \
+    -lfiniteVolume
diff --git a/src/lagrangian/dieselSpray/Make/options b/src/lagrangian/dieselSpray/Make/options
index 454c4f1..aa20514 100644
--- a/src/lagrangian/dieselSpray/Make/options
+++ b/src/lagrangian/dieselSpray/Make/options
@@ -15,13 +15,15 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/pdfs/lnInclude
 
 LIB_LIBS = \
-    -llagrangian \
     -lfiniteVolume \
+    -llagrangian \
     -lcompressibleRASModels \
     -lcompressibleLESModels \
     -lLESdeltas \
+    -lbasicThermophysicalModels \
     -lliquids \
     -lliquidMixture \
     -lthermophysicalFunctions \
     -lspecie \
+    -lreactionThermophysicalModels \
     -lpdf
diff --git a/src/lagrangian/dieselSpray/parcel/parcel.H b/src/lagrangian/dieselSpray/parcel/parcel.H
index 0359fc0..989623d 100644
--- a/src/lagrangian/dieselSpray/parcel/parcel.H
+++ b/src/lagrangian/dieselSpray/parcel/parcel.H
@@ -32,6 +32,7 @@ Description
 #ifndef parcel_H
 #define parcel_H
 
+#include "Cloud.H"
 #include "Particle.H"
 #include "contiguous.H"
 
diff --git a/src/lagrangian/intermediate/Make/options b/src/lagrangian/intermediate/Make/options
index f352597..5945595 100644
--- a/src/lagrangian/intermediate/Make/options
+++ b/src/lagrangian/intermediate/Make/options
@@ -30,4 +30,5 @@ LIB_LIBS = \
     -lbasicThermophysicalModels \
     -lreactionThermophysicalModels \
     -lcompressibleRASModels \
-    -lcompressibleLESModels
+    -lcompressibleLESModels \
+    -lradiation
diff --git a/src/lagrangian/molecularDynamics/molecule/Make/options b/src/lagrangian/molecularDynamics/molecule/Make/options
index 620e87e..2cfc6a5 100644
--- a/src/lagrangian/molecularDynamics/molecule/Make/options
+++ b/src/lagrangian/molecularDynamics/molecule/Make/options
@@ -4,9 +4,8 @@ EXE_INC = \
     -I$(LIB_SRC)/lagrangian/molecularDynamics/potential/lnInclude \
     -I$(LIB_SRC)/lagrangian/molecularDynamics/molecularMeasurements/lnInclude
 
-EXE_LIBS = \
+LIB_LIBS = \
     -lfiniteVolume \
     -llagrangian \
     -lpotential \
-	-lmolecularMeasurements
-
+    -lmolecularMeasurements
diff --git a/src/meshTools/Make/files b/src/meshTools/Make/files
index 272f3e0..34a486d 100644
--- a/src/meshTools/Make/files
+++ b/src/meshTools/Make/files
@@ -149,7 +149,6 @@ $(intersectedSurface)/edgeSurface.C
 
 triSurface/triSurfaceSearch/triSurfaceSearch.C
 triSurface/octreeData/octreeDataTriSurface.C
-triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.C
 triSurface/triangleFuncs/triangleFuncs.C
 triSurface/surfaceFeatures/surfaceFeatures.C
 triSurface/triSurfaceTools/triSurfaceTools.C
diff --git a/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.C b/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.C
index 0c790a5..abd1044 100644
--- a/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.C
+++ b/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.C
@@ -31,6 +31,7 @@ Description
 // * * * * * * * * * * * * * Template Specialisations  * * * * * * * * * * * //
 
 template<>
+inline
 bool Foam::treeLeaf<Foam::octreeDataTriSurface>::findNearest
 (
     const octreeDataTriSurface& shapes,
diff --git a/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.H b/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.H
index 0f2e88e..560c4ec 100644
--- a/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.H
+++ b/src/meshTools/triSurface/octreeData/octreeDataTriSurfaceTreeLeaf.H
@@ -60,6 +60,10 @@ bool treeLeaf<octreeDataTriSurface>::findNearest
 
 } // End namespace Foam
 
+#ifdef NoRepository
+#   include "octreeDataTriSurfaceTreeLeaf.C"
+#endif
+
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
 #endif
diff --git a/src/postProcessing/foamCalcFunctions/Make/options b/src/postProcessing/foamCalcFunctions/Make/options
index fa15f12..71b7873 100644
--- a/src/postProcessing/foamCalcFunctions/Make/options
+++ b/src/postProcessing/foamCalcFunctions/Make/options
@@ -1,5 +1,5 @@
 EXE_INC = \
     -I$(LIB_SRC)/finiteVolume/lnInclude
 
-EXE_LIBS = \
+LIB_LIBS = \
     -lfiniteVolume
diff --git a/src/postProcessing/postCalc/Make/options b/src/postProcessing/postCalc/Make/options
index fa15f12..71b7873 100644
--- a/src/postProcessing/postCalc/Make/options
+++ b/src/postProcessing/postCalc/Make/options
@@ -1,5 +1,5 @@
 EXE_INC = \
     -I$(LIB_SRC)/finiteVolume/lnInclude
 
-EXE_LIBS = \
+LIB_LIBS = \
     -lfiniteVolume
diff --git a/src/sampling/Make/options b/src/sampling/Make/options
index 6629b36..0e2c678 100644
--- a/src/sampling/Make/options
+++ b/src/sampling/Make/options
@@ -9,4 +9,5 @@ LIB_LIBS = \
     -lfiniteVolume \
     -lmeshTools \
     -lsurfMesh \
-    -ltriSurface
+    -ltriSurface \
+    -llagrangian
diff --git a/src/thermophysicalModels/barotropicCompressibilityModel/Make/options b/src/thermophysicalModels/barotropicCompressibilityModel/Make/options
index fa15f12..71b7873 100644
--- a/src/thermophysicalModels/barotropicCompressibilityModel/Make/options
+++ b/src/thermophysicalModels/barotropicCompressibilityModel/Make/options
@@ -1,5 +1,5 @@
 EXE_INC = \
     -I$(LIB_SRC)/finiteVolume/lnInclude
 
-EXE_LIBS = \
+LIB_LIBS = \
     -lfiniteVolume
diff --git a/src/thermophysicalModels/basic/Make/options b/src/thermophysicalModels/basic/Make/options
index 8b8c073..196a42a 100644
--- a/src/thermophysicalModels/basic/Make/options
+++ b/src/thermophysicalModels/basic/Make/options
@@ -3,4 +3,5 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/specie/lnInclude
 
 LIB_LIBS = \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -lspecie
diff --git a/src/thermophysicalModels/chemistryModel/Make/options b/src/thermophysicalModels/chemistryModel/Make/options
index 3cdfbc2..e9cb61d 100644
--- a/src/thermophysicalModels/chemistryModel/Make/options
+++ b/src/thermophysicalModels/chemistryModel/Make/options
@@ -5,12 +5,14 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/specie/lnInclude \
     -I$(LIB_SRC)/thermophysicalModels/functions/Polynomial \
     -I$(LIB_SRC)/thermophysicalModels/thermophysicalFunctions/lnInclude \
-    -I$(LIB_SRC)/turbulenceModels/compressible/lnInclude \
+    -I$(LIB_SRC)/turbulenceModels/RAS/compressible/lnInclude \
     -I$(LIB_SRC)/ODE/lnInclude
 
 LIB_LIBS = \
+    -lfiniteVolume \
     -lbasicThermophysicalModels \
     -lreactionThermophysicalModels \
     -lspecie \
     -lthermophysicalFunctions \
+    -lcompressibleRASModels \
     -lODE
diff --git a/src/thermophysicalModels/laminarFlameSpeed/Make/options b/src/thermophysicalModels/laminarFlameSpeed/Make/options
index fe682da..e7bcb1a 100644
--- a/src/thermophysicalModels/laminarFlameSpeed/Make/options
+++ b/src/thermophysicalModels/laminarFlameSpeed/Make/options
@@ -5,4 +5,7 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/reactionThermo/lnInclude
 
 LIB_LIBS = \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -lspecie \
+    -lbasicThermophysicalModels \
+    -lreactionThermophysicalModels
diff --git a/src/thermophysicalModels/liquidMixture/Make/options b/src/thermophysicalModels/liquidMixture/Make/options
index 506b8ac..b6b72d7 100644
--- a/src/thermophysicalModels/liquidMixture/Make/options
+++ b/src/thermophysicalModels/liquidMixture/Make/options
@@ -5,3 +5,9 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/combustion/lnInclude \
     -I$(LIB_SRC)/thermophysicalModels/thermophysicalFunctions/lnInclude
 
+LIB_LIBS = \
+    -lbasicThermophysicalModels \
+    -lspecie \
+    -lliquids \
+    -lreactionThermophysicalModels \
+    -lthermophysicalFunctions
diff --git a/src/thermophysicalModels/liquids/Make/options b/src/thermophysicalModels/liquids/Make/options
index 8a129fd..6b2b1a7 100644
--- a/src/thermophysicalModels/liquids/Make/options
+++ b/src/thermophysicalModels/liquids/Make/options
@@ -1 +1,4 @@
 EXE_INC = -I$(LIB_SRC)/thermophysicalModels/thermophysicalFunctions/lnInclude
+
+LIB_LIBS = \
+    -lthermophysicalFunctions
diff --git a/src/thermophysicalModels/radiation/Make/options b/src/thermophysicalModels/radiation/Make/options
index 1288699..bda1355 100644
--- a/src/thermophysicalModels/radiation/Make/options
+++ b/src/thermophysicalModels/radiation/Make/options
@@ -4,4 +4,4 @@ EXE_INC = \
 
 LIB_LIBS = \
     -lfiniteVolume \
-    -lspecie
+    -lbasicThermophysicalModels
diff --git a/src/thermophysicalModels/reactionThermo/Make/options b/src/thermophysicalModels/reactionThermo/Make/options
index 9dad391..6461836 100644
--- a/src/thermophysicalModels/reactionThermo/Make/options
+++ b/src/thermophysicalModels/reactionThermo/Make/options
@@ -4,4 +4,6 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/specie/lnInclude
 
 LIB_LIBS = \
-    -lfiniteVolume
+    -lfiniteVolume \
+    -lbasicThermophysicalModels \
+    -lspecie
diff --git a/src/thermophysicalModels/solidMixture/Make/options b/src/thermophysicalModels/solidMixture/Make/options
index fc8c86a..8fa22e6 100644
--- a/src/thermophysicalModels/solidMixture/Make/options
+++ b/src/thermophysicalModels/solidMixture/Make/options
@@ -1,2 +1,5 @@
 EXE_INC = \
     -I${LIB_SRC}/thermophysicalModels/solids/lnInclude
+
+LIB_LIBS = \
+    -lsolids
diff --git a/src/triSurface/Make/options b/src/triSurface/Make/options
index cd3f5ed..e69de29 100644
--- a/src/triSurface/Make/options
+++ b/src/triSurface/Make/options
@@ -1,3 +0,0 @@
-EXE_INC = \
-    -I$(WM_THIRD_PARTY_DIR)/zlib-1.2.3
-
diff --git a/src/turbulenceModels/compressible/LES/Make/options b/src/turbulenceModels/compressible/LES/Make/options
index 5f392ce..0b240bf 100644
--- a/src/turbulenceModels/compressible/LES/Make/options
+++ b/src/turbulenceModels/compressible/LES/Make/options
@@ -11,4 +11,6 @@ LIB_LIBS = \
     -lLESdeltas \
     -lLESfilters \
     -lfiniteVolume \
-    -lmeshTools
+    -lmeshTools \
+    -lbasicThermophysicalModels \
+    -lfiniteVolume
diff --git a/src/turbulenceModels/compressible/turbulenceModel/Make/options b/src/turbulenceModels/compressible/turbulenceModel/Make/options
index 075a037..a1b4c13 100644
--- a/src/turbulenceModels/compressible/turbulenceModel/Make/options
+++ b/src/turbulenceModels/compressible/turbulenceModel/Make/options
@@ -4,5 +4,5 @@ EXE_INC = \
     -I$(LIB_SRC)/thermophysicalModels/basic/lnInclude
 
 LIB_LIBS = \
-    -lfiniteVolume
-
+    -lfiniteVolume \
+    -lbasicThermophysicalModels
diff --git a/src/turbulenceModels/incompressible/RAS/Make/options b/src/turbulenceModels/incompressible/RAS/Make/options
index 73454e7..297c477 100644
--- a/src/turbulenceModels/incompressible/RAS/Make/options
+++ b/src/turbulenceModels/incompressible/RAS/Make/options
@@ -7,4 +7,5 @@ EXE_INC = \
 LIB_LIBS = \
     -lincompressibleTurbulenceModel \
     -lfiniteVolume \
-    -lmeshTools
+    -lmeshTools \
+    -lincompressibleTransportModels
diff --git a/src/turbulenceModels/incompressible/turbulenceModel/Make/options b/src/turbulenceModels/incompressible/turbulenceModel/Make/options
index 2af4fa4..405ab6b 100644
--- a/src/turbulenceModels/incompressible/turbulenceModel/Make/options
+++ b/src/turbulenceModels/incompressible/turbulenceModel/Make/options
@@ -4,5 +4,6 @@ EXE_INC = \
     -I$(LIB_SRC)/transportModels
 
 LIB_LIBS = \
-    -lfiniteVolume
-
+    -lfiniteVolume \
+    -lincompressibleTransportModels \
+    -lmeshTools
diff --git a/tutorials/Allwclean b/tutorials/Allwclean
new file mode 100644
index 0000000..84e5efb
--- /dev/null
+++ b/tutorials/Allwclean
@@ -0,0 +1,41 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     Allwclean
+#
+# Description
+#     Cleaning script for the tutorials that have Make folders.
+#
+#------------------------------------------------------------------------------
+
+find . -name Make | \
+while read makeFolder; do
+
+  #get the parent folder of Make
+  folderToBuild=`echo $makeFolder | sed -e 's=/Make$=='`
+
+  wclean all $folderToBuild
+
+done
diff --git a/tutorials/Allwmake b/tutorials/Allwmake
new file mode 100755
index 0000000..91ef454
--- /dev/null
+++ b/tutorials/Allwmake
@@ -0,0 +1,45 @@
+#!/bin/sh
+#------------------------------------------------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 1991-2010 OpenCFD Ltd.
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# Script
+#     Allwmake
+#
+# Description
+#     Build script for the tutorials that have Make folders.
+#
+#------------------------------------------------------------------------------
+
+find . -name Make | \
+while read makeFolder; do
+
+  #get the parent folder of Make
+  folderToBuild=`echo $makeFolder | sed -e 's=/Make$=='`
+
+  wmake all $folderToBuild
+
+  if isMinGW; then
+    wmakeVerifyExeDependencies $folderToBuild || wmake all $folderToBuild
+  fi
+
+done
diff --git a/tutorials/compressible/rhoPorousSimpleFoam/angledDuctExplicit/README.TXT b/tutorials/compressible/rhoPorousSimpleFoam/angledDuctExplicit/README.TXT
new file mode 100644
index 0000000..9d95d1a
--- /dev/null
+++ b/tutorials/compressible/rhoPorousSimpleFoam/angledDuctExplicit/README.TXT
@@ -0,0 +1 @@
+Folders 0 and constant are copies from ../angledDuctImplicit/
diff --git a/tutorials/incompressible/porousSimpleFoam/angledDuctExplicit/readme.txt b/tutorials/incompressible/porousSimpleFoam/angledDuctExplicit/readme.txt
new file mode 100644
index 0000000..9d95d1a
--- /dev/null
+++ b/tutorials/incompressible/porousSimpleFoam/angledDuctExplicit/readme.txt
@@ -0,0 +1 @@
+Folders 0 and constant are copies from ../angledDuctImplicit/
diff --git a/tutorials/incompressible/simpleFoam/motorBike/fixForWindows b/tutorials/incompressible/simpleFoam/motorBike/fixForWindows
new file mode 100644
index 0000000..17d6802
--- /dev/null
+++ b/tutorials/incompressible/simpleFoam/motorBike/fixForWindows
@@ -0,0 +1,17 @@
+#!/bin/sh
+
+echo "Moving constant/triSurface/motorBike.stl constant/triSurface/motorBike.orig.stl"
+mv constant/triSurface/motorBike.stl constant/triSurface/motorBike.orig.stl
+echo "Creating motorBike.stl compatible with Windows filesystem"
+cat constant/triSurface/motorBike.orig.stl | sed 's/\(.*\):\(.*\)%/\1_\2_/' | sed 's/\(.*\)%/\1_/' > constant/triSurface/motorBike.stl
+
+echo "Moving system/snappyHexMeshDict system/snappyHexMeshDict.orig"
+mv system/snappyHexMeshDict system/snappyHexMeshDict.orig
+echo "Creating snappyHexMeshDict references to the motorBike.stl compatible with Windows filesystem"
+cat system/snappyHexMeshDict.orig | sed 's/\(.*\):\(.*\)%/\1_\2_/' | sed 's/\(.*\)%/\1_/' > system/snappyHexMeshDict
+
+echo "Removing originals..."
+rm constant/triSurface/motorBike.orig.stl
+rm system/snappyHexMeshDict.orig
+
+echo "The motorBike case is now compatible with the Windows filesystem."
diff --git a/tutorials/lagrangian/rhoPisoTwinParcelFoam/rhoPisoTwinParcelFoam/Make/options b/tutorials/lagrangian/rhoPisoTwinParcelFoam/rhoPisoTwinParcelFoam/Make/options
index 2f17d01..02fd97d 100644
--- a/tutorials/lagrangian/rhoPisoTwinParcelFoam/rhoPisoTwinParcelFoam/Make/options
+++ b/tutorials/lagrangian/rhoPisoTwinParcelFoam/rhoPisoTwinParcelFoam/Make/options
@@ -20,4 +20,5 @@ EXE_LIBS = \
     -lspecie \
     -lradiation \
     -lcompressibleRASModels \
-    -lcompressibleLESModels
+    -lcompressibleLESModels \
+    -lcompressibleTurbulenceModel
diff --git a/tutorials/mesh/snappyHexMesh/README.TXT b/tutorials/mesh/snappyHexMesh/README.TXT
new file mode 100644
index 0000000..0facb09
--- /dev/null
+++ b/tutorials/mesh/snappyHexMesh/README.TXT
@@ -0,0 +1,3 @@
+Folder iglooWithFridges is a copy from  ../../heatTransfer/buoyantBoussinesqSimpleFoam/iglooWithFridges
+Folder motorBike is a copy from ../../incompressible/simpleFoam/motorBike
+Folder snappyMultiRegionHeater is a copy from ../../heatTransfer/chtMultiRegionFoam/snappyMultiRegionHeater
diff --git a/wmake/rules/General/rc b/wmake/rules/General/rc
new file mode 100644
index 0000000..25f8da4
--- /dev/null
+++ b/wmake/rules/General/rc
@@ -0,0 +1,3 @@
+
+WINDRES_TOOL = `echo $(WM_CC) | sed s/gcc/windres/`
+rctoo = $(WINDRES_TOOL) $$SOURCE $@
diff --git a/wmake/rules/General/sourceToDep b/wmake/rules/General/sourceToDep
index 14e95d6..ea1a2fe 100644
--- a/wmake/rules/General/sourceToDep
+++ b/wmake/rules/General/sourceToDep
@@ -1,4 +1,4 @@
-.SUFFIXES: .c .cc .cxx .cpp .C .F .f .dep
+.SUFFIXES: .c .cc .cxx .cpp .C .F .f .rc .dep
 
 MKDEP       = $(BIN)/wmkdep -I$(*D) $(LIB_HEADER_DIRS)
 
@@ -22,3 +22,6 @@ MKDEP       = $(BIN)/wmkdep -I$(*D) $(LIB_HEADER_DIRS)
 
 .f.dep:
 	$(MAKE_DEP)
+
+.rc.dep:
+	$(MAKE_DEP)
diff --git a/wmake/rules/linuxamd64-mingw32msvc/c b/wmake/rules/linuxamd64-mingw32msvc/c
new file mode 100644
index 0000000..1161064
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/c
@@ -0,0 +1,16 @@
+.SUFFIXES: .c .h
+
+cWARN        = -Wall
+
+cc          = $(WM_CC) -m$(WM_ARCH_OPTION)
+
+include $(RULES)/c$(WM_COMPILE_OPTION)
+
+cFLAGS      = $(GFLAGS) $(cWARN) $(cOPT) $(cDBUG) $(LIB_HEADER_DIRS)
+
+ctoo        = $(WM_SCHEDULER) $(cc) $(cFLAGS) -c $$SOURCE -o $@
+
+LINK_LIBS   = $(cDBUG)
+
+LINKLIBSO   = $(cc) $(cFLAGS) -Wl,--output-def,$(LIB).def,--out-implib,$(LIB).a,--enable-auto-import,--strip-all -shared
+LINKEXE     = $(cc) $(cFLAGS) -Wl,--enable-auto-import,--force-exe-suffix,--strip-all
diff --git a/wmake/rules/linuxamd64-mingw32msvc/c++ b/wmake/rules/linuxamd64-mingw32msvc/c++
new file mode 100644
index 0000000..a69061d
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/c++
@@ -0,0 +1,23 @@
+.SUFFIXES: .C .cxx .cc .cpp
+
+c++WARN     = -Wall -Wextra -Wno-unused-parameter -Wold-style-cast
+
+CC          = $(WM_CXX)
+
+include $(RULES)/c++$(WM_COMPILE_OPTION)
+
+ptFLAGS     = -DNoRepository -ftemplate-depth-40
+
+c++FLAGS    = $(GFLAGS) $(c++WARN) $(c++OPT) $(c++DBUG) $(ptFLAGS) $(LIB_HEADER_DIRS)
+
+Ctoo        = $(WM_SCHEDULER) $(CC) $(c++FLAGS) -c $$SOURCE -o $@
+cxxtoo      = $(Ctoo)
+cctoo       = $(Ctoo)
+cpptoo      = $(Ctoo)
+
+LINK_LIBS   = $(c++DBUG)
+
+# Tried using -Wl,-no-undefined,--enable-runtime-pseudo-reloc
+# but didnt forgive undefined symbols during linking
+LINKLIBSO   = $(CC) $(c++FLAGS) -Wl,--output-def,$(LIB).def,--out-implib,$(LIB).a,--enable-auto-import,--strip-all -shared
+LINKEXE     = $(CC) $(c++FLAGS) -Wl,--enable-auto-import,--force-exe-suffix,--strip-all
diff --git a/wmake/rules/linuxamd64-mingw32msvc/c++Debug b/wmake/rules/linuxamd64-mingw32msvc/c++Debug
new file mode 100644
index 0000000..19bdb9c
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/c++Debug
@@ -0,0 +1,2 @@
+c++DBUG    = -ggdb3 -DFULLDEBUG
+c++OPT      = -O0 -fdefault-inline
diff --git a/wmake/rules/linuxamd64-mingw32msvc/c++Opt b/wmake/rules/linuxamd64-mingw32msvc/c++Opt
new file mode 100644
index 0000000..cc26575
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/c++Opt
@@ -0,0 +1,2 @@
+c++DBUG     = 
+c++OPT      = -O2 -DNDEBUG
diff --git a/wmake/rules/linuxamd64-mingw32msvc/c++Prof b/wmake/rules/linuxamd64-mingw32msvc/c++Prof
new file mode 100644
index 0000000..d1ce86f
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/c++Prof
@@ -0,0 +1,3 @@
+c++DBUG    = -pg
+c++OPT     = 
+#-O2
diff --git a/wmake/rules/linuxamd64-mingw32msvc/cDebug b/wmake/rules/linuxamd64-mingw32msvc/cDebug
new file mode 100644
index 0000000..6c71ed9
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/cDebug
@@ -0,0 +1,2 @@
+cDBUG       = -ggdb -DFULLDEBUG
+cOPT        = -O1 -finline-functions
diff --git a/wmake/rules/linuxamd64-mingw32msvc/cOpt b/wmake/rules/linuxamd64-mingw32msvc/cOpt
new file mode 100644
index 0000000..44113ef
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/cOpt
@@ -0,0 +1,2 @@
+cDBUG       = 
+cOPT        = -O2 -DNDEBUG
diff --git a/wmake/rules/linuxamd64-mingw32msvc/cProf b/wmake/rules/linuxamd64-mingw32msvc/cProf
new file mode 100644
index 0000000..8fe44b4
--- /dev/null
+++ b/wmake/rules/linuxamd64-mingw32msvc/cProf
@@ -0,0 +1,3 @@
+cDBUG       = -p
+cOPT        = 
+#-O2
